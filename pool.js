// Generated by CoffeeScript 1.3.3
var Pool, fn, _i, _len, _ref;

Pool = (function() {

  Pool.methodNames = ['fixedUpdate', 'simulate', 'update', 'lateUpdate', 'render'];

  Pool.methodRegx = /^(?:on|did)[A-Z]/;

  Pool.byMethod = {};

  function Pool(cls) {
    var fn, names, proto, _i, _j, _len, _len1, _ref,
      _this = this;
    this.cls = cls;
    this.roster = [];
    proto = cls.prototype;
    this.name = proto.name;
    this.cls.pool = this;
    names = Pool.methodNames;
    _ref = Object.keys(proto).concat(Object.keys(cls));
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      if (Pool.methodRegx.test(fn) && names.indexOf(fn) === -1) {
        names.push(fn);
      }
    }
    for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
      fn = names[_j];
      if (fn in cls) {
        this[fn] = cls[fn];
      } else if (fn in cls.prototype) {
        this[fn] = this.forEach(fn);
      } else {
        continue;
      }
      Pool.byMethod[fn].push(this);
    }
    cls.alloc = function() {
      return _this.alloc.apply(_this, arguments);
    };
  }

  Pool.prototype.toString = function() {
    return 'Pool ' + this.name + '[' + this.roster.length + ']';
  };

  Pool.prototype.preinstantiate = function(i) {
    while (i--) {
      this.roster.push(this.instantiate());
    }
    return this;
  };

  Pool.prototype.instantiate = function() {
    return new this.cls();
  };

  Pool.prototype.alloc = function() {
    var entity, i, roster;
    roster = this.roster;
    i = roster.length;
    while (i--) {
      if (!roster[i].enabled) {
        entity = roster[i];
        break;
      }
    }
    if (!entity) {
      roster.push((entity = this.instantiate()));
    }
    entity.enabled = entity.allocd = true;
    entity.alloc.apply(entity, arguments);
    return entity;
  };

  Pool.prototype.forEach = function(fn) {
    return function(a0, a1, a2, a3, a4, a5, a6, a7) {
      var i, roster;
      roster = this.roster;
      i = roster.length;
      while (i--) {
        if (roster[i].enabled) {
          roster[i][fn](a0, a1, a2, a3);
        }
      }
      return this;
    };
  };

  return Pool;

})();

_ref = Pool.methodNames;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  fn = _ref[_i];
  Pool.byMethod[fn] = [];
}

Pool.call = function(fn, a0, a1, a2, a3) {
  var i, stack, _results;
  stack = this.byMethod[fn];
  i = stack.length;
  _results = [];
  while (i--) {
    _results.push(stack[i][fn](a0, a1, a2, a3));
  }
  return _results;
};
