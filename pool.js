// Generated by CoffeeScript 1.3.3
var Pool, fn, _i, _len, _ref;

Pool = (function() {

  Pool.loops = ['fixedUpdate', 'simulate', 'update', 'lateUpdate', 'render'];

  function Pool(cls) {
    var fn, _i, _len, _ref,
      _this = this;
    this.cls = cls;
    this.roster = [];
    this.name = cls.prototype.name;
    this.cls.pool = this;
    _ref = Pool.loops;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      if (fn in cls) {
        this[fn] = cls[fn];
      } else if (fn in cls.prototype) {
        this[fn] = this.forEach(fn);
      } else {
        continue;
      }
      Pool.stacks[fn].push(this);
    }
    cls.alloc = function() {
      return _this.alloc.apply(_this, arguments);
    };
  }

  Pool.prototype.toString = function() {
    return 'Pool ' + this.name + '[' + this.roster.length + ']';
  };

  Pool.prototype.preinstantiate = function(i) {
    while (i--) {
      this.roster.push(this.instantiate());
    }
    return this;
  };

  Pool.prototype.instantiate = function() {
    return new this.cls();
  };

  Pool.prototype.alloc = function() {
    var entity, i, roster;
    roster = this.roster;
    i = roster.length;
    while (i--) {
      if (!roster[i].enabled) {
        entity = roster[i];
        break;
      }
    }
    if (!entity) {
      roster.push((entity = this.instantiate()));
    }
    entity.enabled = entity.allocd = true;
    entity.alloc.apply(entity, arguments);
    return entity;
  };

  Pool.prototype.forEach = function(fn) {
    return function(dt, scene) {
      var i, roster;
      roster = this.roster;
      i = roster.length;
      while (i--) {
        if (roster[i].enabled) {
          roster[i][fn](dt, scene);
        }
      }
      return this;
    };
  };

  return Pool;

})();

Pool.stacks = {};

_ref = Pool.loops;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  fn = _ref[_i];
  Pool.stacks[fn] = [];
}
