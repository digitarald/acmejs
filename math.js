// Generated by CoffeeScript 1.3.3
var Vec2;

Vec2 = function(fromOrX, y) {
  if (typeof y !== 'undefined') {
    return [fromOrX, y];
  }
  if (typeof fromOrX !== 'undefined') {
    return [fromOrX[0], fromOrX[1]];
  }
  return [0, 0];
};

Vec2.cache = [Vec2(), Vec2(), Vec2(), Vec2(), Vec2()];

Vec2.angleCache = [Vec2(), Vec2()];

Vec2.EPSILON = 0.00001;

Vec2.set = function(a, x, y) {
  a[0] = x;
  a[1] = y;
  return a;
};

Vec2.eq = function(a, b) {
  var d1, d2, e;
  e = Vec2.EPSILON;
  d1 = Math.abs(a[0] - b[0]);
  d2 = Math.abs(a[1] - b[1]);
  return d1 < e && d2 < e;
};

Vec2.add = function(a, b, result) {
  result = result || a;
  result[0] = a[0] + b[0];
  result[1] = a[1] + b[1];
  return result;
};

Vec2.sub = function(a, b, result) {
  result = result || a;
  result[0] = a[0] - b[0];
  result[1] = a[1] - b[1];
  return result;
};

Vec2.mul = function(a, b, result) {
  result = result || a;
  result[0] = a[0] * b[0];
  result[1] = a[1] * b[1];
  return result;
};

Vec2.sca = function(a, scl, result) {
  result = result || a;
  result[0] = a[0] * scl;
  result[1] = a[1] * scl;
  return result;
};

Vec2.neg = function(a, result) {
  result = result || a;
  result[0] = -a[0];
  result[1] = -a[1];
  return result;
};

Vec2.norm = function(a, result) {
  var len, x, y;
  result = result || a;
  x = a[0];
  y = a[1];
  len = Math.sqrt(x * x + y * y);
  len = 1 / len;
  result[0] = x * len;
  result[1] = y * len;
  return result;
};

Vec2.len = function(a) {
  var x, y;
  x = a[0];
  y = a[1];
  return Math.sqrt(x * x + y * y);
};

Vec2.dot = function(a, b) {
  return a[0] * b[0] + a[1] * b[1];
};

Vec2.cross = function(a, b) {
  return a[0] * b[1] - a[1] * b[0];
};

Vec2.dist = function(a, b) {
  var x, y;
  x = b[0] - a[0];
  y = b[1] - a[1];
  return Math.sqrt(x * x + y * y);
};

Vec2.angle = function(a, b) {
  if (!b) {
    return Math.atan2(a[0], a[1]);
  }
  return Math.acos(Vec2.dot(Vec2.norm(a, Vec2.angleCache[0]), Vec2.norm(b, Vec2.angleCache[1])));
};

Vec2.clamp = function(a, low, high, result) {
  result = result || a;
  result[0] = Math.clamp(a[0], low[0], high[0]);
  result[1] = Math.clamp(a[1], low[1], high[1]);
  return result;
};

Math.TAU = Math.PI * 2;

Math.clamp = function(a, low, high) {
  if (a < low) {
    return low;
  }
  if (a > high) {
    return high;
  } else {
    return a;
  }
};
