// Generated by CoffeeScript 1.3.3
var Border, Component, Engine, Pool, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Component = require('./component');

Pool = require('./pool');

Vec2 = require('./math').Vec2;

Engine = require('./engine');

Border = (function(_super) {

  __extends(Border, _super);

  function Border() {
    return Border.__super__.constructor.apply(this, arguments);
  }

  Border.prototype.type = 'border';

  Border.prototype.reset = function() {
    this.kill = null;
    return this.bounciness = 1;
  };

  return Border;

})(Component);

Border.simulate = function(dt) {
  var border, bounciness, diff, hit, horizontal, parent, pos, radius, size, vel, vertical, viewport, _i, _len, _ref;
  size = Engine.renderer.content;
  viewport = Engine.renderer.pos;
  horizontal = Vec2.set(Vec2.cache[0], viewport[0], viewport[0] + size[0]);
  vertical = Vec2.set(Vec2.cache[1], viewport[1], viewport[1] + size[1]);
  _ref = this.roster;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    border = _ref[_i];
    if (!border.enabled) {
      continue;
    }
    parent = border.parent;
    bounciness = border.bounciness;
    pos = parent.transform.pos;
    vel = parent.kinetic.vel;
    radius = parent.radius || parent.bounds.radius;
    if (border.kill) {
      radius *= -1;
    }
    hit = null;
    diff = pos[0] - radius - horizontal[0];
    if (diff < 0) {
      pos[0] -= diff;
      vel[0] *= -bounciness;
      hit = 0;
    } else {
      diff = pos[0] + radius - horizontal[1];
      if (diff > 0) {
        pos[0] -= diff;
        vel[0] *= -bounciness;
        hit = 0;
      }
    }
    diff = pos[1] - radius - vertical[0];
    if (diff < 0) {
      pos[1] -= diff;
      vel[1] *= -bounciness;
      hit = 1;
    } else {
      diff = pos[1] + radius - vertical[1];
      if (diff > 0) {
        pos[1] -= diff;
        vel[1] *= -bounciness;
        hit = 1;
      }
    }
    if (hit != null) {
      parent.pub('onBorder', hit);
      if (border.kill) {
        parent.free();
      }
    }
  }
  return this;
};

new Pool(Border);

module.exports = Border;
