// Generated by CoffeeScript 1.6.1
var Entity, Pool;

Pool = require('./pool');

Entity = (function() {

  function Entity() {
    this.children = {};
    this.components = {};
  }

  Entity.prototype.toString = function() {
    var comps;
    comps = Object.keys(this.components).join(', ');
    return "Entity " + (this.id || '') + "#" + this.uid + " (" + comps + ") [^ " + this.parent + "]";
  };

  Entity.prototype.alloc = function(attributes) {
    var attribute, child, key, pool, _i, _len;
    if (this.parent) {
      this.parent.children[this.uid] = this;
    }
    if (attributes) {
      for (key in attributes) {
        attribute = attributes[key];
        switch (key) {
          case 'children':
            for (_i = 0, _len = attribute.length; _i < _len; _i++) {
              child = attribute[_i];
              Entity.alloc(this, child);
            }
            break;
          case 'id':
            this.id = attribute;
            break;
          default:
            if ((pool = Pool.byTag[key])) {
              pool.alloc(this, attribute);
            } else {
              throw new Error("Unknown attribute key '" + key + "', expected component. " + this);
            }
        }
      }
    }
    return this;
  };

  Entity.prototype.destroy = function() {
    var key;
    this.pool.destroy(this);
    for (key in this.components) {
      this.components[key].destroy();
    }
    for (key in this.children) {
      this.children[key].destroy();
    }
    return this;
  };

  Entity.prototype.free = function() {
    var ref, refSubs, subs, topic, _i, _len;
    if ((refSubs = this.refSubs)) {
      for (_i = 0, _len = refSubs.length; _i < _len; _i++) {
        ref = refSubs[_i];
        ref.unsub(this);
      }
      refSubs.length = 0;
    }
    if ((subs = this.subs)) {
      for (topic in subs) {
        subs[topic].length = 0;
      }
    }
    if (this.parent) {
      delete this.parent.children[this.uid];
    }
    this.pool.free(this);
    return this;
  };

  Entity.prototype.match = function(selector) {
    var components, tag, _i, _len;
    components = this.components;
    if (Array.isArray(selector)) {
      for (_i = 0, _len = selector.length; _i < _len; _i++) {
        tag = selector[_i];
        if (components[tag]) {
          return true;
        }
      }
    } else if (components[selector]) {
      return true;
    }
    return false;
  };

  Entity.prototype.enable = function(state, deep) {
    var key;
    this.enabled = state != null ? state : state = !this.state;
    this.parent.pub((state ? 'onEnable' : 'onDisable'), this);
    for (key in this.components) {
      this.components[key].enable(state, true);
    }
    if (deep) {
      for (key in this.children) {
        this.children[key].enable(state, true);
      }
    }
    return this;
  };

  Entity.prototype.sub = function(scope, topic, method) {
    var items, refs, subs;
    if (scope == null) {
      scope = this;
    }
    subs = (this.subs || (this.subs = {}));
    items = (subs[topic] || (subs[topic] = []));
    items.push(scope, method);
    if (scope !== this) {
      refs = (scope.refSubs || (scope.refSubs = []));
      refs.push(this);
    }
    return this;
  };

  Entity.prototype.pub = function(topic, a0, a1, a2, a3) {
    var i, items, scope;
    if (this.subs && (items = this.subs[topic]) && (i = items.length)) {
      while ((scope = items[i -= 2])) {
        if (scope.enabled) {
          if (scope[items[i + 1] || topic](a0, a1, a2, a3) === false) {
            return false;
          }
        }
      }
    }
    return this;
  };

  Entity.prototype.pubUp = function(topic, a0, a1, a2, a3) {
    var entity;
    entity = this;
    while (entity) {
      if (!entity.enabled) {
        continue;
      }
      if (entity.pub(topic, a0, a1, a2, a3) === false) {
        return false;
      }
      entity = entity.entity;
    }
    return this;
  };

  Entity.prototype.pubAll = function(topic, a0, a1, a2, a3) {
    return Pool.call(topic, a0, a1, a2, a3);
  };

  Entity.prototype.unsub = function(unscope, untopic) {
    var i, items, length, scope, subs, topic;
    if (subs = this.subs) {
      for (topic in subs) {
        items = subs[topic];
        if (!((i = items.length) && (!untopic || untopic === topic))) {
          continue;
        }
        length = i / 2;
        while ((i -= 2) >= 0) {
          if (scope = items[i]) {
            if (unscope && scope !== unscope) {
              continue;
            } else {
              items[i] = null;
            }
            length--;
          }
        }
        if (length === 0) {
          items.length = 0;
        }
      }
    }
    return this;
  };

  return Entity;

})();

new Pool(Entity);

Entity.Prefab = (function() {

  function Prefab(attributes) {
    var key;
    this.attributes = attributes;
    this.keys = Object.keys(attributes);
    for (key in attributes) {
      if (!attributes[key]) {
        attributes[key] = {};
      }
    }
  }

  Prefab.prototype.alloc = function(parent, attributes) {
    var defaults, key, subKey, subPresets, value, _i, _len, _ref;
    defaults = this.attributes;
    if (attributes) {
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        value = defaults[key];
        if (!attributes[key]) {
          attributes[key] = value;
        } else {
          subPresets = attributes[key];
          if (key === 'children') {
            subPresets.unshift.apply(subPresets, value);
          } else if (typeof value === 'object') {
            for (subKey in value) {
              if (!(subKey in subPresets)) {
                subPresets[subKey] = value[subKey];
              }
            }
          }
          delete attributes[key];
          attributes[key] = subPresets;
        }
      }
    }
    return Entity.alloc(parent, attributes || defaults);
  };

  return Prefab;

})();

module.exports = Entity;
