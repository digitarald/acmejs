// Generated by CoffeeScript 1.6.1
var Component, Console, Engine, Pool, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Component = require('./component');

Pool = require('./pool');

Vec2 = require('./math').Vec2;

Engine = require('./engine');

Console = (function(_super) {

  __extends(Console, _super);

  Console.prototype.tag = 'console';

  function Console() {
    this.colors = ['#ddd', '#fff', '#ffc', '#fcc'];
    this.sections = ['#f9f684', '#f9ad84', '#b778e2', '#78dbe2'];
  }

  Console.prototype.attributes = {
    css: '',
    container: null,
    width: 100,
    height: 56,
    cap: 50,
    resolution: 0.25
  };

  Console.prototype.instantiate = function(attributes) {
    var bar, barCss, color, i, panel, panelCss, ruler, rulerCss, section, sectionCss, spanCss, wrap, _i, _len, _ref;
    this.css = attributes.css, this.container = attributes.container, this.width = attributes.width, this.height = attributes.height, this.cap = attributes.cap, this.resolution = attributes.resolution;
    this.wrap = wrap = document.createElement('div');
    wrap.id = 'console';
    wrap.style.cssText = ("			position: absolute;			left: 0;			top: 0;			user-select: none;			overflow: hidden;			padding: 0;			width: " + this.width + "px;			color: #ccc;			background-color: rgba(0, 0, 0, 0.75);			outline: 1px solid rgba(128, 128, 128, 0.5);			font: 400 9px/20px Helvetica,Arial,sans-serif;			transform: translateZ(0);			text-align: right;			text-shadow: 1px 1px 0 rgba(0, 0, 0, 1), 0 0 1px rgba(0, 0, 0, 1);			cursor: ns-resize;") + this.css;
    this.graphSpan = document.createElement('div');
    this.graphSpan.style.cssText = "			height: " + this.height + "px;			z-index: 1;";
    this.graphSpan.title = 'Fixed Update + Update + Render + Lag';
    barCss = "			width: 1px;			float: left;			margin-top: 0px;";
    sectionCss = "			display: block;			height: 0px;";
    i = this.width;
    while (i--) {
      bar = document.createElement('span');
      bar.className = 'console-bar';
      bar.style.cssText = barCss;
      _ref = this.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        color = _ref[_i];
        section = document.createElement('span');
        section.className = 'console-section';
        section.style.cssText = sectionCss + ("background-color: " + color);
        bar.appendChild(section);
      }
      this.graphSpan.appendChild(bar);
    }
    spanCss = "			font-weight: bold;			font-size: 12px;			float: left;";
    this.fpsSpan = document.createElement('span');
    this.fpsSpan.style.cssText = spanCss;
    this.fpsSpan.title = 'FPS';
    this.fpsSpan2 = document.createElement('span');
    this.tickSpan = document.createElement('span');
    this.tickSpan.style.cssText = spanCss;
    this.tickSpan.title = 'MS per tick';
    this.tickSpan2 = document.createElement('span');
    this.fpsSpan2.title = this.tickSpan2.title = 'Â± standard deviation';
    panelCss = "			width: 50%;			padding: 0 5px;			overflow: hidden;			position: absolute;			top: 0;			left: 0;			-moz-box-sizing: border-box;			-webkit-box-sizing: border-box;			z-index: 2;";
    panel = document.createElement('span');
    panel.style.cssText = panelCss;
    panel.appendChild(this.fpsSpan);
    panel.appendChild(this.fpsSpan2);
    wrap.appendChild(panel);
    panel = document.createElement('span');
    panel.style.cssText = panelCss + "left: 50%;";
    panel.appendChild(this.tickSpan);
    panel.appendChild(this.tickSpan2);
    wrap.appendChild(panel);
    rulerCss = "			position: absolute;			left: 0;			width: 100%;			height: 1px;			background-color: rgba(128, 128, 128, 0.5);";
    ruler = document.createElement('span');
    ruler.style.cssText = rulerCss + ("bottom: " + (this.height * 0.66) + "px;");
    wrap.appendChild(ruler);
    ruler = document.createElement('span');
    ruler.style.cssText = rulerCss + ("bottom: " + (this.height * 0.33) + "px;");
    wrap.appendChild(ruler);
    wrap.appendChild(this.graphSpan);
    (this.container || document.body).appendChild(wrap);
    this.nullify();
    wrap.addEventListener('click', this);
    this.toggle();
    return this;
  };

  Console.prototype.handleEvent = function(evt) {
    this.toggle();
    return false;
  };

  Console.prototype.toggle = function() {
    var margin, opacity;
    margin = 0;
    opacity = 0.8;
    if ((this.minimized = !this.minimized)) {
      opacity = 0.5;
      margin = -this.height + 20;
    }
    this.graphSpan.style.marginTop = "" + margin + "px";
    this.graphSpan.style.opacity = opacity;
    return this;
  };

  Console.prototype.free = function() {
    (this.container || document.body).removeChild(this.wrap);
    wrap.removEventListener('click', this);
    this.wrap = null;
    this.container = null;
    return Console.__super__.free.call(this);
  };

  Console.prototype.onTimeEnd = function(samples) {
    var bar, color, colors, dt, fps, fpsMean, fpsSD, lag, mag, overall, tick, tickMean, tickSD;
    this.dtSum += (dt = samples.dt);
    if (!dt) {
      return;
    }
    this.fpsSum += (fps = 1 / dt);
    this.fpsSq += fps * fps;
    this.lagSum += (lag = samples.lag);
    this.lagSq += lag * lag;
    this.tickSum += (tick = samples.tick);
    this.tickSq += tick * tick;
    this.updateSum += samples.update;
    this.fixedUpdateSum += samples.fixedUpdate;
    this.renderSum += samples.render;
    this.frames++;
    if (this.dtSum < this.resolution) {
      return;
    }
    colors = this.colors;
    tickMean = this.tickSum / this.frames;
    tickSD = Math.sqrt((this.tickSq - (this.tickSum * this.tickSum / this.frames)) / (this.frames - 1));
    if (tickMean > 33) {
      color = colors[3];
    } else if (tickMean > 16) {
      color = colors[2];
    } else if (tickMean > 5) {
      color = colors[1];
    } else {
      color = colors[0];
    }
    this.tickSpan.textContent = tickMean < 10 ? Math.round(tickMean * 10) / 10 : Math.round(tickMean);
    this.tickSpan.style.color = color;
    this.tickSpan2.textContent = tickSD < 10 ? Math.round(tickSD * 10) / 10 : Math.round(tickSD);
    bar = this.graphSpan.appendChild(this.graphSpan.firstChild);
    overall = 0;
    mag = Math.round(this.height * this.lagSum / this.frames / this.cap);
    bar.children[0].style.height = "" + mag + "px";
    overall += mag;
    mag = this.height * this.renderSum / this.frames / this.cap;
    bar.children[1].style.height = "" + mag + "px";
    overall += mag;
    mag = Math.round(this.height * this.updateSum / this.frames / this.cap);
    bar.children[2].style.height = "" + mag + "px";
    overall += mag;
    mag = Math.round(this.height * this.fixedUpdateSum / this.frames / this.cap);
    bar.children[3].style.height = "" + mag + "px";
    overall += mag;
    bar.style.marginTop = "" + (this.height - overall) + "px";
    fpsMean = this.fpsSum / this.frames;
    fpsSD = Math.sqrt((this.fpsSq - (this.fpsSum * this.fpsSum / this.frames)) / (this.frames - 1));
    if (fpsMean < 30) {
      color = colors[3];
    } else if (fpsMean < 40) {
      color = colors[2];
    } else if (fpsMean < 55) {
      color = colors[1];
    } else {
      color = colors[0];
    }
    this.fpsSpan.textContent = Math.round(fpsMean || 0);
    this.fpsSpan.style.color = color;
    this.fpsSpan2.textContent = Math.round(fpsSD || 0);
    this.nullify();
    return this;
  };

  Console.prototype.nullify = function() {
    this.dtSum = 0;
    this.fpsSum = this.fpsSq = 0;
    this.tickSum = this.tickSq = 0;
    this.lagSum = this.lagSq = 0;
    this.fixedUpdateSum = 0;
    this.updateSum = 0;
    this.renderSum = 0;
    this.frames = 0;
    return this;
  };

  return Console;

})(Component);

new Pool(Console);

module.exports = Console;
