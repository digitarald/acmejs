// Generated by CoffeeScript 1.4.0
var Component, Pool, SpriteAsset, SpriteSheet, SpriteTween, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('./math').Vec2;

Component = require('./component');

Pool = require('./pool');

SpriteAsset = (function() {

  function SpriteAsset(srcOrRepaint, size, baseScale) {
    var img,
      _this = this;
    this.baseScale = baseScale != null ? baseScale : 1;
    this.size = Vec2(size);
    this.bufferSize = Vec2(size);
    this.defaultAlign = Vec2.center;
    this.defaultOffset = Vec2();
    this.defaultScale = Vec2(1, 1);
    this.buffer = document.createElement('canvas');
    this.bufferCtx = this.buffer.getContext('2d');
    this.scale = 1;
    switch (typeof srcOrRepaint) {
      case 'string':
        this.img = img = new Image();
        img.onload = function() {
          if (!img.onload) {
            return;
          }
          img.onload = null;
          Vec2.set(_this.size, img.width, img.height);
          return _this.refresh();
        };
        img.src = srcOrRepaint;
        if (img.onload && img.width && img.height) {
          img.onload();
        }
        break;
      case 'function':
        this.repaint = srcOrRepaint;
        this.refresh();
        break;
    }
  }

  SpriteAsset.prototype.draw = function(ctx, align, size, fromPos, scale) {
    if (align == null) {
      align = this.defaultAlign;
    }
    if (size == null) {
      size = this.bufferSize;
    }
    if (fromPos == null) {
      fromPos = this.defaultOffset;
    }
    if (scale == null) {
      scale = this.defaultScale;
    }
    if (this.ready) {
      ctx.drawImage(this.buffer, fromPos[0] | 0, fromPos[1] | 0, size[0], size[1], size[0] / 2 * (align[0] + 1) | 0, size[1] / 2 * (align[1] + 1) | 0, size[0] * scale[0], size[1] * scale[1]);
    }
    return this;
  };

  SpriteAsset.prototype.repaint = function() {
    var size;
    size = this.size;
    this.buffer.width = size[0];
    this.buffer.height = size[1];
    this.bufferCtx.drawImage(this.img, 0, 0, size[0], size[1]);
    this.sample();
    return this;
  };

  SpriteAsset.prototype.sample = function() {
    var bufferCtx, data, i, scale, size, x, y, _i, _j, _ref, _ref1;
    scale = this.scale, size = this.size, bufferCtx = this.bufferCtx;
    data = bufferCtx.getImageData(0, 0, size[0], size[1]).data;
    this.buffer.width = this.bufferSize[0];
    this.buffer.height = this.bufferSize[1];
    for (x = _i = 0, _ref = size[0]; _i <= _ref; x = _i += 1) {
      for (y = _j = 0, _ref1 = size[1]; _j <= _ref1; y = _j += 1) {
        i = (y * size[0] + x) * 4;
        bufferCtx.fillStyle = "rgba(" + data[i] + ", " + data[i + 1] + ", " + data[i + 2] + ", " + (data[i + 3] / 255) + ")";
        bufferCtx.fillRect(x * scale, y * scale, scale, scale);
      }
    }
    return this;
  };

  SpriteAsset.prototype.refresh = function(scale) {
    scale = (scale || 1) * this.baseScale;
    if (!this.ready || this.scale !== scale) {
      this.scale = scale;
      this.buffer.width = this.bufferSize[0] = this.size[0] * scale | 0;
      this.buffer.height = this.bufferSize[1] = this.size[1] * scale | 0;
      Vec2.scal(this.bufferSize, -0.5, this.defaultOffset);
      this.repaint(this.bufferCtx, scale);
      this.ready = true;
    }
    return this;
  };

  return SpriteAsset;

})();

SpriteSheet = (function() {

  function SpriteSheet(presets) {
    var frame, id, sequences, sprites, _base, _base1, _base2, _i, _len, _ref, _ref1, _ref2, _ref3;
    sprites = presets.sprites || [];
    this.sprites = Array.isArray(sprites) ? sprites : [sprites];
    this.frames = [];
    if (Array.isArray(presets.frames)) {
      _ref = presets.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        this.frames.push(frame);
      }
    }
    this.defaults = {};
    if ((_ref1 = (_base = this.defaults).speed) == null) {
      _base.speed = presets.speed || 0.2;
    }
    if ((_ref2 = (_base1 = this.defaults).size) == null) {
      _base1.size = presets.size || Vec2(1, 1);
    }
    if ((_ref3 = (_base2 = this.defaults).align) == null) {
      _base2.align = presets.align || Vec2.center;
    }
    this.sequences = {};
    sequences = presets.sequences || {};
    for (id in sequences) {
      this.addSequence(id, sequences[id]);
    }
  }

  SpriteSheet.prototype.addSequence = function(id, sequence) {
    var frame, frames, _i, _ref, _ref1;
    if (Array.isArray(sequence)) {
      frames = [];
      for (frame = _i = _ref = sequence[0], _ref1 = sequence[1]; _i <= _ref1; frame = _i += 1) {
        frames.push(frame);
      }
      sequence = {
        frames: frames,
        next: sequence[2] || null,
        speed: sequence[3] || this.defaults.speed,
        name: id,
        sprite: sequence[4] || 0
      };
    }
    if (sequence.next === true) {
      sequence.next = id;
    }
    if (!sequence.speed) {
      sequence.speed = this.defaults.speed;
    }
    this.sequences[id] = sequence;
    if (!this.defaultSequence) {
      this.defaultSequence = id;
    }
    return this;
  };

  SpriteSheet.prototype.prepare = function() {
    var align, cols, rows, size, sprite, sprites, x, y, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
    sprites = this.sprites;
    for (_i = 0, _len = sprites.length; _i < _len; _i++) {
      sprite = sprites[_i];
      if (!sprite.ready) {
        return false;
      }
    }
    if (!this.frames.length) {
      _ref = this.defaults, size = _ref.size, align = _ref.align;
      for (_j = 0, _len1 = sprites.length; _j < _len1; _j++) {
        sprite = sprites[_j];
        cols = sprite.size[0] / size[0] | 0;
        rows = sprite.size[1] / size[1] | 0;
        for (y = _k = 0, _ref1 = rows - 1; _k <= _ref1; y = _k += 1) {
          for (x = _l = 0, _ref2 = cols - 1; _l <= _ref2; x = _l += 1) {
            this.frames.push({
              sprite: sprite,
              pos: Vec2(x * size[0], y * size[1]),
              size: size,
              align: align || Vec2.center
            });
          }
        }
      }
    }
    this.ready = true;
    return this;
  };

  SpriteSheet.prototype.draw = function(ctx, frame) {
    if (!this.ready && !this.prepare()) {
      return this;
    }
    frame = this.frames[frame || 0];
    frame.sprite.draw(ctx, frame.align, frame.size, frame.pos);
    return this;
  };

  return SpriteSheet;

})();

SpriteTween = (function(_super) {

  __extends(SpriteTween, _super);

  function SpriteTween() {
    return SpriteTween.__super__.constructor.apply(this, arguments);
  }

  SpriteTween.prototype.type = 'spriteTween';

  SpriteTween.prototype.presets = {
    asset: null,
    speed: null,
    sequence: null,
    offset: 0,
    composite: null
  };

  SpriteTween.prototype.reset = function(presets) {
    var _ref;
    this.asset = presets.asset, this.composite = presets.composite;
    this.isSheet = this.asset instanceof SpriteSheet;
    if (this.isSheet) {
      this.frame = 0;
      this.sequence = presets.sequence, this.speed = presets.speed;
      if ((_ref = this.speed) == null) {
        this.speed = this.asset.defaults.speed;
      }
      this.dtime = presets.offset;
      if (!this.sequence) {
        this.sequence = this.asset.defaultSequence;
      }
    }
    return this;
  };

  SpriteTween.prototype.render = function(ctx, dt) {
    var dtime;
    ctx.save();
    this.parent.transform.transform(ctx);
    if (this.composite) {
      ctx.globalCompositeOperation = this.composite;
    }
    if (this.isSheet) {
      if (!this.paused) {
        dtime = (this.dtime += dt);
        this.normalize();
      }
      this.asset.draw(ctx, this.frame);
    } else {
      this.asset.draw(ctx);
    }
    ctx.restore();
    return this;
  };

  SpriteTween.prototype.normalize = function() {
    var dtime, frame, frameCount, frames, sequence, speed;
    dtime = this.dtime;
    if (this.sequence) {
      sequence = this.asset.sequences[this.sequence];
      speed = sequence.speed;
      frames = sequence.frames;
      frameCount = frames.length;
      if (dtime >= frameCount * speed) {
        this.parent.pub('onSequenceEnd');
        if (sequence.next) {
          if (sequence.next !== this.sequence) {
            return this.goto(sequence.next);
          }
        } else {
          this.pause();
          return this;
        }
        dtime = dtime % (frameCount * speed);
      }
      this.frame = frames[dtime / speed | 0];
    } else {
      frames = this.asset.frames;
      frameCount = frames.length;
      speed = this.speed;
      dtime = dtime % (frameCount * speed);
      frame = dtime / speed | 0;
      if (frame < this.frame) {
        this.parent.pub('onSequenceEnd');
      }
      this.frame = dtime / speed | 0;
    }
    return this;
  };

  SpriteTween.prototype.pause = function() {
    return this.paused = true;
  };

  SpriteTween.prototype.play = function() {
    return this.paused = false;
  };

  SpriteTween.prototype.goto = function(id) {
    var sequence;
    if (isNaN(id)) {
      this.dtime = 0;
      if (sequence = this.asset.sequences[this.sequence]) {
        this.sequence = id;
      }
    } else {
      this.sequence = null;
      this.frameIndex = id;
    }
    return this.normalize();
  };

  return SpriteTween;

})(Component);

new Pool(SpriteTween);

module.exports.Asset = SpriteAsset;

module.exports.Tween = SpriteTween;

module.exports.Sheet = SpriteSheet;
