// Generated by CoffeeScript 1.4.0
var Color, Component, Composite, Engine, Kinetic, Particle, Pool, Sprite, Transform, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Composite = require('./composite');

Component = require('./component');

Pool = require('./pool');

Engine = require('./engine');

Vec2 = require('./math').Vec2;

Color = require('./color');

Transform = require('./transform');

Kinetic = require('./kinetic');

Sprite = require('./sprite').Asset;

Particle = (function(_super) {

  __extends(Particle, _super);

  Particle.prototype.type = 'particle';

  Particle.prototype.presets = {
    color: Color.white,
    lifetime: 1,
    radius: 1,
    sprite: Particle.sprite,
    shrink: Math.quintIn,
    fade: Math.quintIn
  };

  function Particle() {
    this.color = Color();
  }

  Particle.prototype.reset = function(presets) {
    this.lifetime = presets.lifetime, this.radius = presets.radius, this.sprite = presets.sprite, this.shrink = presets.shrink, this.fade = presets.fade;
    Color.copy(this.color, presets.color);
    this.age = 0;
    return this;
  };

  Particle.prototype.update = function(dt) {
    if ((this.age += dt) > this.lifetime) {
      this.parent.free();
    }
    if (this.shrink) {
      if (!(this.radius *= 1 - this.shrink(this.age / this.lifetime)) | 0) {
        this.parent.free();
      }
    }
    return this;
  };

  return Particle;

})(Component);

Particle.defaultComposite = 'lighter';

Particle.render = function(ctx) {
  var alpha, crop, cropOffset, particle, pos, radius, _i, _len, _ref;
  ctx.save();
  crop = Vec2.set(Vec2.cache[0], 50, 50);
  cropOffset = Vec2.set(Vec2.cache[1], -25, -25);
  _ref = this.roster;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    particle = _ref[_i];
    if (!particle.enabled) {
      continue;
    }
    pos = particle.transform.pos;
    radius = particle.radius;
    alpha = 1;
    if (particle.fade) {
      alpha -= particle.fade(particle.age / particle.lifetime);
    }
    particle.color[3] = alpha;
    ctx.fillStyle = Color.rgba(particle.color);
    ctx.fillRect(pos[0] - radius / 2 | 0, pos[1] - radius / 2 | 0, radius | 0, radius | 0);
  }
  ctx.restore();
  return this;
};

Particle.generateSprite = function(color, alpha, max) {
  var size;
  if (color == null) {
    color = Color.white;
  }
  if (alpha == null) {
    alpha = 1;
  }
  if (max == null) {
    max = 25;
  }
  color = Color(color);
  size = max * 2;
  return new Sprite(function(ctx) {
    var grad, radius, top, _i, _results;
    _results = [];
    for (radius = _i = 1; _i <= max; radius = _i += 1) {
      top = max + size * (radius - 1);
      grad = ctx.createRadialGradient(max, top, 0, max, top, radius);
      color[3] = alpha;
      grad.addColorStop(0, Color.rgba(color));
      color[3] = 0;
      grad.addColorStop(1, Color.rgba(color));
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(max, top, radius, 0, Math.TAU, true);
      ctx.closePath();
      _results.push(ctx.fill());
    }
    return _results;
  }, Vec2(size, size * max));
};

Particle.sprite = Particle.generateSprite();

Particle.Prefab = new Composite.Prefab({
  transform: null,
  kinetic: {
    mass: 0
  },
  particle: null
});

new Pool(Particle);

module.exports = Particle;
