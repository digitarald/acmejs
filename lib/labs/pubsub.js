// Generated by CoffeeScript 1.3.3
var Pubsub,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Pubsub = (function() {

  function Pubsub() {
    this.topics = [];
    this.scopes = [];
    this.methods = [];
  }

  Pubsub.prototype.empty = function() {};

  Pubsub.prototype.alloc = function(parent) {
    parent.pubsub = this;
    this.parent = parent;
    this.length = 0;
    return this;
  };

  Pubsub.prototype.free = function() {
    this.allocd = false;
    this.parent = this.parent.pubsub = null;
    this.topics.length = this.methods.length = this.scopes.length = 0;
    return this;
  };

  Pubsub.prototype.sub = function(scope, topic, method) {
    this.scopes.push(scope);
    this.topics.push(topic);
    this.methods.push(method);
    return this;
  };

  Pubsub.prototype.pub = function(topic, a0, a1, a2, a3, a4, a5, a6, a7) {
    var empty, i, scope, topics, _i, _len, _ref;
    topics = this.topics;
    empty = this.empty;
    _ref = this.scopes;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      scope = _ref[i];
      if (scope && (!topics[i] || topics[i] === topic)) {
        if (scope[this.methods[i] || topic](a0, a1, a2, a3, a4, a5, a6, a7) === false) {
          return false;
        }
      }
    }
    return true;
  };

  Pubsub.prototype.unsub = function(unscope, topic, method) {
    var i, methods, scope, scopes, topics, _i, _len;
    scopes = this.scopes;
    topics = this.topics;
    methods = this.methods;
    for (i = _i = 0, _len = scopes.length; _i < _len; i = ++_i) {
      scope = scopes[i];
      if (scope && (!unscope || scope === unscope) && (!topic || topics[i] === topic) && (!method || methods[i] === method)) {
        topics[i] = scopes[i] = methods[i] = null;
      }
    }
    return this;
  };

  return Pubsub;

})();

Pool.Pubsubs = (function(_super) {

  __extends(Pubsubs, _super);

  function Pubsubs() {
    return Pubsubs.__super__.constructor.apply(this, arguments);
  }

  Pubsubs.prototype.instantiate = function() {
    return new Pubsub();
  };

  return Pubsubs;

})(Pool);

Pubsub.pool = new Pool.Pubsubs(128);
