// Generated by CoffeeScript 1.5.0
var Firework,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Firework = (function(_super) {

  __extends(Firework, _super);

  Firework.prototype.type = 'firework';

  function Firework() {
    this.center = Vec2();
    this.size = Vec2();
    this.spread = Vec2();
    this.amount = Vec2();
    this.acc = Vec2();
    Firework.__super__.constructor.call(this);
  }

  Firework.prototype.alloc = function(parent, center, size, spread, amount, acc, chance, lifetime) {
    this.chance = chance != null ? chance : 0.1;
    this.lifetime = lifetime != null ? lifetime : 0;
    Vec2.copy(this.center, center);
    Vec2.copy(this.size, size);
    Vec2.copy(this.spread, spread);
    Vec2.copy(this.amount, amount);
    Vec2.copy(this.acc, acc);
    return Firework.__super__.alloc.call(this, parent);
  };

  Firework.prototype.simulate = function(dt, scene) {
    var age, dir, i, input, origin, particle, pos, _i, _ref, _results;
    age = (this.age += dt);
    if (this.lifetime && age > this.lifetime) {
      this.free();
      return;
    }
    input = Engine.input;
    if (!input.touchState || !Math.chance(this.chance)) {
      return;
    }
    pos = Vec2.cache[1];
    dir = Vec2.cache[2];
    origin = Vec2.add(Engine.renderer.pos, input.to, Vec2.cache[0]);
    _results = [];
    for (i = _i = 0, _ref = Math.rand(this.amount[0], this.amount[1]); _i <= _ref; i = _i += 1) {
      Vec2.add(Vec2.set(pos, Math.rand(-this.spread[0] / 2, this.spread[0] / 2), Math.rand(-this.spread[1] / 2, this.spread[1] / 2)), origin);
      Vec2.set(dir, Math.rand(-this.acc[0], this.acc[0]), Math.rand(-this.acc[1], this.acc[1]));
      particle = Particle.pool.alloc(scene, pos, dir, Math.rand(5000, 10000), Math.rand(1, 4), 1);
      Boid.alloc(particle);
      _results.push(Border.alloc(particle));
    }
    return _results;
  };

  return Firework;

})(Component);

new Pool(Firework);
