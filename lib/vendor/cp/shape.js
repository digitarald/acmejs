// Generated by CoffeeScript 1.6.1
var Component, Pool, Shape, V, Vec2, cp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Component = require('./../../core/component');

Pool = require('./../../core/pool');

Vec2 = require('./../../core/math').Vec2;

cp = require('./cp');

V = cp.v;

Shape = (function(_super) {

  __extends(Shape, _super);

  function Shape() {
    return Shape.__super__.constructor.apply(this, arguments);
  }

  Shape.prototype.tag = 'cpShape';

  Shape.prototype.attributes = {
    fixed: false,
    velocity: Vec2(),
    allowSleep: true,
    angle: 0,
    angularVelocity: 0,
    awake: true,
    bullet: false,
    fixedRotation: false,
    density: 1,
    friction: 0.5,
    restitution: 0.5
  };

  Shape.prototype.instantiate = function(attributes) {
    var body, bounds, fixed, key, mass, shape, space, _i, _len, _ref;
    if (!(space = this.root.cpSpace)) {
      space = new cp.Space();
      this.root.cpSpace = space;
      Shape.cpSpace = space;
    }
    mass = 1;
    bounds = this.bounds;
    switch (bounds.shape) {
      case 'circle':
        body = new cp.Body(mass, cp.momentForCircle(mass, 0, bounds.radius, V(0, 0)));
        shape = space.addShape(new cp.CircleShape(body, bounds.radius, V(0, 0)));
        break;
      case 'poly':
        fixture.shape = new B2.PolygonShape(bounds.radius);
        fixture.shape.SetAsArray(bounds.points, bounds.points.length);
        break;
      case 'rect':
        fixture.shape = new B2.PolygonShape();
        fixture.shape.SetAsBox(bounds.size[0] / 2, bounds.size[1] / 2);
        break;
    }
    shape.setElasticity(attributes);
    shape.setFriction(0.7);
    Vec2.toObj(this.transform.pos, new cp.Vect);
    Vec2.toObj(attributes.velocity, new cp.Vect);
    this.fixed = fixed = attributes.fixed;
    definition.type = fixed ? B2.Shape.cp_staticShape : B2.Shape.cp_dynamicShape;
    this.cpshape = space.CreateShape(definition);
    _ref = Shape.fixturePresets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      fixture[key] = attributes[key];
    }
    this.cpshape.CreateFixture(fixture);
    return this;
  };

  Shape.prototype.onTransform = function() {
    this.cpshape.setPos(Vec2.toObj(this.transform.pos, this.cpshape.p));
    this.cpshape.setAngle(this.transform.angle);
    return this;
  };

  Shape.prototype.free = function() {
    Shape.cpSpace.removeShape(this.cpshape);
    this.cpshape = null;
    return Shape.__super__.free.call(this);
  };

  Shape.prototype.applyForce = function(impulse) {
    return this;
  };

  return Shape;

})(Component);

Shape.fixedUpdate = function(dt) {
  var cpshape, shape, _i, _len, _ref;
  Shape.cpSpace(dt);
  _ref = this.register;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    shape = _ref[_i];
    if (!(shape.enabled && !shape.fixed)) {
      continue;
    }
    cpshape = shape.cpshape;
    if (cpshape.IsAwake()) {
      Vec2.fromObj(cpshape.GetPosition(), shape.transform.pos);
      shape.transform.angle = cpshape.GetAngle();
    }
  }
  return this;
};

new Pool(Shape);

module.exports = Shape;
