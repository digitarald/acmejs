// Generated by CoffeeScript 1.3.3
var Component, Pool, SpriteAsset, SpriteTween, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('./math').Vec2;

Component = require('./component');

Pool = require('./pool');

SpriteAsset = (function() {

  function SpriteAsset(srcOrRepaint, size, baseScale) {
    var img,
      _this = this;
    this.baseScale = baseScale != null ? baseScale : 1;
    this.size = Vec2(size);
    this.bufferSize = Vec2(size);
    this.defaultOffset = Vec2();
    this.defaultMargin = Vec2();
    this.buffer = document.createElement('canvas');
    this.bufferCtx = this.buffer.getContext('2d');
    this.scale = 1;
    switch (typeof srcOrRepaint) {
      case 'string':
        this.img = img = new Image();
        img.onload = function() {
          if (!img.onload) {
            return;
          }
          img.onload = null;
          Vec2.set(_this.size, img.width, img.height);
          return _this.refresh();
        };
        img.src = srcOrRepaint;
        if (img.onload && img.complete) {
          img.onload();
        }
        break;
      case 'function':
        this.repaint = srcOrRepaint;
        this.refresh();
        break;
    }
  }

  SpriteAsset.prototype.draw = function(ctx, pos, crop, offset) {
    if (pos == null) {
      pos = this.defaultOffset;
    }
    if (crop == null) {
      crop = this.bufferSize;
    }
    if (offset == null) {
      offset = this.defaultMargin;
    }
    if (this.ready) {
      ctx.drawImage(this.buffer, offset[0] | 0, offset[1] | 0, crop[0], crop[1], pos[0] | 0, pos[1] | 0, crop[0], crop[1]);
    }
    return this;
  };

  SpriteAsset.prototype.repaint = function() {
    var size;
    size = this.size;
    this.buffer.width = size[0];
    this.buffer.height = size[1];
    this.bufferCtx.drawImage(this.img, 0, 0, size[0], size[1]);
    this.sample();
    return this;
  };

  SpriteAsset.prototype.sample = function() {
    var bufferCtx, data, i, scale, size, x, y, _i, _j, _ref, _ref1;
    console.log('sample');
    scale = this.scale, size = this.size, bufferCtx = this.bufferCtx;
    data = bufferCtx.getImageData(0, 0, size[0], size[1]).data;
    this.buffer.width = this.bufferSize[0];
    this.buffer.height = this.bufferSize[1];
    for (x = _i = 0, _ref = size[0]; _i <= _ref; x = _i += 1) {
      for (y = _j = 0, _ref1 = size[1]; _j <= _ref1; y = _j += 1) {
        i = (y * size[0] + x) * 4;
        bufferCtx.fillStyle = "rgba(" + data[i] + ", " + data[i + 1] + ", " + data[i + 2] + ", " + (data[i + 3] / 255) + ")";
        bufferCtx.fillRect(x * scale, y * scale, scale, scale);
      }
    }
    return this;
  };

  SpriteAsset.prototype.refresh = function(scale) {
    scale = (scale || 1) * this.baseScale;
    if (!this.ready || this.scale !== scale) {
      this.scale = scale;
      this.buffer.width = this.bufferSize[0] = this.size[0] * scale | 0;
      this.buffer.height = this.bufferSize[1] = this.size[1] * scale | 0;
      Vec2.scal(this.bufferSize, -0.5, this.defaultOffset);
      this.repaint(this.bufferCtx, scale);
      this.ready = true;
    }
    return this;
  };

  return SpriteAsset;

})();

SpriteTween = (function(_super) {

  __extends(SpriteTween, _super);

  function SpriteTween() {
    return SpriteTween.__super__.constructor.apply(this, arguments);
  }

  SpriteTween.prototype.type = 'spriteTween';

  SpriteTween.prototype.presets = {
    align: Vec2.center
  };

  SpriteTween.prototype.reset = function(presets) {
    this.align = presets.align, this.asset = presets.asset;
    return this;
  };

  SpriteTween.prototype.render = function(ctx) {
    if (!this.asset.ready) {
      return this;
    }
    ctx.save();
    this.parent.transform.transform(ctx);
    this.asset.draw(ctx);
    ctx.restore();
    return this;
  };

  return SpriteTween;

})(Component);

new Pool(SpriteTween);

module.exports.Asset = SpriteAsset;

module.exports.Tween = SpriteTween;
