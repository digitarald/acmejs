var acmejs =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n_babelHelpers.defaults(exports, _babelHelpers.interopRequireWildcard(__webpack_require__(1)));\n\n_babelHelpers.defaults(exports, _babelHelpers.interopRequireWildcard(__webpack_require__(2)));\n\n_babelHelpers.defaults(exports, _babelHelpers.interopRequireWildcard(__webpack_require__(3)));\n\n_babelHelpers.defaults(exports, _babelHelpers.interopRequireWildcard(__webpack_require__(26)));\n\n// export * from './vendor/box2d-js'\n\nvar Body = _babelHelpers.interopRequire(__webpack_require__(4));\n\nvar Boid = _babelHelpers.interopRequire(__webpack_require__(5));\n\nvar Border = _babelHelpers.interopRequire(__webpack_require__(6));\n\nvar Bounds = _babelHelpers.interopRequire(__webpack_require__(7));\n\nvar Collider = _babelHelpers.interopRequire(__webpack_require__(8));\n\nvar Color = _babelHelpers.interopRequire(__webpack_require__(9));\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Console = _babelHelpers.interopRequire(__webpack_require__(11));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar Entity = _babelHelpers.interopRequire(__webpack_require__(13));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar Input = _babelHelpers.interopRequire(__webpack_require__(15));\n\nvar Jitter = _babelHelpers.interopRequire(__webpack_require__(16));\n\nvar Mat2 = _babelHelpers.interopRequire(__webpack_require__(17));\n\nvar Particle = _babelHelpers.interopRequire(__webpack_require__(18));\n\nvar Physics = _babelHelpers.interopRequire(__webpack_require__(19));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Renderer = _babelHelpers.interopRequire(__webpack_require__(21));\n\nvar Shims = _babelHelpers.interopRequire(__webpack_require__(22));\n\nvar Transform = _babelHelpers.interopRequire(__webpack_require__(23));\n\nvar Tweens = _babelHelpers.interopRequire(__webpack_require__(24));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nexports.Body = Body;\nexports.Boid = Boid;\nexports.Border = Border;\nexports.Bounds = Bounds;\nexports.Collider = Collider;\nexports.Color = Color;\nexports.Component = Component;\nexports.Console = Console;\nexports.Context = Context;\nexports.Entity = Entity;\nexports.Event = Event;\nexports.Input = Input;\nexports.Jitter = Jitter;\nexports.Mat2 = Mat2;\nexports.Particle = Particle;\nexports.Physics = Physics;\nexports.Registry = Registry;\nexports.Renderer = Renderer;\nexports.Shims = Shims;\nexports.Transform = Transform;\nexports.Tweens = Tweens;\nexports.Vec2 = Vec2;\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvaW5kZXguanM/YmRkOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3lGQUNjLENBQWM7O3lGQUNkLENBQWU7O3lGQUNmLENBQWU7O3lGQUNmLEVBQWU7Ozs7SUFFdEIsSUFBSSxvREFBTSxDQUFnQjs7SUFDMUIsSUFBSSxvREFBTSxDQUFnQjs7SUFDMUIsTUFBTSxvREFBTSxDQUFrQjs7SUFDOUIsTUFBTSxvREFBTSxDQUFlOztJQUMzQixRQUFRLG9EQUFNLENBQW9COztJQUNsQyxLQUFLLG9EQUFNLENBQWM7O0lBQ3pCLFNBQVMsb0RBQU0sRUFBa0I7O0lBQ2pDLE9BQU8sb0RBQU0sRUFBaUI7O0lBQzlCLE9BQU8sb0RBQU0sRUFBZ0I7O0lBQzdCLE1BQU0sb0RBQU0sRUFBZTs7SUFDM0IsS0FBSyxvREFBTSxFQUFjOztJQUN6QixLQUFLLG9EQUFNLEVBQWM7O0lBQ3pCLE1BQU0sb0RBQU0sRUFBa0I7O0lBQzlCLElBQUksb0RBQU0sRUFBYTs7SUFDdkIsUUFBUSxvREFBTSxFQUFvQjs7SUFDbEMsT0FBTyxvREFBTSxFQUFtQjs7SUFDaEMsUUFBUSxvREFBTSxFQUFpQjs7SUFDL0IsUUFBUSxvREFBTSxFQUFpQjs7SUFDL0IsS0FBSyxvREFBTSxFQUFjOztJQUN6QixTQUFTLG9EQUFNLEVBQWtCOztJQUNqQyxNQUFNLG9EQUFNLEVBQWU7O0lBQzNCLElBQUksb0RBQU0sRUFBYTs7UUFHN0IsSUFBSSxHQUFKLElBQUk7UUFDSixJQUFJLEdBQUosSUFBSTtRQUNKLE1BQU0sR0FBTixNQUFNO1FBQ04sTUFBTSxHQUFOLE1BQU07UUFDTixRQUFRLEdBQVIsUUFBUTtRQUNSLEtBQUssR0FBTCxLQUFLO1FBQ0wsU0FBUyxHQUFULFNBQVM7UUFDVCxPQUFPLEdBQVAsT0FBTztRQUNQLE9BQU8sR0FBUCxPQUFPO1FBQ1AsTUFBTSxHQUFOLE1BQU07UUFDTixLQUFLLEdBQUwsS0FBSztRQUNMLEtBQUssR0FBTCxLQUFLO1FBQ0wsTUFBTSxHQUFOLE1BQU07UUFDTixJQUFJLEdBQUosSUFBSTtRQUNKLFFBQVEsR0FBUixRQUFRO1FBQ1IsT0FBTyxHQUFQLE9BQU87UUFDUCxRQUFRLEdBQVIsUUFBUTtRQUNSLFFBQVEsR0FBUixRQUFRO1FBQ1IsS0FBSyxHQUFMLEtBQUs7UUFDTCxTQUFTLEdBQVQsU0FBUztRQUNULE1BQU0sR0FBTixNQUFNO1FBQ04sSUFBSSxHQUFKLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCAqIGZyb20gJy4vbWF0aC9tYXRoZidcbmV4cG9ydCAqIGZyb20gJy4vbWF0aC9yYW5kb20nXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvc3ByaXRlJ1xuZXhwb3J0ICogZnJvbSAnLi92ZW5kb3IvcGl4aSdcbi8vIGV4cG9ydCAqIGZyb20gJy4vdmVuZG9yL2JveDJkLWpzJ1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9waHlzaWNzL2JvZHknXG5pbXBvcnQgQm9pZCBmcm9tICcuL3BoeXNpY3MvYm9pZCdcbmltcG9ydCBCb3JkZXIgZnJvbSAnLi9waHlzaWNzL2JvcmRlcidcbmltcG9ydCBCb3VuZHMgZnJvbSAnLi9jb3JlL2JvdW5kcydcbmltcG9ydCBDb2xsaWRlciBmcm9tICcuL3BoeXNpY3MvY29sbGlkZXInXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi9tYXRoL2NvbG9yJ1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvcmUvY29tcG9uZW50J1xuaW1wb3J0IENvbnNvbGUgZnJvbSAnLi9kZWJ1Zy9jb25zb2xlJ1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi9jb3JlL2NvbnRleHQnXG5pbXBvcnQgRW50aXR5IGZyb20gJy4vY29yZS9lbnRpdHknXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9jb3JlL2V2ZW50J1xuaW1wb3J0IElucHV0IGZyb20gJy4vY29yZS9pbnB1dCdcbmltcG9ydCBKaXR0ZXIgZnJvbSAnLi9waHlzaWNzL2ppdHRlcidcbmltcG9ydCBNYXQyIGZyb20gJy4vbWF0aC9tYXQyJ1xuaW1wb3J0IFBhcnRpY2xlIGZyb20gJy4vcGh5c2ljcy9wYXJ0aWNsZSdcbmltcG9ydCBQaHlzaWNzIGZyb20gJy4vcGh5c2ljcy9waHlzaWNzJ1xuaW1wb3J0IFJlZ2lzdHJ5IGZyb20gJy4vY29yZS9yZWdpc3RyeSdcbmltcG9ydCBSZW5kZXJlciBmcm9tICcuL2NvcmUvcmVuZGVyZXInXG5pbXBvcnQgU2hpbXMgZnJvbSAnLi9jb3JlL3NoaW1zJ1xuaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuL2NvcmUvdHJhbnNmb3JtJ1xuaW1wb3J0IFR3ZWVucyBmcm9tICcuL21hdGgvdHdlZW5zJ1xuaW1wb3J0IFZlYzIgZnJvbSAnLi9tYXRoL3ZlYzInXG5cbmV4cG9ydCB7XG5cdEJvZHksXG5cdEJvaWQsXG5cdEJvcmRlcixcblx0Qm91bmRzLFxuXHRDb2xsaWRlcixcblx0Q29sb3IsXG5cdENvbXBvbmVudCxcblx0Q29uc29sZSxcblx0Q29udGV4dCxcblx0RW50aXR5LFxuXHRFdmVudCxcblx0SW5wdXQsXG5cdEppdHRlcixcblx0TWF0Mixcblx0UGFydGljbGUsXG5cdFBoeXNpY3MsXG5cdFJlZ2lzdHJ5LFxuXHRSZW5kZXJlcixcblx0U2hpbXMsXG5cdFRyYW5zZm9ybSxcblx0VHdlZW5zLFxuXHRWZWMyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9saWIvaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiIwLmpzIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/**\n * Generate UID\n * @function uid\n * @return {Number} Unique ID\n */\nexports.uid = uid;\nexports.clamp = clamp;\nexports.map = map;\n\n/**\n * Correct modulo behavior\n * @param {Number} a Dividend\n * @param {Number} b Divisor\n * @return {Number} a % b where the result is between 0 and b (either\n *   0 <= x < b or b < x <= 0, depending on the sign of b).\n */\nexports.mod = mod;\n\n/**\n * Loops the value t, so that it is never larger than length and never\n * smaller than 0.\n * @param {Number} t\n * @param {Number} length\n * @return {Number}\n */\nexports.repeat = repeat;\nexports.toDeg = toDeg;\nexports.toRad = toRad;\nexports.normDeg = normDeg;\nexports.normRad = normRad;\nexports.distRad = distRad;\nexports.distDeg = distDeg;\n\n/**\n * Performs linear interpolation between values a and b.\n * @param {Number} a\n * @param {Number} b\n * @param {Number} scalar The proportion between a and b.\n * @return {Number} The interpolated value between a and b.\n */\nexports.lerp = lerp;\nexports.distAng = distAng;\n\n/**\n * Gradually changes a value towards a desired goal over time.\n *\n * http://docs.unity3d.com/Documentation/ScriptReference/export SmoothDamp.html\n * http://answers.unity3d.com/questions/24756/formula-behind-smoothdamp.html\n */\nexports.smoothDamp = smoothDamp;\n/** @flow */\n\n/*\n * http://docs.unity3d.com/Documentation/ScriptReference/export html\n * https://github.com/secretrobotron/gladius.math/\n * https://github.com/toji/gl-matrix/tree/master/src/gl-matrix\n *\n * TODO: https://github.com/photonstorm/phaser/blob/master/Phaser/GameMath.ts\n */\nvar EPSILON = exports.EPSILON = 0.01;\nvar PI = Math.PI;\nvar TAU = exports.TAU = PI * 2;\nvar HALF_PI = exports.HALF_PI = PI / 2;\nvar RAD2DEG = exports.RAD2DEG = 180 / PI;\nvar DEG2RAD = exports.DEG2RAD = PI / 180;\n\nvar staticUid = 1;\nfunction uid() {\n\treturn staticUid++;\n}\n\n;\n\nfunction clamp(a, low, high) {\n\tif (a < low) {\n\t\treturn low;\n\t}\n\tif (a > high) {\n\t\treturn high;\n\t}\n\treturn a;\n}\n\n;\n\nfunction map(a, fromLow, fromHigh, toLow, toHigh) {\n\treturn toLow + (a - fromLow) / (fromHigh - fromLow) * (toHigh - toLow);\n}\n\n;\nfunction mod(a, b) {\n\ta %= b;\n\treturn a * b < 0 ? a + b : a;\n}\n\n;\nfunction repeat(t, length) {\n\treturn t - Math.floor(t / length) * length;\n}\n\n;\n\nfunction toDeg(rad) {\n\treturn rad * RAD2DEG;\n}\n\n;\n\nfunction toRad(deg) {\n\treturn deg * DEG2RAD;\n}\n\n;\n\nfunction normDeg(deg) {\n\tdeg %= 360;\n\treturn deg * 360 < 0 ? deg + 360 : deg;\n}\n\n;\n\nfunction normRad(rad) {\n\trad %= TAU;\n\treturn rad * TAU < 0 ? rad + TAU : rad;\n}\n\n;\n\nfunction distRad(a, b) {\n\tvar d = normRad(b) - normRad(a);\n\tif (d > PI) {\n\t\treturn d - TAU;\n\t}\n\tif (d <= -PI) {\n\t\treturn d + TAU;\n\t}\n\treturn d;\n}\n\n;\n\nfunction distDeg(a, b) {\n\tvar d = normDeg(b) - normDeg(a);\n\tif (d > 180) {\n\t\treturn d - 360;\n\t}\n\tif (d <= -180) {\n\t\treturn d + 360;\n\t}\n\treturn d;\n}\n\n;\nfunction lerp(a, b, scalar) {\n\treturn a + scalar * (b - a);\n}\n\n;\n\nfunction distAng(a, b) {\n\tif (a == b) {\n\t\treturn 0;\n\t}\n\tvar ab = a < b;\n\tvar l = ab ? -a - TAU + b : b - a;\n\tvar r = ab ? b - a : TAU - a + b;\n\treturn Math.abs(l) > Math.abs(r) ? r : l;\n}\n\n;\n\nvar dampState = {\n\tvalue: 0,\n\tvelocity: 0\n};\nfunction smoothDamp(a, b, velocity, time, maxVelocity, delta) {\n\ttime = Math.max(EPSILON, time);\n\tdelta = Math.max(0.02, delta);\n\tvar num = 2 / time;\n\tvar num2 = num * delta;\n\tvar num3 = 1 / (1 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2);\n\tvar num4 = a - b;\n\tvar num5 = b;\n\tvar num6 = (maxVelocity || Number.POSITIVE_INFINITY) * time;\n\tnum4 = clamp(num4, -num6, num6);\n\tb = a - num4;\n\tvar num7 = (velocity + num * num4) * delta;\n\tvelocity = (velocity - num * num7) * num3;\n\tvar value = b + (num4 + num7) * num3;\n\tif (num5 - a > 0 == value > num5) {\n\t\tvalue = num5;\n\t\tvelocity = (value - num5) / delta;\n\t}\n\tdampState.value = value;\n\tdampState.velocity = velocity;\n\treturn dampState;\n}\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvbWF0aC9tYXRoZi5qcz8wNjZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7UUF1QmdCLEdBQUcsR0FBSCxHQUFHO1FBSUgsS0FBSyxHQUFMLEtBQUs7UUFVTCxHQUFHLEdBQUgsR0FBRzs7Ozs7Ozs7O1FBV0gsR0FBRyxHQUFILEdBQUc7Ozs7Ozs7OztRQVlILE1BQU0sR0FBTixNQUFNO1FBSU4sS0FBSyxHQUFMLEtBQUs7UUFJTCxLQUFLLEdBQUwsS0FBSztRQUlMLE9BQU8sR0FBUCxPQUFPO1FBS1AsT0FBTyxHQUFQLE9BQU87UUFLUCxPQUFPLEdBQVAsT0FBTztRQVdQLE9BQU8sR0FBUCxPQUFPOzs7Ozs7Ozs7UUFrQlAsSUFBSSxHQUFKLElBQUk7UUFJSixPQUFPLEdBQVAsT0FBTzs7Ozs7Ozs7UUFxQlAsVUFBVSxHQUFWLFVBQVU7Ozs7Ozs7Ozs7QUEvSG5CLElBQU0sT0FBTyxXQUFQLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNaLElBQU0sR0FBRyxXQUFILEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLElBQU0sT0FBTyxXQUFQLE9BQU8sR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLElBQU0sT0FBTyxXQUFQLE9BQU8sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLElBQU0sT0FBTyxXQUFQLE9BQU8sR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDOztBQUVoQyxJQUFJLFNBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBT2xCLFNBQVMsR0FBRyxHQUFVO0FBQzVCLFFBQU8sU0FBUyxFQUFFLENBQUM7Q0FDbkI7O0FBQUEsQ0FBQzs7QUFFSyxTQUFTLEtBQUssQ0FBQyxDQUFRLEVBQUUsR0FBVSxFQUFFLElBQVcsRUFBUztBQUMvRCxLQUFJLENBQUMsR0FBRyxHQUFHLEVBQUU7QUFDWixTQUFPLEdBQUcsQ0FBQztFQUNYO0FBQ0QsS0FBSSxDQUFDLEdBQUcsSUFBSSxFQUFFO0FBQ2IsU0FBTyxJQUFJLENBQUM7RUFDWjtBQUNELFFBQU8sQ0FBQyxDQUFDO0NBQ1Q7O0FBQUEsQ0FBQzs7QUFFSyxTQUFTLEdBQUcsQ0FBQyxDQUFRLEVBQUUsT0FBYyxFQUFFLFFBQWUsRUFBRSxLQUFZLEVBQUUsTUFBYSxFQUFTO0FBQ2xHLFFBQU8sS0FBSyxHQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sS0FBSyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUssTUFBTSxHQUFHLEtBQUssQ0FBRSxDQUFDO0NBQzNFOztBQUFBLENBQUM7QUFTSyxTQUFTLEdBQUcsQ0FBQyxDQUFRLEVBQUUsQ0FBUSxFQUFTO0FBQzlDLEVBQUMsSUFBSSxDQUFDLENBQUM7QUFDUCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQy9COztBQUFBLENBQUM7QUFTSyxTQUFTLE1BQU0sQ0FBQyxDQUFRLEVBQUUsTUFBYSxFQUFTO0FBQ3RELFFBQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztDQUMzQzs7QUFBQSxDQUFDOztBQUVLLFNBQVMsS0FBSyxDQUFDLEdBQVUsRUFBUztBQUN4QyxRQUFPLEdBQUcsR0FBRyxPQUFPLENBQUM7Q0FDckI7O0FBQUEsQ0FBQzs7QUFFSyxTQUFTLEtBQUssQ0FBQyxHQUFVLEVBQVM7QUFDeEMsUUFBTyxHQUFHLEdBQUcsT0FBTyxDQUFDO0NBQ3JCOztBQUFBLENBQUM7O0FBRUssU0FBUyxPQUFPLENBQUMsR0FBVSxFQUFTO0FBQzFDLElBQUcsSUFBSSxHQUFHLENBQUM7QUFDWCxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3pDOztBQUFBLENBQUM7O0FBRUssU0FBUyxPQUFPLENBQUMsR0FBVSxFQUFTO0FBQzFDLElBQUcsSUFBSSxHQUFHLENBQUM7QUFDWCxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3pDOztBQUFBLENBQUM7O0FBRUssU0FBUyxPQUFPLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBUztBQUNsRCxLQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLEtBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUNYLFNBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUNmO0FBQ0QsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDYixTQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDZjtBQUNELFFBQU8sQ0FBQyxDQUFDO0NBQ1Q7O0FBQUEsQ0FBQzs7QUFFSyxTQUFTLE9BQU8sQ0FBQyxDQUFRLEVBQUUsQ0FBUSxFQUFTO0FBQ2xELEtBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsS0FBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO0FBQ1osU0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ2Y7QUFDRCxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNkLFNBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUNmO0FBQ0QsUUFBTyxDQUFDLENBQUM7Q0FDVDs7QUFBQSxDQUFDO0FBU0ssU0FBUyxJQUFJLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxNQUFhLEVBQVM7QUFDOUQsUUFBTyxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUM1Qjs7QUFBQSxDQUFDOztBQUVLLFNBQVMsT0FBTyxDQUFDLENBQVEsRUFBRSxDQUFRLEVBQVM7QUFDbEQsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ1gsU0FBTyxDQUFDLENBQUM7RUFDVDtBQUNELEtBQUksRUFBRSxHQUFJLENBQUMsR0FBRyxDQUFFLENBQUM7QUFDakIsS0FBSSxDQUFDLEdBQUcsRUFBRSxHQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUssQ0FBQyxHQUFHLENBQUUsQ0FBQztBQUN0QyxLQUFJLENBQUMsR0FBRyxFQUFFLEdBQUksQ0FBQyxHQUFHLENBQUMsR0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FBQztBQUNyQyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNDOztBQUFBLENBQUM7O0FBRUYsSUFBSSxTQUFTLEdBQUc7QUFDZixNQUFLLEVBQUUsQ0FBQztBQUNSLFNBQVEsRUFBRSxDQUFDO0NBQ1gsQ0FBQztBQVFLLFNBQVMsVUFBVSxDQUFDLENBQVEsRUFBRSxDQUFRLEVBQUUsUUFBZSxFQUFFLElBQVcsRUFBRSxXQUFrQixFQUFFLEtBQVksRUFBb0M7QUFDaEosS0FBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQy9CLE1BQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QixLQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ25CLEtBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDdkIsS0FBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDNUUsS0FBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixLQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFDYixLQUFJLElBQUksR0FBRyxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDO0FBQzVELEtBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLEVBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2IsS0FBSSxJQUFJLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxLQUFLLENBQUM7QUFDM0MsU0FBUSxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQzFDLEtBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQ3JDLEtBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksRUFBRTtBQUNqQyxPQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2IsVUFBUSxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLENBQUM7RUFDbEM7QUFDRCxVQUFTLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN4QixVQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixRQUFPLFNBQVMsQ0FBQztDQUNqQjs7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBmbG93ICovXG5cbi8qXG4gKiBodHRwOi8vZG9jcy51bml0eTNkLmNvbS9Eb2N1bWVudGF0aW9uL1NjcmlwdFJlZmVyZW5jZS9leHBvcnQgaHRtbFxuICogaHR0cHM6Ly9naXRodWIuY29tL3NlY3JldHJvYm90cm9uL2dsYWRpdXMubWF0aC9cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90b2ppL2dsLW1hdHJpeC90cmVlL21hc3Rlci9zcmMvZ2wtbWF0cml4XG4gKlxuICogVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL3Bob3RvbnN0b3JtL3BoYXNlci9ibG9iL21hc3Rlci9QaGFzZXIvR2FtZU1hdGgudHNcbiAqL1xuZXhwb3J0IGNvbnN0IEVQU0lMT04gPSAwLjAxO1xuY29uc3QgUEkgPSBNYXRoLlBJO1xuZXhwb3J0IGNvbnN0IFRBVSA9IFBJICogMjtcbmV4cG9ydCBjb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuZXhwb3J0IGNvbnN0IFJBRDJERUcgPSAxODAgLyBQSTtcbmV4cG9ydCBjb25zdCBERUcyUkFEID0gUEkgLyAxODA7XG5cbmxldCBzdGF0aWNVaWQ6bnVtYmVyID0gMTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBVSURcbiAqIEBmdW5jdGlvbiB1aWRcbiAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIElEXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1aWQoKTpudW1iZXIge1xuXHRyZXR1cm4gc3RhdGljVWlkKys7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAoYTpudW1iZXIsIGxvdzpudW1iZXIsIGhpZ2g6bnVtYmVyKTpudW1iZXIge1xuXHRpZiAoYSA8IGxvdykge1xuXHRcdHJldHVybiBsb3c7XG5cdH1cblx0aWYgKGEgPiBoaWdoKSB7XG5cdFx0cmV0dXJuIGhpZ2g7XG5cdH1cblx0cmV0dXJuIGE7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwKGE6bnVtYmVyLCBmcm9tTG93Om51bWJlciwgZnJvbUhpZ2g6bnVtYmVyLCB0b0xvdzpudW1iZXIsIHRvSGlnaDpudW1iZXIpOm51bWJlciB7XG5cdHJldHVybiB0b0xvdyArICgoKGEgLSBmcm9tTG93KSAvIChmcm9tSGlnaCAtIGZyb21Mb3cpKSAqICh0b0hpZ2ggLSB0b0xvdykpO1xufTtcblxuLyoqXG4gKiBDb3JyZWN0IG1vZHVsbyBiZWhhdmlvclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgRGl2aWRlbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIERpdmlzb3JcbiAqIEByZXR1cm4ge051bWJlcn0gYSAlIGIgd2hlcmUgdGhlIHJlc3VsdCBpcyBiZXR3ZWVuIDAgYW5kIGIgKGVpdGhlclxuICogICAwIDw9IHggPCBiIG9yIGIgPCB4IDw9IDAsIGRlcGVuZGluZyBvbiB0aGUgc2lnbiBvZiBiKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vZChhOm51bWJlciwgYjpudW1iZXIpOm51bWJlciB7XG5cdGEgJT0gYjtcblx0cmV0dXJuIChhICogYiA8IDApID8gYSArIGIgOiBhO1xufTtcblxuLyoqXG4gKiBMb29wcyB0aGUgdmFsdWUgdCwgc28gdGhhdCBpdCBpcyBuZXZlciBsYXJnZXIgdGhhbiBsZW5ndGggYW5kIG5ldmVyXG4gKiBzbWFsbGVyIHRoYW4gMC5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0XG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXQodDpudW1iZXIsIGxlbmd0aDpudW1iZXIpOm51bWJlciB7XG5cdHJldHVybiB0IC0gTWF0aC5mbG9vcih0IC8gbGVuZ3RoKSAqIGxlbmd0aDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0RlZyhyYWQ6bnVtYmVyKTpudW1iZXIge1xuXHRyZXR1cm4gcmFkICogUkFEMkRFRztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JhZChkZWc6bnVtYmVyKTpudW1iZXIge1xuXHRyZXR1cm4gZGVnICogREVHMlJBRDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtRGVnKGRlZzpudW1iZXIpOm51bWJlciB7XG5cdGRlZyAlPSAzNjA7XG5cdHJldHVybiAoZGVnICogMzYwIDwgMCkgPyBkZWcgKyAzNjAgOiBkZWc7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybVJhZChyYWQ6bnVtYmVyKTpudW1iZXIge1xuXHRyYWQgJT0gVEFVO1xuXHRyZXR1cm4gKHJhZCAqIFRBVSA8IDApID8gcmFkICsgVEFVIDogcmFkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RSYWQoYTpudW1iZXIsIGI6bnVtYmVyKTpudW1iZXIge1xuXHRsZXQgZCA9IG5vcm1SYWQoYikgLSBub3JtUmFkKGEpO1xuXHRpZiAoZCA+IFBJKSB7XG5cdFx0cmV0dXJuIGQgLSBUQVU7XG5cdH1cblx0aWYgKGQgPD0gLVBJKSB7XG5cdFx0cmV0dXJuIGQgKyBUQVU7XG5cdH1cblx0cmV0dXJuIGQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdERlZyhhOm51bWJlciwgYjpudW1iZXIpOm51bWJlciB7XG5cdGxldCBkID0gbm9ybURlZyhiKSAtIG5vcm1EZWcoYSk7XG5cdGlmIChkID4gMTgwKSB7XG5cdFx0cmV0dXJuIGQgLSAzNjA7XG5cdH1cblx0aWYgKGQgPD0gLTE4MCkge1xuXHRcdHJldHVybiBkICsgMzYwO1xuXHR9XG5cdHJldHVybiBkO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHZhbHVlcyBhIGFuZCBiLlxuICogQHBhcmFtIHtOdW1iZXJ9IGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBiXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyIFRoZSBwcm9wb3J0aW9uIGJldHdlZW4gYSBhbmQgYi5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGludGVycG9sYXRlZCB2YWx1ZSBiZXR3ZWVuIGEgYW5kIGIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKGE6bnVtYmVyLCBiOm51bWJlciwgc2NhbGFyOm51bWJlcik6bnVtYmVyIHtcblx0cmV0dXJuIGEgKyBzY2FsYXIgKiAoYiAtIGEpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RBbmcoYTpudW1iZXIsIGI6bnVtYmVyKTpudW1iZXIge1xuXHRpZiAoYSA9PSBiKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0bGV0IGFiID0gKGEgPCBiKTtcblx0bGV0IGwgPSBhYiA/ICgtYSAtIFRBVSArIGIpIDogKGIgLSBhKTtcblx0bGV0IHIgPSBhYiA/IChiIC0gYSkgOiAoVEFVIC0gYSArIGIpO1xuXHRyZXR1cm4gKE1hdGguYWJzKGwpID4gTWF0aC5hYnMocikpID8gciA6IGw7XG59O1xuXG5sZXQgZGFtcFN0YXRlID0ge1xuXHR2YWx1ZTogMCxcblx0dmVsb2NpdHk6IDBcbn07XG5cbi8qKlxuICogR3JhZHVhbGx5IGNoYW5nZXMgYSB2YWx1ZSB0b3dhcmRzIGEgZGVzaXJlZCBnb2FsIG92ZXIgdGltZS5cbiAqXG4gKiBodHRwOi8vZG9jcy51bml0eTNkLmNvbS9Eb2N1bWVudGF0aW9uL1NjcmlwdFJlZmVyZW5jZS9leHBvcnQgU21vb3RoRGFtcC5odG1sXG4gKiBodHRwOi8vYW5zd2Vycy51bml0eTNkLmNvbS9xdWVzdGlvbnMvMjQ3NTYvZm9ybXVsYS1iZWhpbmQtc21vb3RoZGFtcC5odG1sXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhEYW1wKGE6bnVtYmVyLCBiOm51bWJlciwgdmVsb2NpdHk6bnVtYmVyLCB0aW1lOm51bWJlciwgbWF4VmVsb2NpdHk6bnVtYmVyLCBkZWx0YTpudW1iZXIpOnt2YWx1ZTogbnVtYmVyOyB2ZWxvY2l0eTogbnVtYmVyfSB7XG5cdHRpbWUgPSBNYXRoLm1heChFUFNJTE9OLCB0aW1lKTtcblx0ZGVsdGEgPSBNYXRoLm1heCgwLjAyLCBkZWx0YSk7XG5cdGxldCBudW0gPSAyIC8gdGltZTtcblx0bGV0IG51bTIgPSBudW0gKiBkZWx0YTtcblx0bGV0IG51bTMgPSAxIC8gKDEgKyBudW0yICsgMC40OCAqIG51bTIgKiBudW0yICsgMC4yMzUgKiBudW0yICogbnVtMiAqIG51bTIpO1xuXHRsZXQgbnVtNCA9IGEgLSBiO1xuXHRsZXQgbnVtNSA9IGI7XG5cdGxldCBudW02ID0gKG1heFZlbG9jaXR5IHx8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkgKiB0aW1lO1xuXHRudW00ID0gY2xhbXAobnVtNCwgLW51bTYsIG51bTYpO1xuXHRiID0gYSAtIG51bTQ7XG5cdGxldCBudW03ID0gKHZlbG9jaXR5ICsgbnVtICogbnVtNCkgKiBkZWx0YTtcblx0dmVsb2NpdHkgPSAodmVsb2NpdHkgLSBudW0gKiBudW03KSAqIG51bTM7XG5cdGxldCB2YWx1ZSA9IGIgKyAobnVtNCArIG51bTcpICogbnVtMztcblx0aWYgKG51bTUgLSBhID4gMCA9PSB2YWx1ZSA+IG51bTUpIHtcblx0XHR2YWx1ZSA9IG51bTU7XG5cdFx0dmVsb2NpdHkgPSAodmFsdWUgLSBudW01KSAvIGRlbHRhO1xuXHR9XG5cdGRhbXBTdGF0ZS52YWx1ZSA9IHZhbHVlO1xuXHRkYW1wU3RhdGUudmVsb2NpdHkgPSB2ZWxvY2l0eTtcblx0cmV0dXJuIGRhbXBTdGF0ZTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9tYXRoL21hdGhmLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIiLCJmaWxlIjoiMS5qcyJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/**\n * Seed based Math.random()\n * Inspired by http://processing.org/reference/random_.html\n * @param  {Number} low\n * @param  {Number} high\n * @return {Number} Number between 0 and 1\n */\nexports.random = random;\n\n/**\n * Set seed\n * @param  {Number} seed\n */\nexports.srand = srand;\nexports.values = values;\nexports.valuesKey = valuesKey;\nexports.chance = chance;\n/* @flow */\n\n// API ideas: http://docs.python.org/2/library/random.html\n// http://weblog.bocoup.com/random-numbers/\n// https://gist.github.com/Protonk/5367430\n\n// Linear Congruential Generator\n// Variant of a Lehman Generator\n\n// Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n// m is basically chosen to be large (as it is the max period)\n// and for its relationships to a and c\nvar m = 4294967296;\n// a - 1 should be divisible by m's prime factors\nvar a = 1664525;\n// c and m should be co-prime\nvar c = 1013904223;\nvar z = 0;\nfunction random(low, high) {\n\tif (high == null) {\n\t\tif (low == null) {\n\t\t\thigh = 1;\n\t\t} else {\n\t\t\thigh = low;\n\t\t}\n\t\tlow = 0;\n\t}\n\t// define the recurrence relationship\n\tz = (a * z + c) % m;\n\t// return a float in [0, 1)\n\t// if z = m then z / m = 0 therefore (z % m) / m < 1 always\n\treturn z / m * (high - low) + low;\n}\n\n;\n\nexports.random = random;\n\nfunction srand(seed) {\n\tz = seed | 0;\n}\n\nfunction values(values) {\n\treturn values[random(values.length) | 0];\n}\n\nfunction valuesKey(values) {\n\treturn random(values.length) | 0;\n}\n\nfunction chance(chance) {\n\treturn random(0, 1) <= chance;\n}\n\n/**\n// http://www.protonfish.com/random.shtml\nfunction rnd_snd() {\n\treturn (Math.random()*2-1)+(Math.random()*2-1)+(Math.random()*2-1);\n}\n\nfunction rnd(mean, stdev) {\n\treturn Math.round(rnd_snd()*stdev+mean);\n}\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvbWF0aC9yYW5kb20uanM/YjQxZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7UUEwQmdCLE1BQU0sR0FBTixNQUFNOzs7Ozs7UUFzQk4sS0FBSyxHQUFMLEtBQUs7UUFJTCxNQUFNLEdBQU4sTUFBTTtRQUlOLFNBQVMsR0FBVCxTQUFTO1FBSVQsTUFBTSxHQUFOLE1BQU07Ozs7Ozs7Ozs7Ozs7QUFoRHRCLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQzs7QUFFbkIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDOztBQUVoQixJQUFJLENBQUMsR0FBRyxVQUFVLENBQUM7QUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBU0gsU0FBUyxNQUFNLENBQUMsR0FBVSxFQUFFLElBQVcsRUFBUztBQUN0RCxLQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDakIsTUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO0FBQ2hCLE9BQUksR0FBRyxDQUFHLENBQUM7R0FDWCxNQUFNO0FBQ04sT0FBSSxHQUFHLEdBQUcsQ0FBQztHQUNYO0FBQ0QsS0FBRyxHQUFHLENBQUcsQ0FBQztFQUNWOztBQUVELEVBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7O0FBR3BCLFFBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQ2xDOztBQUFBLENBQUM7O1FBRWdCLE1BQU0sR0FBaEIsTUFBTTs7QUFNUCxTQUFTLEtBQUssQ0FBQyxJQUFXLEVBQU87QUFDdkMsRUFBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7Q0FDYjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxNQUFvQixFQUFTO0FBQ25ELFFBQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDekM7O0FBRU0sU0FBUyxTQUFTLENBQUMsTUFBb0IsRUFBUztBQUN0RCxRQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pDOztBQUVNLFNBQVMsTUFBTSxDQUFDLE1BQWEsRUFBVTtBQUM3QyxRQUFPLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0NBQzlCOzs7Ozs7Ozs7Ozs7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbi8vIEFQSSBpZGVhczogaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvcmFuZG9tLmh0bWxcbi8vIGh0dHA6Ly93ZWJsb2cuYm9jb3VwLmNvbS9yYW5kb20tbnVtYmVycy9cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1Byb3RvbmsvNTM2NzQzMFxuXG4vLyBMaW5lYXIgQ29uZ3J1ZW50aWFsIEdlbmVyYXRvclxuLy8gVmFyaWFudCBvZiBhIExlaG1hbiBHZW5lcmF0b3JcblxuLy8gU2V0IHRvIHZhbHVlcyBmcm9tIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTnVtZXJpY2FsX1JlY2lwZXNcbi8vIG0gaXMgYmFzaWNhbGx5IGNob3NlbiB0byBiZSBsYXJnZSAoYXMgaXQgaXMgdGhlIG1heCBwZXJpb2QpXG4vLyBhbmQgZm9yIGl0cyByZWxhdGlvbnNoaXBzIHRvIGEgYW5kIGNcbmxldCBtID0gNDI5NDk2NzI5Njtcbi8vIGEgLSAxIHNob3VsZCBiZSBkaXZpc2libGUgYnkgbSdzIHByaW1lIGZhY3RvcnNcbmxldCBhID0gMTY2NDUyNTtcbi8vIGMgYW5kIG0gc2hvdWxkIGJlIGNvLXByaW1lXG5sZXQgYyA9IDEwMTM5MDQyMjM7XG5sZXQgeiA9IDA7XG5cbi8qKlxuICogU2VlZCBiYXNlZCBNYXRoLnJhbmRvbSgpXG4gKiBJbnNwaXJlZCBieSBodHRwOi8vcHJvY2Vzc2luZy5vcmcvcmVmZXJlbmNlL3JhbmRvbV8uaHRtbFxuICogQHBhcmFtICB7TnVtYmVyfSBsb3dcbiAqIEBwYXJhbSAge051bWJlcn0gaGlnaFxuICogQHJldHVybiB7TnVtYmVyfSBOdW1iZXIgYmV0d2VlbiAwIGFuZCAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20obG93Om51bWJlciwgaGlnaDpudW1iZXIpOm51bWJlciB7XG5cdGlmIChoaWdoID09IG51bGwpIHtcblx0XHRpZiAobG93ID09IG51bGwpIHtcblx0XHRcdGhpZ2ggPSAxLjA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZ2ggPSBsb3c7XG5cdFx0fVxuXHRcdGxvdyA9IDAuMDtcblx0fVxuXHQvLyBkZWZpbmUgdGhlIHJlY3VycmVuY2UgcmVsYXRpb25zaGlwXG5cdHogPSAoYSAqIHogKyBjKSAlIG07XG5cdC8vIHJldHVybiBhIGZsb2F0IGluIFswLCAxKVxuXHQvLyBpZiB6ID0gbSB0aGVuIHogLyBtID0gMCB0aGVyZWZvcmUgKHogJSBtKSAvIG0gPCAxIGFsd2F5c1xuXHRyZXR1cm4geiAvIG0gKiAoaGlnaCAtIGxvdykgKyBsb3c7XG59O1xuXG5leHBvcnQge3JhbmRvbSBhcyByYW5kb219O1xuXG4vKipcbiAqIFNldCBzZWVkXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNlZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNyYW5kKHNlZWQ6bnVtYmVyKTp2b2lkIHtcblx0eiA9IHNlZWQgfCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzKHZhbHVlczpBcnJheTxudW1iZXI+KTpudW1iZXIge1xuXHRyZXR1cm4gdmFsdWVzW3JhbmRvbSh2YWx1ZXMubGVuZ3RoKSB8IDBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzS2V5KHZhbHVlczpBcnJheTxudW1iZXI+KTpudW1iZXIge1xuXHRyZXR1cm4gcmFuZG9tKHZhbHVlcy5sZW5ndGgpIHwgMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5jZShjaGFuY2U6bnVtYmVyKTpib29sZWFuIHtcblx0cmV0dXJuIHJhbmRvbSgwLCAxKSA8PSBjaGFuY2U7XG59XG5cbi8qKlxuLy8gaHR0cDovL3d3dy5wcm90b25maXNoLmNvbS9yYW5kb20uc2h0bWxcbmZ1bmN0aW9uIHJuZF9zbmQoKSB7XG5cdHJldHVybiAoTWF0aC5yYW5kb20oKSoyLTEpKyhNYXRoLnJhbmRvbSgpKjItMSkrKE1hdGgucmFuZG9tKCkqMi0xKTtcbn1cblxuZnVuY3Rpb24gcm5kKG1lYW4sIHN0ZGV2KSB7XG5cdHJldHVybiBNYXRoLnJvdW5kKHJuZF9zbmQoKSpzdGRldittZWFuKTtcbn1cbiovXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9tYXRoL3JhbmRvbS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIiwiZmlsZSI6IjIuanMifQ==");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n/**\n * @module core/sprite\n */\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\n/**\n * Loads and paints a single image file. Either loaded from source or drawn via callback, created from given width/height.\n * @class\n * @param {String|Function} srcOrRepaint URL or callback to draw image on demand\n * @param {Number[]} size (optional) Override size for drawing canvas\n * @param {Number} baseScale (optional) Base scale applied to all draws, defaults to 1\n */\n\nvar SpriteAsset = exports.SpriteAsset = (function () {\n\tfunction SpriteAsset(srcOrRepaint, size, baseScale) {\n\t\t_babelHelpers.classCallCheck(this, SpriteAsset);\n\n\t\tthis.baseScale = baseScale != null ? baseScale : 1;\n\t\tthis.size = Vec2(size);\n\t\tthis.bufferSize = Vec2(size);\n\t\tthis.defaultAnchor = Vec2.center;\n\t\tthis.defaultOffset = Vec2();\n\t\tthis.defaultScale = Vec2(1, 1);\n\t\tthis.buffer = document.createElement(\"canvas\");\n\t\tthis.bufferCtx = this.buffer.getContext(\"2d\");\n\t\tthis.scale = 1;\n\t\tthis.ready = false;\n\t\tthis.repaintSrc = null;\n\t\tthis.customRepaint = null;\n\t\tthis.src = \"\";\n\t\tthis.loading = false;\n\n\t\t// console.log(typeof srcOrRepaint);\n\n\t\tswitch (typeof srcOrRepaint) {\n\t\t\tcase \"string\":\n\t\t\t\tthis.src = srcOrRepaint;\n\t\t\t\tvar img = new Image();\n\t\t\t\tthis.img = img;\n\t\t\t\timg.addEventListener(\"load\", this);\n\t\t\t\tthis.loading = true;\n\t\t\t\timg.src = srcOrRepaint;\n\t\t\t\tContext.emit(Event.create(\"spriteAssetWillLoad\", this));\n\t\t\t\tif (this.loading && img.width && img.height) {\n\t\t\t\t\tthis.handleEvent();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"function\":\n\t\t\t\tthis.customRepaint = srcOrRepaint;\n\t\t\t\tthis.refresh();\n\t\t\t\tbreak;\n\t\t\tcase \"object\":\n\t\t\t\tthis.repaintSrc = srcOrRepaint;\n\t\t\t\tthis.refresh();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t_babelHelpers.createClass(SpriteAsset, {\n\t\ttoString: {\n\t\t\tvalue: function toString() {\n\t\t\t\tvar url = this.buffer ? this.buffer.toDataURL() : \"Pending\";\n\t\t\t\tvar size = Vec2.toString(this.size);\n\t\t\t\tvar bufferSize = Vec2.toString(this.bufferSize);\n\t\t\t\tvar src = this.src || this.repaint;\n\t\t\t\treturn \"SpriteAsset \" + size + \" \" + bufferSize + \"\\n\" + src + \"\\n\" + url;\n\t\t\t}\n\t\t},\n\t\trepaintOnComponent: {\n\t\t\tvalue: function repaintOnComponent() {\n\t\t\t\tthis.repaintSrc.onRepaint(this.bufferCtx, this);\n\t\t\t}\n\t\t},\n\t\thandleEvent: {\n\t\t\tvalue: function handleEvent() {\n\t\t\t\tthis.img.removeEventListener(\"load\", this);\n\t\t\t\tif (!this.loading) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.loading = false;\n\t\t\t\tVec2.set(this.size, this.img.width, this.img.height);\n\t\t\t\tContext.emit(Event.create(\"assetDidLoad\", this));\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t},\n\t\tdraw: {\n\n\t\t\t/**\n    * Draw whole or sprite of image to canvas. Draws only if image is loaded.\n    * @param {Object} ctx 2d-canvas context\n    * @param {Number[]} toPos (optional) Position to draw to.\n    * @param {Number[]} anchor (optional) anchor draw position, between\n    *   lower-left [-1, -1] and upper-right [1, 1]\n    * @param {Number[]} size (optional) Target size\n    * @param {Number[]} fromPos (optional) Source position (for sprites)\n    * @param {Number[]} scale (optional) Target scaling, applied to size\n    */\n\n\t\t\tvalue: function draw(ctx, toPos, anchor, size, fromPos, scale) {\n\t\t\t\tif (!this.ready) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (toPos == null) {\n\t\t\t\t\ttoPos = Vec2.zero;\n\t\t\t\t}\n\t\t\t\tif (anchor == null) {\n\t\t\t\t\tanchor = this.defaultAnchor;\n\t\t\t\t}\n\t\t\t\tif (size == null) {\n\t\t\t\t\tsize = this.bufferSize;\n\t\t\t\t}\n\t\t\t\tif (fromPos == null) {\n\t\t\t\t\tfromPos = this.defaultOffset;\n\t\t\t\t}\n\t\t\t\tif (scale == null) {\n\t\t\t\t\tscale = this.defaultScale;\n\t\t\t\t}\n\t\t\t\tctx.drawImage(this.buffer, fromPos[0] | 0, fromPos[1] | 0, size[0], size[1], toPos[0] - size[0] * anchor[0] + 0.5 | 0, toPos[1] - size[1] * anchor[1] + 0.5 | 0, size[0] * scale[0], size[1] * scale[1]);\n\t\t\t}\n\t\t},\n\t\trepaint: {\n\t\t\tvalue: function repaint() {\n\t\t\t\tvar size = this.size;\n\t\t\t\tthis.buffer.width = size[0];\n\t\t\t\tthis.buffer.height = size[1];\n\t\t\t\tthis.bufferCtx.drawImage(this.img, 0, 0, size[0], size[1]);\n\t\t\t\tthis.sample();\n\t\t\t}\n\t\t},\n\t\tsample: {\n\t\t\tvalue: function sample() {\n\t\t\t\tvar scale = this.scale;\n\t\t\t\tvar size = this.size;\n\t\t\t\tvar bufferCtx = this.bufferCtx;\n\t\t\t\tvar data = bufferCtx.getImageData(0, 0, size[0], size[1]).data;\n\t\t\t\tthis.buffer.width = this.bufferSize[0];\n\t\t\t\tthis.buffer.height = this.bufferSize[1];\n\t\t\t\tfor (var x = 0, w = size[0], h = size[1]; x <= w; x += 1) {\n\t\t\t\t\tfor (var y = 0; y <= h; y += 1) {\n\t\t\t\t\t\tvar i = (y * size[0] + x) * 4;\n\t\t\t\t\t\tbufferCtx.fillStyle = \"rgba(\" + data[i] + \", \" + data[i + 1] + \", \" + data[i + 2] + \", \" + data[i + 3] / 255 + \")\";\n\t\t\t\t\t\tbufferCtx.fillRect(x * scale, y * scale, scale, scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\trefresh: {\n\t\t\tvalue: function refresh(scale) {\n\t\t\t\t// console.log('Refresh');\n\t\t\t\tscale = (scale || 1) * this.baseScale;\n\t\t\t\tif (this.ready && this.scale == scale) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.scale = scale;\n\t\t\t\tthis.buffer.width = this.bufferSize[0] = this.size[0] * scale | 0;\n\t\t\t\tthis.buffer.height = this.bufferSize[1] = this.size[1] * scale | 0;\n\t\t\t\t// Vec2.scale(this.bufferSize, -0.5, this.defaultOffset);\n\t\t\t\tif (this.repaintSrc) {\n\t\t\t\t\tthis.repaintOnComponent();\n\t\t\t\t} else if (this.customRepaint) {\n\t\t\t\t\tthis.customRepaint(this.bufferCtx, this);\n\t\t\t\t} else {\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t\tthis.ready = true;\n\t\t\t\tContext.emit(Event.create(\"spriteAssetRefresh\", this));\n\t\t\t}\n\t\t}\n\t});\n\n\treturn SpriteAsset;\n})();\n\n;\n\n/**\n * Sprite-sheet for animations.\n * @class\n * @param {Object} attributes sprites, frames, speed, size, anchor, sequences\n */\n\nvar SpriteSheet = exports.SpriteSheet = (function () {\n\tfunction SpriteSheet(attributes) {\n\t\t_babelHelpers.classCallCheck(this, SpriteSheet);\n\n\t\tvar sprites = attributes.sprites || [];\n\t\tthis.sprites = Array.isArray(sprites) ? sprites : [sprites];\n\t\tthis.frames = [];\n\t\tif (Array.isArray(attributes.frames)) {\n\t\t\tvar _frames = attributes.frames;\n\t\t\tfor (var i = 0, l = _frames.length; i < l; i++) {\n\t\t\t\tthis.frames.push(_frames[i]);\n\t\t\t}\n\t\t}\n\t\tthis.defaults = {\n\t\t\tspeed: attributes.speed != null ? attributes.speed : 0,\n\t\t\tsize: attributes.size || Vec2(1, 1),\n\t\t\tanchor: attributes.anchor || Vec2.center\n\t\t};\n\t\tthis.sequences = {};\n\t\tvar sequences = attributes.sequences || {};\n\t\tContext.emit(Event.create(\"spriteSheetCreate\", this));\n\t\tfor (var id in sequences) {\n\t\t\tthis.addSequence(id, sequences[id]);\n\t\t}\n\t}\n\n\t_babelHelpers.createClass(SpriteSheet, {\n\t\taddSequence: {\n\n\t\t\t/**\n    * Add sequence to spritesheet.\n    * Sequences are defined as short-form by Array:\n    *   [frameIndexes, next || null, speed || defaultSpeed || sprite || 0]\n    * or Object:\n    *   {frames: [], next: 'id', speed: seconds, sprite: 0}\n    * @param {String} id       Sequence name (walk, jump, etc)\n    * @param {Array|Object} sequence Array or object\n    */\n\n\t\t\tvalue: function addSequence(id, sequence) {\n\t\t\t\tif (Array.isArray(sequence)) {\n\t\t\t\t\t// Convert short form Array to Object\n\t\t\t\t\tvar _frames = [];\n\t\t\t\t\tfor (var frame = sequence[0], l = sequence[1]; frame <= l; frame++) {\n\t\t\t\t\t\t_frames.push(frame);\n\t\t\t\t\t}\n\t\t\t\t\tsequence = {\n\t\t\t\t\t\tframes: _frames,\n\t\t\t\t\t\tnext: sequence[2] || null,\n\t\t\t\t\t\tspeed: sequence[3] || this.defaults.speed,\n\t\t\t\t\t\tname: id,\n\t\t\t\t\t\tsprite: sequence[4] || 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (sequence.next === true) {\n\t\t\t\t\tsequence.next = id;\n\t\t\t\t}\n\t\t\t\tif (!sequence.speed) {\n\t\t\t\t\tsequence.speed = this.defaults.speed;\n\t\t\t\t}\n\n\t\t\t\tthis.sequences[id] = sequence;\n\t\t\t\tContext.emit(Event.create(\"spriteSheetSequence\", this));\n\t\t\t\tif (!this.defaultSequence) {\n\t\t\t\t\tthis.defaultSequence = id;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tprepare: {\n\t\t\tvalue: function prepare() {\n\t\t\t\tvar sprites = this.sprites;\n\t\t\t\tvar i = 0;\n\t\t\t\tvar l = 0;\n\t\t\t\tfor (i = 0, l = sprites.length; i < l; i++) {\n\t\t\t\t\tif (!sprites[i].ready) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this.frames.length) {\n\t\t\t\t\tvar defaults = this.defaults;\n\t\t\t\t\tvar size = defaults.size;\n\t\t\t\t\tvar anchor = defaults.anchor || Vec2.center;\n\t\t\t\t\tfor (i = 0, l = sprites.length; i < l; i++) {\n\t\t\t\t\t\tvar sprite = sprites[i];\n\t\t\t\t\t\tvar cols = sprite.size[0] / size[0] | 0;\n\t\t\t\t\t\tvar rows = sprite.size[1] / size[1] | 0;\n\t\t\t\t\t\t// debugger;\n\t\t\t\t\t\tfor (var y = 0; y < rows; y++) {\n\t\t\t\t\t\t\tfor (var x = 0; x < cols; x++) {\n\t\t\t\t\t\t\t\tthis.frames.push({\n\t\t\t\t\t\t\t\t\tsprite: sprite,\n\t\t\t\t\t\t\t\t\tposition: Vec2(x * size[0], y * size[1]),\n\t\t\t\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\t\t\t\tanchor: anchor\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.ready = true;\n\t\t\t\tContext.emit(Event.create(\"spriteSheetReady\", this));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\tdraw: {\n\t\t\tvalue: function draw(ctx, idx) {\n\t\t\t\tif (!this.ready && !this.prepare()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar frame = this.frames[idx || 0];\n\t\t\t\tframe.sprite.draw(ctx, null, frame.anchor, frame.size, frame.position);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn SpriteSheet;\n})();\n\n;\n\n/**\n * Sprite SpriteTween lets components draw animation sequences from SpriteSheets.\n * @class\n * @extends Component\n */\n\nvar SpriteTween = exports.SpriteTween = (function (_Component) {\n\tfunction SpriteTween() {\n\t\t_babelHelpers.classCallCheck(this, SpriteTween);\n\n\t\tComponent.call(this);\n\t\tthis.asset = null;\n\t\tthis.sequence = null;\n\t\tthis.speed = 0;\n\t\tthis.offset = 0;\n\t\tthis.isSpriteSheet = false;\n\t\tthis.paused = false;\n\t\tthis.dtime = 0;\n\t\tthis.frame = 0;\n\t}\n\n\t_babelHelpers.inherits(SpriteTween, _Component);\n\n\t_babelHelpers.createClass(SpriteTween, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tasset: null,\n\t\t\t\t\tspeed: 0,\n\t\t\t\t\tsequence: null,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tframe: 0\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\t// this.asset = attributes.asset;\n\t\t\t\t// this.sequence = attributes.sequence;\n\t\t\t\t// this.speed = attributes.speed;\n\t\t\t\tthis.isSpriteSheet = this.asset instanceof SpriteSheet;\n\t\t\t\tif (this.isSpriteSheet) {\n\t\t\t\t\tif (!this.speed) {\n\t\t\t\t\t\tthis.speed = this.asset.defaults.speed;\n\t\t\t\t\t}\n\t\t\t\t\tthis.dtime = this.offset;\n\t\t\t\t\tif (!this.sequence) {\n\t\t\t\t\t\tthis.sequence = this.asset.defaultSequence;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.paused = !this.speed;\n\t\t\t}\n\t\t},\n\t\tpreRender: {\n\t\t\tvalue: function preRender(dt) {\n\t\t\t\tif (!this.isSpriteSheet || this.paused) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar frames = null;\n\t\t\t\tvar speed = 0;\n\t\t\t\tvar frameCount = 0;\n\t\t\t\tvar dtime = this.dtime += dt;\n\t\t\t\tvar nextFrame = this.frame;\n\t\t\t\tif (this.sequence) {\n\t\t\t\t\tvar sequence = this.asset.sequences[this.sequence];\n\t\t\t\t\tspeed = sequence.speed;\n\t\t\t\t\tframes = sequence.frames;\n\t\t\t\t\tframeCount = frames.length;\n\t\t\t\t\tif (dtime >= frameCount * speed) {\n\t\t\t\t\t\tthis.emit(Event.create(\"sequenceEnd\", sequence));\n\t\t\t\t\t\tif (sequence.next) {\n\t\t\t\t\t\t\tif (sequence.next !== this.sequence) {\n\t\t\t\t\t\t\t\tthis.goto(sequence.next);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdtime = dtime % (frameCount * speed);\n\t\t\t\t\t}\n\t\t\t\t\tnextFrame = frames[dtime / speed | 0];\n\t\t\t\t} else {\n\t\t\t\t\tframes = this.asset.frames;\n\t\t\t\t\tframeCount = frames.length;\n\t\t\t\t\tspeed = this.speed;\n\t\t\t\t\tdtime = dtime % (frameCount * speed);\n\t\t\t\t\tvar frame = dtime / speed | 0;\n\t\t\t\t\tif (frame < this.frame) {\n\t\t\t\t\t\tthis.emit(Event.create(\"frameEnd\", this.frame));\n\t\t\t\t\t}\n\t\t\t\t\tnextFrame = dtime / speed | 0;\n\t\t\t\t}\n\t\t\t\tif (nextFrame != this.frame) {\n\t\t\t\t\tthis.frame = nextFrame;\n\t\t\t\t\tthis.emit(Event.create(\"frameNext\", nextFrame));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpause: {\n\t\t\tvalue: function pause() {\n\t\t\t\tthis.paused = true;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tplay: {\n\t\t\tvalue: function play() {\n\t\t\t\tthis.paused = false;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tgoto: {\n\t\t\tvalue: function goto(id) {\n\t\t\t\tif (isNaN(id)) {\n\t\t\t\t\tif (this.sequence != id) {\n\t\t\t\t\t\tthis.dtime = 0;\n\t\t\t\t\t\tthis.sequence = id;\n\t\t\t\t\t\tif (this.paused) {\n\t\t\t\t\t\t\tthis.paused = false;\n\t\t\t\t\t\t\tthis.preRender(0);\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.sequence = null;\n\t\t\t\t\tif (this.frame != id) {\n\t\t\t\t\t\tthis.emit(Event.create(\"frameNext\", id));\n\t\t\t\t\t\tthis.frame = id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn SpriteTween;\n})(Component);\n\n;\n\nComponent.create(SpriteTween, \"spriteTween\");\n\n/**\n * @class\n * @extends Component\n */\n\nvar compositeLevels = {};\ncompositeLevels[0] = \"source-over\";\nvar alphaLevels = {};\nalphaLevels[0] = 1;\n\nvar SpriteCanvasRenderer = exports.SpriteCanvasRenderer = (function (_Component2) {\n\tfunction SpriteCanvasRenderer() {\n\t\t_babelHelpers.classCallCheck(this, SpriteCanvasRenderer);\n\n\t\tif (_Component2 != null) {\n\t\t\t_Component2.apply(this, arguments);\n\t\t}\n\t}\n\n\t_babelHelpers.inherits(SpriteCanvasRenderer, _Component2);\n\n\t_babelHelpers.createClass(SpriteCanvasRenderer, {\n\t\trender: {\n\t\t\tvalue: function render(ctx) {\n\t\t\t\tvar scene = this.entity.scene;\n\t\t\t\tvar child = scene.firstChild;\n\t\t\t\tif (child == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar composite = \"source-over\";\n\t\t\t\tvar alpha = 1;\n\t\t\t\tvar level = 0;\n\t\t\t\tctx.save();\n\t\t\t\twhile (child) {\n\t\t\t\t\tvar tween = child.components.spriteTween;\n\t\t\t\t\tif (tween != null && tween.enabled) {\n\t\t\t\t\t\tvar transform = child.components.transform;\n\t\t\t\t\t\ttransform.applyMatrixWorld(ctx);\n\t\t\t\t\t\tif (transform.composite != composite) {\n\t\t\t\t\t\t\tcomposite = transform.composite;\n\t\t\t\t\t\t\tctx.globalCompositeOperation = composite;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (transform.alpha != alpha) {\n\t\t\t\t\t\t\talpha = transform.alpha;\n\t\t\t\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween.asset.draw(ctx, tween.frame);\n\t\t\t\t\t}\n\t\t\t\t\tif (child.firstChild != null) {\n\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\tchild = child.firstChild;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile (child.next == null) {\n\t\t\t\t\t\t\tlevel--;\n\t\t\t\t\t\t\tchild = child.parent;\n\t\t\t\t\t\t\tif (child == scene) {\n\t\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchild = child.next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn SpriteCanvasRenderer;\n})(Component);\n\n;\n\nComponent.create(SpriteCanvasRenderer, \"spriteCanvasRenderer\");\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n/** @flow weak */\n/**\n * @module core/body\n */\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar TAU = __webpack_require__(1).TAU;\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\n/**\n * @class Body\n * Velocity integrator\n *\n * Related links:\n * http://hg.positiontspectacular.com/toxiclibs/src/689ddcd9bea3/src.physics/toxi/physics2d\n * @extends Component\n */\n\nvar Body = (function (_Component) {\n\tfunction Body() {\n\t\t_babelHelpers.classCallCheck(this, Body);\n\n\t\tComponent.call(this);\n\t\tthis.mass = 0;\n\t\tthis.drag = 0;\n\t\tthis.friction = 0;\n\t\tthis.density = 0;\n\t\tthis.restitution = 1;\n\t\tthis.fixed = false;\n\t\tthis.maxVelocity = 0;\n\t\tthis.maxForce = 0;\n\t\tthis.minVelocity = 0;\n\t\tthis.angularVelocity = 0;\n\t\tthis.torque = 0;\n\t\tthis.continuousTorque = 0;\n\t\tthis.angularDrag = 0;\n\t\tthis.angularFriction = 0;\n\t\tthis.fixedRotation = false;\n\t\tthis.maxAngularVelocity = 0;\n\t\tthis.maxAngularForce = 0;\n\t\tthis.minAngularVelocity = 0;\n\t\tthis.fast = false;\n\t\tthis.awake = false;\n\t\tthis.allowSleep = false;\n\t\tthis.bullet = false;\n\n\t\tthis._velocity = Vec2();\n\t\tthis._force = Vec2();\n\t\tthis._continuousForce = Vec2();\n\t}\n\n\t_babelHelpers.inherits(Body, _Component);\n\n\t_babelHelpers.createClass(Body, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tmass: 1,\n\t\t\t\t\tvelocity: Vec2(),\n\t\t\t\t\tforce: Vec2(),\n\t\t\t\t\tcontinuousForce: Vec2(),\n\t\t\t\t\tdrag: 0.999,\n\t\t\t\t\tfriction: 15,\n\t\t\t\t\tdensity: 1,\n\t\t\t\t\trestitution: 0.2,\n\t\t\t\t\tfixed: false,\n\t\t\t\t\tfixedRotation: true,\n\t\t\t\t\tmaxVelocity: 75,\n\t\t\t\t\tmaxForce: 2000,\n\t\t\t\t\tminVelocity: 1,\n\t\t\t\t\tangularVelocity: 0,\n\t\t\t\t\ttorque: 0,\n\t\t\t\t\tcontinuousTorque: 0,\n\t\t\t\t\tangularDrag: 0.999,\n\t\t\t\t\tangularFriction: 1,\n\t\t\t\t\tmaxAngularVelocity: 0,\n\t\t\t\t\tmaxAngularForce: 0,\n\t\t\t\t\tminAngularVelocity: TAU / 360,\n\t\t\t\t\tfast: false,\n\t\t\t\t\tbullet: false,\n\t\t\t\t\tawake: true,\n\t\t\t\t\tallowSleep: true\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tdirection: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.rad(this._velocity);\n\t\t\t},\n\t\t\tset: function (rad) {\n\t\t\t\tVec2.rotateTo(this._velocity, rad);\n\t\t\t}\n\t\t},\n\t\tspeed: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.len(this._velocity);\n\t\t\t},\n\t\t\tset: function (length) {\n\t\t\t\tVec2.norm(this._velocity, null, length);\n\t\t\t}\n\t\t},\n\t\tapplyForce: {\n\t\t\tvalue: function applyForce(impulse, ignoreMass, continues) {\n\t\t\t\tVec2.add(continues ? this._continuousForce : this._force, !ignoreMass && this.mass !== 1 ? Vec2.scale(impulse, 1 / (this.mass || 1), cache) : impulse);\n\t\t\t}\n\t\t},\n\t\tapplyTorque: {\n\t\t\tvalue: function applyTorque(impulse, ignoreMass, continues) {\n\t\t\t\tVec2.add(continues ? this._continuousForce : this._force, !ignoreMass && this.mass !== 1 ? Vec2.scale(impulse, 1 / (this.mass || 1), cache) : impulse);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Body;\n})(Component);\n\nmodule.exports = Body;\n\nvar cache = Vec2();\n\nVec2.defineProperty(Body, \"velocity\");\nVec2.defineProperty(Body, \"force\");\nVec2.defineProperty(Body, \"continuousForce\");\n\nComponent.create(Body, \"body\");\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvcGh5c2ljcy9ib2R5LmpzPzJjM2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBS08sU0FBUyxvREFBTSxFQUFtQjs7SUFDakMsR0FBRyx1QkFBTyxDQUFlLEVBQXpCLEdBQUc7O0lBQ0osSUFBSSxvREFBTSxFQUFjOzs7Ozs7Ozs7OztJQVVWLElBQUk7QUFDYixVQURTLElBQUksR0FDVjtxQ0FETSxJQUFJOztBQUV2QixXQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxJQUFJLEdBQUcsQ0FBRyxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxJQUFJLEdBQUcsQ0FBRyxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxRQUFRLEdBQUcsQ0FBRyxDQUFDO0FBQ3BCLE1BQUksQ0FBQyxPQUFPLEdBQUcsQ0FBRyxDQUFDO0FBQ25CLE1BQUksQ0FBQyxXQUFXLEdBQUcsQ0FBRyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLE1BQUksQ0FBQyxXQUFXLEdBQUcsQ0FBRyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxRQUFRLEdBQUcsQ0FBRyxDQUFDO0FBQ3BCLE1BQUksQ0FBQyxXQUFXLEdBQUcsQ0FBRyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxlQUFlLEdBQUcsQ0FBRyxDQUFDO0FBQzNCLE1BQUksQ0FBQyxNQUFNLEdBQUcsQ0FBRyxDQUFDO0FBQ2xCLE1BQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFHLENBQUM7QUFDNUIsTUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFHLENBQUM7QUFDdkIsTUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFHLENBQUM7QUFDM0IsTUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDM0IsTUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUcsQ0FBQztBQUM5QixNQUFJLENBQUMsZUFBZSxHQUFHLENBQUcsQ0FBQztBQUMzQixNQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBRyxDQUFDO0FBQzlCLE1BQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLE1BQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLE1BQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDOztBQUVwQixNQUFJLENBQUMsU0FBUyxHQUFHLElBQUksRUFBRSxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDckIsTUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksRUFBRSxDQUFDO0VBQy9COzt3QkE3Qm1CLElBQUk7OzJCQUFKLElBQUk7QUErQnBCLFlBQVU7UUFBQSxZQUFHO0FBQ2hCLFdBQU87QUFDTixTQUFJLEVBQUUsQ0FBRztBQUNULGFBQVEsRUFBRSxJQUFJLEVBQUU7QUFDaEIsVUFBSyxFQUFFLElBQUksRUFBRTtBQUNiLG9CQUFlLEVBQUUsSUFBSSxFQUFFO0FBQ3ZCLFNBQUksRUFBRSxLQUFLO0FBQ1gsYUFBUSxFQUFFLEVBQUk7QUFDZCxZQUFPLEVBQUUsQ0FBRztBQUNaLGdCQUFXLEVBQUUsR0FBRztBQUNoQixVQUFLLEVBQUUsS0FBSztBQUNaLGtCQUFhLEVBQUUsSUFBSTtBQUNuQixnQkFBVyxFQUFFLEVBQUk7QUFDakIsYUFBUSxFQUFFLElBQU07QUFDaEIsZ0JBQVcsRUFBRSxDQUFHO0FBQ2hCLG9CQUFlLEVBQUUsQ0FBRztBQUNwQixXQUFNLEVBQUUsQ0FBRztBQUNYLHFCQUFnQixFQUFFLENBQUc7QUFDckIsZ0JBQVcsRUFBRSxLQUFLO0FBQ2xCLG9CQUFlLEVBQUUsQ0FBRztBQUNwQix1QkFBa0IsRUFBRSxDQUFHO0FBQ3ZCLG9CQUFlLEVBQUUsQ0FBRztBQUNwQix1QkFBa0IsRUFBRSxHQUFHLEdBQUcsR0FBRztBQUM3QixTQUFJLEVBQUUsS0FBSztBQUNYLFdBQU0sRUFBRSxLQUFLO0FBQ2IsVUFBSyxFQUFFLElBQUk7QUFDWCxlQUFVLEVBQUUsSUFBSTtLQUNoQixDQUFDO0lBQ0Y7O0FBTUcsV0FBUztRQUpBLFlBQUc7QUFDZixXQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDO1FBRVksVUFBQyxHQUFHLEVBQUU7QUFDbEIsUUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DOztBQU1HLE9BQUs7UUFKQSxZQUFHO0FBQ1gsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoQztRQUVRLFVBQUMsTUFBTSxFQUFFO0FBQ2pCLFFBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEM7O0FBRUQsWUFBVTtVQUFBLG9CQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0FBQzFDLFFBQUksQ0FBQyxHQUFHLENBQ04sU0FBUyxHQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFHLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUNsRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FDaEQsT0FBTyxDQUNQLENBQUM7SUFDRjs7QUFFRCxhQUFXO1VBQUEscUJBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7QUFDM0MsUUFBSSxDQUFDLEdBQUcsQ0FDTixTQUFTLEdBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQ2xGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUNoRCxPQUFPLENBQ1AsQ0FBQztJQUNGOzs7O1FBM0ZtQixJQUFJO0dBQVMsU0FBUzs7aUJBQXRCLElBQUk7O0FBOEZ6QixJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQzs7QUFFbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQzs7QUFFN0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBmbG93IHdlYWsgKi9cbi8qKlxuICogQG1vZHVsZSBjb3JlL2JvZHlcbiAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvcmUvY29tcG9uZW50JztcbmltcG9ydCB7VEFVfSBmcm9tICcuLi9tYXRoL21hdGhmJztcbmltcG9ydCBWZWMyIGZyb20gJy4uL21hdGgvdmVjMic7XG5cbi8qKlxuICogQGNsYXNzIEJvZHlcbiAqIFZlbG9jaXR5IGludGVncmF0b3JcbiAqXG4gKiBSZWxhdGVkIGxpbmtzOlxuICogaHR0cDovL2hnLnBvc2l0aW9udHNwZWN0YWN1bGFyLmNvbS90b3hpY2xpYnMvc3JjLzY4OWRkY2Q5YmVhMy9zcmMucGh5c2ljcy90b3hpL3BoeXNpY3MyZFxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvZHkgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRDb21wb25lbnQuY2FsbCh0aGlzKTtcblx0XHR0aGlzLm1hc3MgPSAwLjA7XG5cdFx0dGhpcy5kcmFnID0gMC4wO1xuXHRcdHRoaXMuZnJpY3Rpb24gPSAwLjA7XG5cdFx0dGhpcy5kZW5zaXR5ID0gMC4wO1xuXHRcdHRoaXMucmVzdGl0dXRpb24gPSAxLjA7XG5cdFx0dGhpcy5maXhlZCA9IGZhbHNlO1xuXHRcdHRoaXMubWF4VmVsb2NpdHkgPSAwLjA7XG5cdFx0dGhpcy5tYXhGb3JjZSA9IDAuMDtcblx0XHR0aGlzLm1pblZlbG9jaXR5ID0gMC4wO1xuXHRcdHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gMC4wO1xuXHRcdHRoaXMudG9ycXVlID0gMC4wO1xuXHRcdHRoaXMuY29udGludW91c1RvcnF1ZSA9IDAuMDtcblx0XHR0aGlzLmFuZ3VsYXJEcmFnID0gMC4wO1xuXHRcdHRoaXMuYW5ndWxhckZyaWN0aW9uID0gMC4wO1xuXHRcdHRoaXMuZml4ZWRSb3RhdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMubWF4QW5ndWxhclZlbG9jaXR5ID0gMC4wO1xuXHRcdHRoaXMubWF4QW5ndWxhckZvcmNlID0gMC4wO1xuXHRcdHRoaXMubWluQW5ndWxhclZlbG9jaXR5ID0gMC4wO1xuXHRcdHRoaXMuZmFzdCA9IGZhbHNlO1xuXHRcdHRoaXMuYXdha2UgPSBmYWxzZTtcblx0XHR0aGlzLmFsbG93U2xlZXAgPSBmYWxzZTtcblx0XHR0aGlzLmJ1bGxldCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fdmVsb2NpdHkgPSBWZWMyKCk7XG5cdFx0dGhpcy5fZm9yY2UgPSBWZWMyKCk7XG5cdFx0dGhpcy5fY29udGludW91c0ZvcmNlID0gVmVjMigpO1xuXHR9XG5cblx0Z2V0IGF0dHJpYnV0ZXMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1hc3M6IDEuMCxcblx0XHRcdHZlbG9jaXR5OiBWZWMyKCksXG5cdFx0XHRmb3JjZTogVmVjMigpLFxuXHRcdFx0Y29udGludW91c0ZvcmNlOiBWZWMyKCksXG5cdFx0XHRkcmFnOiAwLjk5OSxcblx0XHRcdGZyaWN0aW9uOiAxNS4wLFxuXHRcdFx0ZGVuc2l0eTogMS4wLFxuXHRcdFx0cmVzdGl0dXRpb246IDAuMixcblx0XHRcdGZpeGVkOiBmYWxzZSxcblx0XHRcdGZpeGVkUm90YXRpb246IHRydWUsXG5cdFx0XHRtYXhWZWxvY2l0eTogNzUuMCxcblx0XHRcdG1heEZvcmNlOiAyMDAwLjAsXG5cdFx0XHRtaW5WZWxvY2l0eTogMS4wLFxuXHRcdFx0YW5ndWxhclZlbG9jaXR5OiAwLjAsXG5cdFx0XHR0b3JxdWU6IDAuMCxcblx0XHRcdGNvbnRpbnVvdXNUb3JxdWU6IDAuMCxcblx0XHRcdGFuZ3VsYXJEcmFnOiAwLjk5OSxcblx0XHRcdGFuZ3VsYXJGcmljdGlvbjogMS4wLFxuXHRcdFx0bWF4QW5ndWxhclZlbG9jaXR5OiAwLjAsXG5cdFx0XHRtYXhBbmd1bGFyRm9yY2U6IDAuMCxcblx0XHRcdG1pbkFuZ3VsYXJWZWxvY2l0eTogVEFVIC8gMzYwLFxuXHRcdFx0ZmFzdDogZmFsc2UsXG5cdFx0XHRidWxsZXQ6IGZhbHNlLFxuXHRcdFx0YXdha2U6IHRydWUsXG5cdFx0XHRhbGxvd1NsZWVwOiB0cnVlXG5cdFx0fTtcblx0fVxuXG5cdGdldCBkaXJlY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFZlYzIucmFkKHRoaXMuX3ZlbG9jaXR5KTtcblx0fVxuXG5cdHNldCBkaXJlY3Rpb24ocmFkKSB7XG5cdFx0VmVjMi5yb3RhdGVUbyh0aGlzLl92ZWxvY2l0eSwgcmFkKTtcblx0fVxuXG5cdGdldCBzcGVlZCgpIHtcblx0XHRyZXR1cm4gVmVjMi5sZW4odGhpcy5fdmVsb2NpdHkpO1xuXHR9XG5cblx0c2V0IHNwZWVkKGxlbmd0aCkge1xuXHRcdFZlYzIubm9ybSh0aGlzLl92ZWxvY2l0eSwgbnVsbCwgbGVuZ3RoKTtcblx0fVxuXG5cdGFwcGx5Rm9yY2UoaW1wdWxzZSwgaWdub3JlTWFzcywgY29udGludWVzKSB7XG5cdFx0VmVjMi5hZGQoXG5cdFx0XHQoY29udGludWVzKSA/IHRoaXMuX2NvbnRpbnVvdXNGb3JjZSA6IHRoaXMuX2ZvcmNlLCAoIWlnbm9yZU1hc3MgJiYgdGhpcy5tYXNzICE9PSAxKSA/XG5cdFx0XHRWZWMyLnNjYWxlKGltcHVsc2UsIDEgLyAodGhpcy5tYXNzIHx8IDEpLCBjYWNoZSkgOlxuXHRcdFx0aW1wdWxzZVxuXHRcdCk7XG5cdH1cblxuXHRhcHBseVRvcnF1ZShpbXB1bHNlLCBpZ25vcmVNYXNzLCBjb250aW51ZXMpIHtcblx0XHRWZWMyLmFkZChcblx0XHRcdChjb250aW51ZXMpID8gdGhpcy5fY29udGludW91c0ZvcmNlIDogdGhpcy5fZm9yY2UsICghaWdub3JlTWFzcyAmJiB0aGlzLm1hc3MgIT09IDEpID9cblx0XHRcdFZlYzIuc2NhbGUoaW1wdWxzZSwgMSAvICh0aGlzLm1hc3MgfHwgMSksIGNhY2hlKSA6XG5cdFx0XHRpbXB1bHNlXG5cdFx0KTtcblx0fVxufTtcblxubGV0IGNhY2hlID0gVmVjMigpO1xuXG5WZWMyLmRlZmluZVByb3BlcnR5KEJvZHksICd2ZWxvY2l0eScpO1xuVmVjMi5kZWZpbmVQcm9wZXJ0eShCb2R5LCAnZm9yY2UnKTtcblZlYzIuZGVmaW5lUHJvcGVydHkoQm9keSwgJ2NvbnRpbnVvdXNGb3JjZScpO1xuXG5Db21wb25lbnQuY3JlYXRlKEJvZHksICdib2R5Jyk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9waHlzaWNzL2JvZHkuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiI0LmpzIn0=");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\n/**\n * @class Boid\n * Steering behaviour\n * - http://www.openprocessing.org/sketch/7493\n * - http://www.openprocessing.org/sketch/11045\n * - https://github.com/paperjs/paper.js/blob/master/examples/Paperjs.org/Tadpoles.html\n *\n * @extends Component\n *\n * @constructor\n */\n\nvar Boid = (function (_Component) {\n\tfunction Boid() {\n\t\t_babelHelpers.classCallCheck(this, Boid);\n\n\t\tComponent.call(this);\n\t\tthis.aura = 0;\n\t\tthis.perception = 0;\n\t\tthis.perceptionSq = 0;\n\t\tthis.auraSq = 0;\n\t\tthis.mod = 2;\n\t\tthis.cohesionMod = 1;\n\t\tthis.avoidanceMod = 2;\n\t\tthis.imitationMod = 1;\n\t}\n\n\t_babelHelpers.inherits(Boid, _Component);\n\n\t_babelHelpers.createClass(Boid, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tperception: 0,\n\t\t\t\t\taura: 0\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tif (this.components.bounds) {\n\t\t\t\t\tif (this.aura === 0) {\n\t\t\t\t\t\tthis.aura = this.components.bounds.radius * 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.perception === 0) {\n\t\t\t\t\t\tthis.perception = this.aura * 4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.perceptionSq = this.perception * this.perception;\n\t\t\t\tthis.auraSq = this.aura * this.aura;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Boid;\n})(Component);\n\nvar cohesion = Vec2();\nvar avoidance = Vec2();\nvar imitation = Vec2();\nvar distance = Vec2();\nvar impulse = Vec2();\n\nBoid.fixedUpdate = function (dt) {\n\tvar boids = this.registry.instances;\n\tvar len = boids.length;\n\tvar i = len;\n\twhile (i--) {\n\t\tvar boid1 = boids[i];\n\t\tif (!boid1.enabled) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar entity1 = boid1.entity;\n\t\tvar pos1 = entity1.components.transform.position;\n\t\tvar vel = entity1.components.body.velocity;\n\n\t\tvar avoidanceCount = 0;\n\t\tvar imitationCount = 0;\n\t\tvar cohesionCount = 0;\n\t\tVec2.set(impulse);\n\n\t\tvar j = len;\n\t\twhile (j--) {\n\t\t\tvar boid2 = boids[j];\n\t\t\tif (!boid2.enabled || boid1 === boid2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar entity2 = boid2.entity;\n\t\t\tvar pos2 = entity2.components.transform.position;\n\n\t\t\tvar diffSq = Vec2.distSq(pos1, pos2);\n\t\t\tif (diffSq < boid1.perceptionSq && diffSq) {\n\t\t\t\tVec2.sub(pos2, pos1, distance);\n\t\t\t\t// Vec2.scale(distance, Math.sqrt(entity1.body.mass / entity2.body.mass));\n\n\t\t\t\t// diff = Math.sqrt(diffSq)\n\t\t\t\t// Vec2.scale(distance, Math.quadInOut(diff / boid1.perception), cache)\n\n\t\t\t\t// Cohesion : try to approach other boids\n\t\t\t\tcohesionCount++;\n\t\t\t\tif (cohesionCount == 1) {\n\t\t\t\t\tVec2.copy(cohesion, distance);\n\t\t\t\t} else {\n\t\t\t\t\tVec2.add(cohesion, distance);\n\t\t\t\t}\n\n\t\t\t\t// Imitation : try to move in the same way than other boids\n\t\t\t\timitationCount++;\n\t\t\t\tif (imitationCount == 1) {\n\t\t\t\t\tVec2.copy(imitation, entity2.components.body.velocity);\n\t\t\t\t} else {\n\t\t\t\t\tVec2.add(imitation, entity2.components.body.velocity);\n\t\t\t\t}\n\n\t\t\t\t// Avoidance : try to keep a minimum distance between others.\n\t\t\t\tif (diffSq < boid1.auraSq) {\n\t\t\t\t\tavoidanceCount++;\n\t\t\t\t\tif (avoidanceCount == 1) {\n\t\t\t\t\t\tVec2.copy(avoidance, distance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tVec2.add(avoidance, distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar mod = boid1.mod;\n\t\tif (cohesionCount && boid1.cohesionMod) {\n\t\t\tif (cohesionCount > 1) {\n\t\t\t\tVec2.scale(cohesion, 1 / cohesionCount);\n\t\t\t}\n\t\t\tentity1.components.body.applyForce(Vec2.scale(cohesion, boid1.cohesionMod * mod), true);\n\t\t}\n\n\t\tif (imitationCount && boid1.imitationMod) {\n\t\t\tif (imitationCount > 1) {\n\t\t\t\tVec2.scale(imitation, 1 / imitationCount);\n\t\t\t}\n\t\t\tVec2.add(impulse, Vec2.scale(imitation, boid1.imitationMod * mod));\n\t\t\tentity1.components.body.applyForce(Vec2.sub(impulse, vel), true);\n\t\t}\n\n\t\tif (avoidanceCount && boid1.avoidanceMod) {\n\t\t\tif (avoidanceCount > 1) {\n\t\t\t\tVec2.scale(avoidance, 1 / avoidanceCount);\n\t\t\t}\n\t\t\tentity1.components.body.applyForce(Vec2.scale(avoidance, boid1.avoidanceMod * mod), true);\n\t\t}\n\t}\n};\n\nComponent.create(Boid, \"boid\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar BorderEvent = (function (_Event) {\n\tfunction BorderEvent() {\n\t\t_babelHelpers.classCallCheck(this, BorderEvent);\n\n\t\tEvent.call(this);\n\t\tthis.cancelable = true;\n\t\tthis.diff = 0;\n\t\tthis.contact = 0;\n\t}\n\n\t_babelHelpers.inherits(BorderEvent, _Event);\n\n\treturn BorderEvent;\n})(Event);\n\nEvent.register(BorderEvent, \"border\");\n\nvar position = Vec2();\nvar velocity = Vec2();\n\n/**\n * @class Border\n * Border lets entities react on contact with the canvas borders.\n * @extends Component\n * @property {String} [mode=\"bounce\"] Reaction to contact with border, \"constrain\", \"bounce\", \"mirror\", \"kill\"\n * @property {Number} [restitution=1] Restitution on bounce\n * @fires Border#onBorder\n */\n\nvar Border = (function (_Component) {\n\tfunction Border() {\n\t\t_babelHelpers.classCallCheck(this, Border);\n\n\t\tComponent.call(this);\n\t\tthis.mode = \"\";\n\t\tthis.restitution = 0;\n\t}\n\n\t_babelHelpers.inherits(Border, _Component);\n\n\t_babelHelpers.createClass(Border, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tmode: \"bounce\",\n\t\t\t\t\trestitution: 1\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tsimulate: {\n\t\t\tvalue: function simulate(dt) {\n\t\t\t\tvar topLeft = Context.renderer.topLeft;\n\t\t\t\tvar bottomRight = Context.renderer.bottomRight;\n\t\t\t\tvar restitution = this.restitution;\n\t\t\t\tvar mode = this.mode;\n\t\t\t\tvar mirror = mode == \"mirror\";\n\t\t\t\tvar bounce = mode == \"bounce\";\n\t\t\t\tvar entity = this.entity;\n\t\t\t\tvar body = entity.components.body;\n\t\t\t\tif (bounce && body != null) {\n\t\t\t\t\tif (!body.enabled || !body.awake) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tbody.copyVelocity(velocity);\n\t\t\t\t}\n\t\t\t\tvar transform = entity.components.transform;\n\t\t\t\ttransform.copyPosition(position);\n\t\t\t\tvar bounds = entity.components.bounds;\n\t\t\t\tvar contact = -1;\n\n\t\t\t\t// Horizontal\n\t\t\t\tvar diff = (bounce ? bounds.left : bounds.right) - topLeft[0];\n\t\t\t\tif (diff <= 0) {\n\t\t\t\t\tcontact = 3;\n\t\t\t\t\tif (mirror) {\n\t\t\t\t\t\tposition[0] = bottomRight[0] + bounds.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tposition[0] -= diff;\n\t\t\t\t\t\tif (bounce) {\n\t\t\t\t\t\t\tvelocity[0] *= -restitution;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdiff = (bounce ? bounds.right : bounds.left) - bottomRight[0];\n\t\t\t\t\tif (diff >= 0) {\n\t\t\t\t\t\tcontact = 1;\n\t\t\t\t\t\tif (mirror) {\n\t\t\t\t\t\t\tposition[0] = topLeft[0] - bounds.width;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tposition[0] -= diff;\n\t\t\t\t\t\t\tif (bounce) {\n\t\t\t\t\t\t\t\tvelocity[0] *= -restitution;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Vertical\n\t\t\t\t\t\tdiff = (bounce ? bounds.top : bounds.bottom) - topLeft[1];\n\t\t\t\t\t\tif (diff <= 0) {\n\t\t\t\t\t\t\tcontact = 0;\n\t\t\t\t\t\t\tif (mirror) {\n\t\t\t\t\t\t\t\tposition[1] = bottomRight[1] + bounds.height;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tposition[1] -= diff;\n\t\t\t\t\t\t\t\tif (bounce) {\n\t\t\t\t\t\t\t\t\tvelocity[1] *= -restitution;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiff = (bounce ? bounds.bottom : bounds.top) - bottomRight[1];\n\t\t\t\t\t\t\tif (diff >= 0) {\n\t\t\t\t\t\t\t\tcontact = 2;\n\t\t\t\t\t\t\t\tif (mirror) {\n\t\t\t\t\t\t\t\t\tposition[1] = topLeft[1] - bounds.height;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tposition[1] -= diff;\n\t\t\t\t\t\t\t\t\tif (bounce) {\n\t\t\t\t\t\t\t\t\t\tvelocity[1] *= -restitution;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We contact\n\t\t\t\tif (contact < 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar event = Event.create(\"border\");\n\t\t\t\tevent.contact = contact;\n\t\t\t\tevent.diff = diff;\n\t\t\t\tif (!this.emit(event)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this.mode == \"kill\") {\n\t\t\t\t\tentity.destroy();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttransform.translateTo(position);\n\t\t\t\tif (bounce && body != null) {\n\t\t\t\t\tbody.velocity = velocity;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Border;\n})(Component);\n\nComponent.create(Border, \"border\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n/**\n * Intersection circle/point\n * http://www.openprocessing.org/user/54\n * @param {Number[]} center\n * @param {Number} radius\n * @param {Number[]} point\n * @return {Boolean}\n */\nexports.circleContains = circleContains;\n\n/**\n * Intersection rectangle/point\n * @param {Number[]} topLeft\n * @param {Number[]} size\n * @param {Number[]} point\n * @return {Boolean}\n */\nexports.rectangleContains = rectangleContains;\n\n/**\n * Closes point to a line\n * http://blog.generalrelativity.org/actionscript-30/collision-detection-circleline-segment-circlecapsule/\n * @param {Number[]} a Line P1\n * @param {Number[]} b Line P2\n * @param {Number[]} point Point\n * @param {Number[]} result Result\n * @return {Number[]} Result\n */\nexports.closestLinePoint = closestLinePoint;\n\n/**\n * Intersection line/circle\n *\n * @static\n * @param {Number[]} a Line P1\n * @param {Number[]} b Line P2\n * @param {Number[]} center Circle center\n * @param {Number} radius Circe radius\n * @param {Number[]} result Result vector\n * @return {Number[]|Boolean}\n */\nexports.intersectLineCircle = intersectLineCircle;\n\n/**\n * Intersection rectangle/circle\n *\n * http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection/402010#402010\n *\n * @param {Number[]} topLeft Rectangle top-left point\n * @param {Number[]} size Rectangle size\n * @param {Number[]} center Circle center\n * @param {Number} radius Circle radius\n * @return {Boolean}\n */\nexports.intersectCircleRectangle = intersectCircleRectangle;\n\n/**\n * Intersection rectangle/rectangle\n *\n * @param {Number[]} pos\n * @param {Number[]} size\n * @param {Number[]} topLeft2\n * @param {Number[]} size2\n * @return {Boolean}\n */\nexports.intersectRectangle = intersectRectangle;\n\n/**\n * Random point in rectangle\n */\nexports.randomPointInRectangle = randomPointInRectangle;\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Color = _babelHelpers.interopRequire(__webpack_require__(9));\n\nvar _mathMathf = __webpack_require__(1);\n\nvar clamp = _mathMathf.clamp;\nvar TAU = _mathMathf.TAU;\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar random = __webpack_require__(2).random;\n\nvar _position = Vec2();\n\n/**\n * @class Bounds\n * Tracks shape and dimensions of an entity.\n * TODO: Shapes into poolable objects\n * TODO: https://github.com/photonstorm/phaser/blob/master/Phaser/Collision.ts\n * @extends Component\n * @property {String} shape \"circle\" or \"rect\"\n * @property {Number} radius Circle radius\n * @property {Number[]} size Rect size\n */\n\nvar Bounds = (function (_Component) {\n\tfunction Bounds() {\n\t\t_babelHelpers.classCallCheck(this, Bounds);\n\n\t\tComponent.call(this);\n\t\tthis.shape = \"rect\";\n\t\tthis.radius = 0;\n\t\tthis._size = Vec2();\n\t\tthis._anchor = Vec2();\n\t\tthis._topLeft = Vec2();\n\t\tthis._bottomRight = Vec2();\n\t\tthis._position = _position;\n\t}\n\n\t_babelHelpers.inherits(Bounds, _Component);\n\n\t_babelHelpers.createClass(Bounds, {\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tthis._position = this.components.transform.position;\n\t\t\t}\n\t\t},\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tshape: \"rect\",\n\t\t\t\t\tradius: 0,\n\t\t\t\t\tsize: Vec2(),\n\t\t\t\t\tanchor: Vec2.center\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tintersectLine: {\n\t\t\tvalue: function intersectLine(a1, a2, result) {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn intersectLineCircle(a1, a2, this._position, this.radius, result);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tcontains: {\n\t\t\tvalue: function contains(point) {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn circleContains(this._position, this.radius, point);\n\t\t\t\t}\n\t\t\t\treturn rectangleContains(this.topLeft, this._size, point);\n\t\t\t}\n\t\t},\n\t\tintersectRect: {\n\t\t\tvalue: function intersectRect(topLeft, size) {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn intersectCircleRectangle(topLeft, size, this._position, this.radius);\n\t\t\t\t}\n\t\t\t\treturn intersectRectangle(this.topLeft, this._size, topLeft, size);\n\t\t\t}\n\t\t},\n\t\ttop: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this._position[1] - this.radius;\n\t\t\t\t}\n\t\t\t\treturn this._position[1] - this._size[1] * this._anchor[1];\n\t\t\t}\n\t\t},\n\t\tbottom: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this._position[1] + this.radius;\n\t\t\t\t}\n\t\t\t\treturn this._position[1] + this._size[1] * this._anchor[1];\n\t\t\t}\n\t\t},\n\t\tleft: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this._position[0] - this.radius;\n\t\t\t\t}\n\t\t\t\treturn this._position[0] - this._size[0] * this._anchor[0];\n\t\t\t}\n\t\t},\n\t\tright: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this._position[0] + this.radius;\n\t\t\t\t}\n\t\t\t\treturn this._position[0] + this._size[0] * this._anchor[0];\n\t\t\t}\n\t\t},\n\t\twidth: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this.radius * 2;\n\t\t\t\t}\n\t\t\t\treturn this._size[0];\n\t\t\t}\n\t\t},\n\t\theight: {\n\t\t\tget: function () {\n\t\t\t\tif (this.shape == \"circle\") {\n\t\t\t\t\treturn this.radius * 2;\n\t\t\t\t}\n\t\t\t\treturn this._size[1];\n\t\t\t}\n\t\t},\n\t\ttopLeft: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.sub(this._position, Vec2.mul(this._size, this._anchor, this._topLeft), this._topLeft);\n\t\t\t}\n\t\t},\n\t\tbottomRight: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.add(this._position, Vec2.mul(this._size, this._anchor, this._bottomRight), this._topLeft);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Bounds;\n})(Component);\n\nexports[\"default\"] = Bounds;\n\nVec2.defineProperty(Bounds, \"size\");\nVec2.defineProperty(Bounds, \"anchor\");\n\nComponent.create(Bounds, \"bounds\");\n\nvar v = Vec2();\nvar w = Vec2();\nvar lineCircTest = Vec2();\nfunction circleContains(center, radius, point) {\n\treturn Vec2.distSq(point, center) <= radius * radius;\n}\n\nfunction rectangleContains(topLeft, size, point) {\n\treturn topLeft[0] - size[0] < point[0] && topLeft[1] < point[1] && topLeft[0] + size[0] > point[0] && topLeft[1] + size[1] > point[1];\n}\n\nfunction closestLinePoint(a, b, point, result) {\n\tVec2.sub(b, a, v);\n\tVec2.sub(point, a, w);\n\tvar t = Mathf.clamp(Vec2.dot(w, v) / Vec2.dot(v, v), 0, 1);\n\treturn Vec2.add(a, Vec2.scale(v, t, result));\n}\n\nfunction intersectLineCircle(a, b, center, radius, result) {\n\tclosestLinePoint(a, b, center, lineCircTest);\n\tVec2.sub(lineCircTest, center);\n\tif (Vec2.dot(lineCircTest, lineCircTest) > radius * radius) {\n\t\treturn false;\n\t}\n\tif (!result) {\n\t\treturn true;\n\t}\n\treturn Vec2.copy(result, lineCircTest);\n}\n\nfunction intersectCircleRectangle(topLeft, size, center, radius) {\n\tvar circleDistanceX = Math.abs(center[0] - topLeft[0] - size[0] / 2);\n\tvar circleDistanceY = Math.abs(center[1] - topLeft[1] - size[1] / 2);\n\tif (circleDistanceX > size[0] / 2 + radius || circleDistanceY > size[1] / 2 + radius) {\n\t\treturn false;\n\t}\n\tif (circleDistanceX <= size[0] / 2 || circleDistanceY <= size[1] / 2) {\n\t\treturn true;\n\t}\n\tvar cornerDistance = Math.pow(circleDistanceX - size[0] / 2, 2) + Math.pow(circleDistanceY - size[1] / 2, 2);\n\treturn cornerDistance <= Math.pow(radius, 2);\n}\n\nfunction intersectRectangle(topLeft, size, topLeft2, size2) {\n\treturn !(topLeft[0] > topLeft2[0] + size2[0] || topLeft[0] + size[0] < topLeft2[0] || topLeft[1] > topLeft2[1] + size2[1] || topLeft[1] + size[1] < topLeft2[1]);\n}\n\nfunction randomPointInRectangle(point, pos, size) {\n\tVec2.set(point, random(0, size[0]), random(0, size[1]));\n\treturn Vec2.add(point, pos);\n}\n\n/*\ngetAabb() {\n\tif (!this.topLeft) {\n\t\tthis.topLeft = Vec2();\n\t\tthis.bottomRight = Vec2();\n\t}\n\tVec2.set(\n\t\tthis.topLeft,\n\t\tthis.position[0] + this._size[0] * 0.5 * (this.align[0] + 1),\n\t\tthis.position[1] + this._size[1] * 0.5 * (this.align[1] + 1)\n\t);\n\tVec2.set(\n\t\tthis.bottomRight,\n\t\tthis.position[0] + this._size[0] * 0.5 * (this.align[0] + 5),\n\t\tthis.position[1] + this._size[1] * 0.5 * (this.align[1] + 5)\n\t);\n\treturn this.topLeft;\n},\n*/\n\n/***\n * Intersection line/rectangle\n *\nexport function lineRect(point1, point2, topLeft, size) {\n\t// Calculate m and c for the equation for the line (y = mx+c)\n\tm = (a1[1] - y0) / (a1[0] - x0);\n\tc = y0 - (m * x0);\n\n\t// if the line is going up from right to left then the top intersect point is on the left\n\tif (m > 0) {\n\t\ttop_intersection = (m * l + c);\n\t\tbottom_intersection = (m * r + c);\n\t}\n\t// otherwise it's on the right\n\telse {\n\t\ttop_intersection = (m * r + c);\n\t\tbottom_intersection = (m * l + c);\n\t}\n\n\t// work out the top and bottom extents for the triangle\n\tif (y0 < a1[1]) {\n\t\ttoptrianglepoint = y0;\n\t\tbottomtrianglepoint = a1[1];\n\t} else {\n\t\ttoptrianglepoint = a1[1];\n\t\tbottomtrianglepoint = y0;\n\t}\n\n\tlet topoverlap: Number;\n\tlet botoverlap: Number;\n\n\t// and calculate the overlap between those two bounds\n\ttopoverlap = top_intersection > toptrianglepoint ? top_intersection : toptrianglepoint;\n\tbotoverlap = bottom_intersection < bottomtrianglepoint ? bottom_intersection : bottomtrianglepoint;\n\n\t// (topoverlap<botoverlap) :\n\t// if the intersection isn't the right way up then we have no overlap\n\n\t// (!((botoverlap<t) || (topoverlap>b)) :\n\t// If the bottom overlap is higher than the top of the rectangle or the top overlap is\n\t// lower than the bottom of the rectangle we don't have intersection. So return the negative\n\t// of that. Much faster than checking each of the points is within the bounds of the rectangle.\n\treturn (topoverlap < botoverlap) && (!((botoverlap < t) || (topoverlap > b)));\n};\n*/\n\n/*\nexport function lineCirc(point1, point2, center, radius) {\n\tlet a, b, bb4ac, c, dx, dy, ia1[0], ia2[0], ia1[1], ia2[1], mu, testX, testY;\n\tdx = a2[0] - a1[0];\n\tdy = a2[1] - a1[1];\n\ta = dx * dx + dy * dy;\n\tb = 2 * (dx * (a1[0] - cx) + dy * (a1[1] - cy));\n\tc = cx * cx + cy * cy;\n\tc += a1[0] * a1[0] + a1[1] * a1[1];\n\tc -= 2 * (cx * a1[0] + cy * a1[1]);\n\tc -= cr * cr;\n\tbb4ac = b * b - 4 * a * c;\n\tif (bb4ac < 0) {\n\t\treturn false;\n\t}\n\tmu = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);\n\tia1[0] = a1[0] + mu * dx;\n\tia1[1] = a1[1] + mu * dy;\n\tmu = (-b - sqrt(b * b - 4 * a * c)) / (2 * a);\n\tia2[0] = a1[0] + mu * dx;\n\tia2[1] = a1[1] + mu * dy;\n\tif (dist(a1[0], a1[1], cx, cy) < dist(a2[0], a2[1], cx, cy)) {\n\t\ttestX = a2[0];\n\t\ttestY = a2[1];\n\t} else {\n\t\ttestX = a1[0];\n\t\ttestY = a1[1];\n\t}\n\tif (dist(testX, testY, ia1[0], ia1[1]) < dist(a1[0], a1[1], a2[0], a2[1]) || dist(testX, testY, ia2[0], ia2[1]) < dist(a1[0], a1[1], a2[0], a2[1])) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n*/\n\n/**\n * Intersection line/line\n *\n * http://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n * http://jsperf.com/line-intersection2/2\n *\n * @param {Number[]} a1 Line 1 P1\n * @param {Number[]} a2 Line 1 P2\n * @param {Number[]} b1 Line 2 P1\n * @param {Number[]} b2 Line 2 P2\n * @param {Number[]} result\n * @return {Number[]}\n *\nexport function intersectLine(a1, a2, b1, b2, result) {\n\tif (!result) {\n\t\t// http://www.bryceboe.com/2006/10/23/line-segment-intersection-algorithm/comment-page-1/\n\t\treturn ccw(a1, b1, b2) != ccw(a2, b1, b2) &&\n\t\t\tccw(a1, a2, b1) != ccw(a1, a2, b2);\n\t}\n\n\t// http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect/1968345#1968345\n\tlet s1_x = a2[0] - a1[0];\n\tlet s1_y = a2[1] - a1[1];\n\tlet s2_x = b2[0] - b1[0];\n\tlet s2_y = b2[1] - b1[1];\n\n\tlet s = (-s1_y * (a1[0] - b1[0]) + s1_x * (a1[1] - b1[1])) / (-s2_x * s1_y + s1_x * s2_y);\n\tlet t = (s2_x * (a1[1] - b1[1]) - s2_y * (a1[0] - b1[0])) / (-s2_x * s1_y + s1_x * s2_y);\n\n\t// Collision detected\n\tif (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n\t\treturn Vec2.set(result, a1[0] + (t * s1_x), a1[1] + (t * s1_y));\n\t}\n\treturn null;\n};\n\nfunction ccw(a, b, c) {\n\tlet cw = ((c[1] - a[1]) * (b[0] - a[0])) - ((b[1] - a[1]) * (c[0] - a[0]));\n\treturn (cw > 0) ? true : cw < 0 ? false : true; // colinear\n}\n*/\n\n/**\n * @class  Debug\n * Outlines the boundaries and angle of an entity.\n * @extends Component\n */\n\nvar BoundsDebug = (function (_Component2) {\n\tfunction BoundsDebug() {\n\t\t_babelHelpers.classCallCheck(this, BoundsDebug);\n\n\t\tComponent.call(this);\n\t\tthis._color = Color();\n\t}\n\n\t_babelHelpers.inherits(BoundsDebug, _Component2);\n\n\t_babelHelpers.createClass(BoundsDebug, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tcolor: Color.gray,\n\t\t\t\t\topacity: 0.5,\n\t\t\t\t\tfill: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\treturn BoundsDebug;\n})(Component);\n\nColor.defineProperty(BoundsDebug, \"color\");\n\n/*\nFIXME: Convert to sprite\nexport function ctx) {\n\tlet bounds = this.components.bounds;\n\tctx.save();\n\tif (this.fill) {\n\t\tctx.fillStyle = Color.rgba(this.color, this.opacity * 0.5);\n\t}\n\tctx.strokeStyle = Color.rgba(this.color, this.opacity);\n\tctx.lineWidth = 1;\n\tthis._position(ctx);\n\tif (bounds.shape == 'circle') {\n\t\tctx.beginPath();\n\t\tctx.lineTo(0, bounds.radius);\n\t\tctx.moveTo(0, 0);\n\t\tctx.arc(0, 0, bounds.radius | 0, 0, Mathf.TAU);\n\t\tif (this.fill) {\n\t\t\tctx.fill();\n\t\t}\n\t\tctx.stroke();\n\t} else {\n\t\tlet size = bounds._size;\n\t\tctx.strokeRect(-size[0] / 2 | 0, -size[1] / 2 | 0, size[0] | 0, size[1] | 0);\n\t\tif (this.fill) {\n\t\t\tctx.fillRect(-size[0] / 2 | 0, -size[1] / 2 | 0, size[0] | 0, size[1] | 0);\n\t\t}\n\t}\n\tctx.restore();\n};\n*/\n\nComponent.create(BoundsDebug, \"boundsDebug\");\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar TriggerEvent = (function (_Event) {\n\tfunction TriggerEvent() {\n\t\t_babelHelpers.classCallCheck(this, TriggerEvent);\n\n\t\tEvent.call(this);\n\t\tthis.other = null;\n\t\tthis.overlap = 0;\n\t\tthis._normal = Vec2();\n\t}\n\n\t_babelHelpers.inherits(TriggerEvent, _Event);\n\n\treturn TriggerEvent;\n})(Event);\n\nVec2.defineProperty(TriggerEvent, \"normal\");\nEvent.register(TriggerEvent, \"trigger\");\n\nvar CollideEvent = (function (_Event2) {\n\tfunction CollideEvent() {\n\t\t_babelHelpers.classCallCheck(this, CollideEvent);\n\n\t\tEvent.call(this);\n\t\tthis.other = null;\n\t\tthis._normal = Vec2();\n\t}\n\n\t_babelHelpers.inherits(CollideEvent, _Event2);\n\n\treturn CollideEvent;\n})(Event);\n\nVec2.defineProperty(CollideEvent, \"normal\");\nEvent.register(CollideEvent, \"collide\");\n\n/**\n * Collider\n *\n * Circle only\n *\n * http://jsperf.com/circular-collision-detection/2\n * https://sites.google.com/site/t3hprogrammer/research/circle-circle-collision-tutorial#TOC-Dynamic-Circle-Circle-Collision\n * http://gamedev.tutsplus.com/tutorials/implementation/when-worlds-collide-simulating-circle-circle-collisions/\n *\n * @extends Component\n */\n\nvar Collider = (function (_Component) {\n\tfunction Collider() {\n\t\t_babelHelpers.classCallCheck(this, Collider);\n\n\t\tComponent.call(this);\n\t\tthis.trigger = false;\n\t\tthis.include = \"\";\n\t\tthis.exclude = \"\";\n\t}\n\n\t_babelHelpers.inherits(Collider, _Component);\n\n\t_babelHelpers.createClass(Collider, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\ttrigger: false,\n\t\t\t\t\tinclude: \"\",\n\t\t\t\t\texclude: \"\"\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Collider;\n})(Component);\n\n;\n\nvar p = Vec2();\nvar n = Vec2();\nvar cache = Vec2();\nvar pCache = Vec2();\nvar nCache = Vec2();\n\nCollider.simulate = function (dt) {\n\tvar colliders = this.registry.instances;\n\tvar i = colliders.length;\n\twhile (i--) {\n\t\tvar collider1 = colliders[i];\n\t\tif (!collider1.enabled) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar j = i;\n\t\twhile (j-- && collider1.enabled) {\n\t\t\tvar collider2 = colliders[j];\n\t\t\tif (!collider2.enabled) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar entity1 = collider1.entity;\n\t\t\tvar entity2 = collider2.entity;\n\t\t\tvar body1 = entity1.components.body;\n\t\t\tvar body2 = entity2.components.body;\n\t\t\tif (!body1.awake && !body2.awake) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar include1 = collider1.include;\n\t\t\tvar exclude1 = collider1.exclude;\n\t\t\tvar include2 = collider2.include;\n\t\t\tvar exclude2 = collider2.exclude;\n\t\t\tif (include1 && !entity2.hasComponent(include1) || include2 && !entity1.hasComponent(include2) || exclude1 && entity2.hasComponent(exclude1) || exclude2 && entity1.hasComponent(exclude2)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar radius1 = entity1.components.bounds.radius;\n\t\t\tvar radius2 = entity2.components.bounds.radius;\n\t\t\tvar pos1 = entity1.components.transform.position;\n\t\t\tvar pos2 = entity2.components.transform.position;\n\t\t\tvar radiusSum = radius1 + radius2;\n\n\t\t\tvar overlapSq = Vec2.distSq(pos1, pos2);\n\t\t\tif (overlapSq > radiusSum * radiusSum) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tVec2.norm(Vec2.sub(pos1, pos2, p));\n\t\t\tvar overlap = Math.sqrt(overlapSq);\n\n\t\t\tif (collider1.trigger || collider2.trigger) {\n\t\t\t\tvar triggerEvent = Event.create(\"trigger\");\n\t\t\t\ttriggerEvent.normal = p;\n\t\t\t\ttriggerEvent.overlap = overlap;\n\t\t\t\ttriggerEvent.other = entity2;\n\t\t\t\tentity1.emit(triggerEvent);\n\n\t\t\t\ttriggerEvent = Event.create(\"trigger\");\n\t\t\t\ttriggerEvent.normal = p;\n\t\t\t\ttriggerEvent.overlap = overlap;\n\t\t\t\ttriggerEvent.other = entity1;\n\t\t\t\tentity2.emit(triggerEvent);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\toverlap -= radiusSum;\n\t\t\tvar vel1 = body1.velocity;\n\t\t\tvar vel2 = body2.velocity;\n\t\t\tvar mass1 = body1.mass || 1;\n\t\t\tvar mass2 = body2.mass || 1;\n\n\t\t\tif (overlap < 0) {\n\t\t\t\tVec2.add(pos1, Vec2.scale(p, -overlap * 2 * radius1 / radiusSum, cache));\n\t\t\t\tVec2.add(pos2, Vec2.scale(p, overlap * 2 * radius2 / radiusSum, cache));\n\t\t\t}\n\n\t\t\t// normal vector to collision direction\n\t\t\tVec2.perp(p, n);\n\n\t\t\tvar vp1 = Vec2.dot(vel1, p); // velocity of P1 along collision direction\n\t\t\tvar vn1 = Vec2.dot(vel1, n); // velocity of P1 normal to collision direction\n\t\t\tvar vp2 = Vec2.dot(vel2, p); // velocity of P2 along collision direction\n\t\t\tvar vn2 = Vec2.dot(vel2, n); // velocity of P2 normal to collision\n\n\t\t\t// fully elastic collision (energy & momentum preserved)\n\t\t\tvar vp1After = (mass1 * vp1 + mass2 * (2 * vp2 - vp1)) / (mass1 + mass2);\n\t\t\tvar vp2After = (mass1 * (2 * vp1 - vp2) + mass2 * vp2) / (mass1 + mass2);\n\n\t\t\tVec2.add(Vec2.scale(p, vp1After, pCache), Vec2.scale(n, vn1, nCache), vel1);\n\t\t\tVec2.add(Vec2.scale(p, vp2After, pCache), Vec2.scale(n, vn2, nCache), vel2);\n\n\t\t\tvar collideEvent = Event.create(\"collide\");\n\t\t\tcollideEvent.normal = n;\n\t\t\tcollideEvent.other = entity2;\n\t\t\tentity1.emit(collideEvent, this);\n\n\t\t\tcollideEvent = Event.create(\"collide\");\n\t\t\tcollideEvent.normal = n;\n\t\t\tcollideEvent.other = entity1;\n\t\t\tentity2.emit(collideEvent, this);\n\t\t}\n\t}\n};\n\nComponent.create(Collider, \"collider\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n/**\n * Initialize from Color array or RGBA. Returns a new (typed) array.\n * @class\n * @classdesc Representation of RGBA colors.\n * @param {Number[]|null} fromOrR Array or red-value\n * @param {Number|null} g Green-value\n * @param {Number|null} b Blue-value\n * @param {Number|null} a Alpha-value\n * @returns {Number[]} new Float32Array [r, g, b, a]\n */\nmodule.exports = Color;\n\nvar clamp = __webpack_require__(1).clamp;\n\nvar random = __webpack_require__(2).random;\n\nvar Tweens = _babelHelpers.interopRequire(__webpack_require__(24));\n\nfunction Color(fromOrR, g, b, a) {\n\tif (g != null) {\n\t\treturn new Float32Array([fromOrR, g, b, a != null ? a : 1]);\n\t}\n\tif (fromOrR != null) {\n\t\treturn new Float32Array([fromOrR[0], fromOrR[1], fromOrR[2], fromOrR[3] != null ? fromOrR[3] : 1]);\n\t}\n\treturn new Float32Array(Color.white);\n}\n\nColor.white = Color(255, 255, 255);\nColor.black = Color(0, 0, 0);\nColor.gray = Color(128, 128, 128);\nColor.cache = [Color(), Color(), Color(), Color()];\n\n/**\n * Set result from color values\n * @memberOf Color\n * @param {Number[]} result Color to mutate\n * @param {Number} r\n * @param {Number} g\n * @param {Number} b\n * @param {Number} a\n * @return {Number[]} result\n */\nColor.set = function (result, r, g, b, a) {\n\tresult[0] = r || 0;\n\tresult[1] = g || 0;\n\tresult[2] = b || 0;\n\tresult[3] = a || 0;\n\treturn result;\n};\n\n/**\n * Copy to result from other color\n * @param {Number[]} result Target\n * @param {Number[]} b Source\n * @return {Number[]}\n */\nColor.copy = function (result, b) {\n\tresult[0] = b[0];\n\tresult[1] = b[1];\n\tresult[2] = b[2];\n\tresult[3] = b[3];\n\treturn result;\n};\n\nColor.lerp = function (a, b, t, alpha, result) {\n\tresult = result || a;\n\tresult[0] = (1 - t) * a[0] + t * b[0];\n\tresult[1] = (1 - t) * a[1] + t * b[1];\n\tresult[2] = (1 - t) * a[2] + t * b[2];\n\tif (alpha > 0.05) {\n\t\tresult[3] = (1 - t) * a[3] + t * b[3];\n\t} else {\n\t\tresult[3] = a[3];\n\t}\n\treturn result;\n};\n\nColor.toHex = function (a) {\n\tconsole.log(a[0], a[1], a[2]);\n\treturn (a[0] * 255 << 16) + (a[1] * 255 << 8) + (a[2] * 255 << 0);\n};\n\nColor.lerpList = function (result, list, t, ease) {\n\tvar last = list.length - 1;\n\tt = clamp(t * last, 0, last);\n\tvar start = t | 0;\n\tvar sub = (ease || Tweens.linear)(t - start);\n\tif (sub < 0.02) {\n\t\treturn Color.copy(result, list[start]);\n\t}\n\tif (sub > 0.98) {\n\t\treturn Color.copy(result, list[start + 1]);\n\t}\n\treturn Color.lerp(list[start], list[start + 1], sub, null, result);\n};\n\nColor.variant = function (a, t, result) {\n\tt = random(-t, t);\n\treturn Color.lerp(a, t > 0 ? Color.white : Color.black, t, false, result);\n};\n\nColor.rgba = function (a, alpha) {\n\tif (alpha == null) {\n\t\talpha = a[3];\n\t}\n\tif (alpha > 0.98) {\n\t\treturn \"rgb(\" + (a[0] | 0) + \", \" + (a[1] | 0) + \", \" + (a[2] | 0) + \")\";\n\t}\n\treturn \"rgba(\" + (a[0] | 0) + \", \" + (a[1] | 0) + \", \" + (a[2] | 0) + \", \" + alpha + \")\";\n};\n\nColor.defineProperty = function (cls, name) {\n\tvar prop = \"_\" + name;\n\tObject.defineProperty(cls.prototype, name, {\n\t\tget: function get() {\n\t\t\treturn this[prop];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis[prop][0] = value[0];\n\t\t\tthis[prop][1] = value[1];\n\t\t\tthis[prop][2] = value[2];\n\t\t\tthis[prop][3] = value[3];\n\t\t}\n\t});\n\tvar copy = \"copy\" + name.charAt(0).toUpperCase() + name.slice(1);\n\tcls.prototype[copy] = function (result) {\n\t\tresult[0] = this[prop][0];\n\t\tresult[1] = this[prop][1];\n\t\tresult[2] = this[prop][2];\n\t\tresult[3] = this[prop][3];\n\t};\n};\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar _core = __webpack_require__(28)[\"default\"];\n\n/** @flow */\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar _entity = __webpack_require__(13);\n\nvar Entity = _babelHelpers.interopRequire(_entity);\n\nvar ComponentMap = _entity.ComponentMap;\n\nvar emptyEntity = new Entity();\nvar emptyComponentMap = new ComponentMap();\n\n/**\n * @class Component\n * Encapsulated behaviours that can be attached to entities.\n *\n * @abstract\n * @property {Boolean} enabled False when disabled or not allocated. Never act on disabled components!\n * @property {Entity} parent Container entity\n * @property {Entity} root Scene entity\n */\n\nvar Component = (function () {\n\tfunction Component() {\n\t\t_babelHelpers.classCallCheck(this, Component);\n\n\t\tthis.uid = 0;\n\t\tthis.enabled = false;\n\t\tthis.allocated = false;\n\t\tthis.destroyed = false;\n\t\tthis.entity = emptyEntity;\n\t\tthis.parent = emptyEntity;\n\t\tthis.root = emptyEntity;\n\t\tthis.components = emptyComponentMap;\n\t\tthis.listenersRef = new _core.Set();\n\t}\n\n\t_babelHelpers.createClass(Component, {\n\t\ttoString: {\n\n\t\t\t/**\n    * Brief summary.\n    * @private\n    * @return {String}\n    */\n\n\t\t\tvalue: function toString() {\n\t\t\t\treturn \"\" + this.type + \" #\" + this.uid + \" [^ \" + this.entity + \"]\";\n\t\t\t}\n\t\t},\n\t\tallocate: {\n\n\t\t\t/**\n    * Allocate Component.\n    * @private\n    */\n\n\t\t\tvalue: function allocate() {\n\t\t\t\tvar entity = this.parent;\n\t\t\t\tvar components = entity.components;\n\t\t\t\tif (components.types.has(this.type)) {\n\t\t\t\t\tthrow new Error(\"Component \" + this.type + \" already allocated for \" + entity);\n\t\t\t\t}\n\t\t\t\tcomponents[this.type] = this;\n\t\t\t\tcomponents.types.add(this.type);\n\t\t\t\tthis.components = components;\n\t\t\t\tthis.entity = entity;\n\t\t\t\tthis.create();\n\t\t\t\tvar event = Event.create(this.type + \"Create\");\n\t\t\t\tevent.aggregate = true;\n\t\t\t\tevent.cancelable = true;\n\t\t\t\tthis.emit(event);\n\t\t\t}\n\t\t},\n\t\tdestroy: {\n\n\t\t\t/**\n    * Destroy Component, removes it from {@link Entity}.\n    */\n\n\t\t\tvalue: function destroy() {\n\t\t\t\tif (this.destroyed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.destroyed = true;\n\t\t\t\tvar event = Event.create(this.type + \"Destroy\");\n\t\t\t\tevent.aggregate = true;\n\t\t\t\tevent.cancelable = false;\n\t\t\t\tthis.emit(event);\n\t\t\t\tthis.enabled = false;\n\t\t\t\tthis.registry.destroy(this);\n\t\t\t}\n\t\t},\n\t\tdeallocate: {\n\n\t\t\t/**\n    * Free destroyed Component.\n    * @private\n    */\n\n\t\t\tvalue: function deallocate() {\n\t\t\t\tif (!this.allocated) {\n\t\t\t\t\tthrow new Error(\"Component already deallocated\");\n\t\t\t\t}\n\t\t\t\tthis.allocated = false;\n\t\t\t\tthis.destroyed = false;\n\t\t\t\tthis.free();\n\t\t\t\tvar refs = this.listenersRef;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(refs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar ref = _step.value;\n\n\t\t\t\t\t\tif (ref.allocated) {\n\t\t\t\t\t\t\tref.off(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trefs.clear();\n\t\t\t\tthis.components[this.type] = null;\n\t\t\t\tthis.components.types[\"delete\"](this.type);\n\t\t\t\t// Clear reference to entity.components\n\t\t\t\tthis.components = emptyComponentMap;\n\t\t\t\tthis.entity = emptyEntity;\n\t\t\t\tthis.root = emptyEntity;\n\t\t\t\tthis.parent = emptyEntity;\n\t\t\t}\n\t\t},\n\t\tfree: {\n\t\t\tvalue: function free() {}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create() {}\n\t\t},\n\t\tenable: {\n\t\t\tvalue: function enable(state) {\n\t\t\t\tif (state == null) {\n\t\t\t\t\tstate = !this.enabled;\n\t\t\t\t}\n\t\t\t\tthis.emit(Event.create(\"component\" + (state ? \"Enable\" : \"Disable\")));\n\t\t\t\tthis.enabled = state;\n\t\t\t}\n\t\t},\n\t\temit: {\n\t\t\tvalue: function emit(event, detail) {\n\t\t\t\treturn this.entity.emit(event, this, detail);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tcreate: {\n\t\t\tvalue: function create(cls, type) {\n\t\t\t\tvar proto = cls.prototype;\n\t\t\t\tif (!Component.prototype.isPrototypeOf(proto)) {\n\t\t\t\t\t(function () {\n\t\t\t\t\t\tvar descriptors = {};\n\t\t\t\t\t\t_core.Object.getOwnPropertyNames(proto).forEach(function (name) {\n\t\t\t\t\t\t\tdescriptors[name] = _core.Object.getOwnPropertyDescriptor(proto, name);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (type != null) {\n\t\t\t\t\t\t\tdescriptors.type = {\n\t\t\t\t\t\t\t\tvalue: type\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcls.prototype = Object.create(Component.prototype, descriptors);\n\t\t\t\t\t\tcls.prototype.constructor = cls;\n\t\t\t\t\t})();\n\t\t\t\t} else if (type) {\n\t\t\t\t\tproto.type = type;\n\t\t\t\t} else {\n\t\t\t\t\ttype = proto.type;\n\t\t\t\t}\n\t\t\t\tComponentMap.types.add(proto.type);\n\t\t\t\tRegistry.create(cls);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Component;\n})();\n\nmodule.exports = Component;\n\nComponent.prototype.type = \"component\";\n\n// override me\n\n// override me\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\n/** @flow weak */\n\nvar Component = __webpack_require__(10);\n\nvar Console = (function (_Component) {\n\tfunction Console() {\n\t\t_babelHelpers.classCallCheck(this, Console);\n\n\t\tComponent.call(this);\n\t\tthis.css = \"\";\n\t\tthis.container = null;\n\t\tthis.graphStyle = false;\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t\tthis.cap = 0;\n\t\tthis.resolution = 0;\n\t}\n\n\t_babelHelpers.inherits(Console, _Component);\n\n\t_babelHelpers.createClass(Console, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tcss: \"\",\n\t\t\t\t\tcontainer: null,\n\t\t\t\t\tgraphStyle: true,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 56,\n\t\t\t\t\tcap: 50,\n\t\t\t\t\tresolution: 0.2\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tthis.reset();\n\n\t\t\t\tvar wrapCss = \"position: fixed;\" + \"transform: translateZ(0);\" + \"left: 0;\" + \"top: 0;\" + \"user-select: none;\" + \"overflow: hidden;\" + \"padding: 0;\" + \"width: \" + this.width + \"px;\" + \"color: #ccc;\" + \"background-color: rgba(0, 0, 0, 1);\" + \"outline: 1px solid rgba(128, 128, 128, 0.5);\" + \"font: 400 9px/20px Helvetica,Arial,sans-serif;\" + \"text-align: right;\" + \"text-shadow: 1px 1px 0 rgba(0, 0, 0, 1), 0 0 1px rgba(0, 0, 0, 1);\" + \"cursor: ns-resize;\" + this.css;\n\t\t\t\tvar panelCss = \"width: 50%;\" + \"overflow: hidden;\" + \"display: inline-block;\" + \"-moz-box-sizing: border-box;\" + \"-webkit-box-sizing: border-box;\" + \"box-sizing: border-box;\" + \"z-index: 2;\";\n\t\t\t\tvar spanSmallCss = \"display: inline-block;\" + \"width: 38%;\" + \"padding-right: 3px;\" + \"-moz-box-sizing: border-box;\" + \"-webkit-box-sizing: border-box;\" + \"box-sizing: border-box;\";\n\t\t\t\tvar spanCss = spanSmallCss + \"width: 62%;\" + \"font-weight: bold;\" + \"font-size: 12px;\";\n\n\t\t\t\tif (this.graphStyle) {\n\t\t\t\t\tpanelCss += \"position: absolute;\" + \"top: 0;\" + \"left: 0;\";\n\t\t\t\t} else {\n\t\t\t\t\twrapCss += \"height: 20px;\";\n\t\t\t\t}\n\n\t\t\t\tvar wrap = this.wrap = document.createElement(\"div\");\n\t\t\t\twrap.id = \"console\";\n\t\t\t\twrap.style.cssText = wrapCss;\n\n\t\t\t\tthis.fpsSpan = document.createElement(\"span\");\n\t\t\t\tthis.fpsSpan.style.cssText = spanCss;\n\t\t\t\tthis.fpsSpan.title = \"FPS\";\n\t\t\t\tthis.fpsSpan2 = document.createElement(\"span\");\n\t\t\t\tthis.fpsSpan2.style.cssText = spanSmallCss;\n\t\t\t\tthis.tickSpan = document.createElement(\"span\");\n\t\t\t\tthis.tickSpan.style.cssText = spanCss;\n\t\t\t\tthis.tickSpan.title = \"MS per tick\";\n\t\t\t\tthis.tickSpan2 = document.createElement(\"span\");\n\t\t\t\tthis.tickSpan2.style.cssText = spanSmallCss;\n\t\t\t\tthis.fpsSpan2.title = this.tickSpan2.title = \"± standard deviation\";\n\n\t\t\t\tvar panel = document.createElement(\"span\");\n\t\t\t\tpanel.style.cssText = panelCss;\n\t\t\t\tpanel.appendChild(this.fpsSpan);\n\t\t\t\tpanel.appendChild(this.fpsSpan2);\n\t\t\t\twrap.appendChild(panel);\n\n\t\t\t\tpanel = document.createElement(\"span\");\n\t\t\t\tpanel.style.cssText = panelCss + \"left: 50%;\";\n\t\t\t\tpanel.appendChild(this.tickSpan);\n\t\t\t\tpanel.appendChild(this.tickSpan2);\n\t\t\t\twrap.appendChild(panel);\n\n\t\t\t\tif (this.graphStyle) {\n\t\t\t\t\tvar rulerCss = \"position: absolute;\" + \"left: 0;\" + \"width: 100%;\" + \"height: 1px;\" + \"background-color: rgba(128, 128, 128, 0.3);\";\n\n\t\t\t\t\tvar ruler = document.createElement(\"span\");\n\t\t\t\t\truler.style.cssText = rulerCss + (\"bottom: \" + this.height * 0.66 + \"px;\");\n\t\t\t\t\twrap.appendChild(ruler);\n\t\t\t\t\truler = document.createElement(\"span\");\n\t\t\t\t\truler.style.cssText = rulerCss + (\"bottom: \" + this.height * 0.33 + \"px;\");\n\t\t\t\t\twrap.appendChild(ruler);\n\n\t\t\t\t\tthis.graphSpan = document.createElement(\"div\");\n\t\t\t\t\tthis.graphSpan.style.cssText = \"height: \" + this.height + \"px;\" + \"z-index: 1;\";\n\t\t\t\t\tthis.graphSpan.title = \"Fixed Update + Update + Render + Lag\";\n\n\t\t\t\t\tvar barCss = \"width: 1px;\" + \"float: left;\" + \"margin-top: 0px;\";\n\t\t\t\t\tvar sectionCss = \"display: block;\" + \"height: 0px;\";\n\n\t\t\t\t\tvar i = this.width;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tvar bar = document.createElement(\"span\");\n\t\t\t\t\t\tbar.className = \"console-bar\";\n\t\t\t\t\t\tbar.style.cssText = barCss;\n\t\t\t\t\t\tvar sections = Console.sections;\n\t\t\t\t\t\tfor (var j = 0, l = sections.length; j < l; j++) {\n\t\t\t\t\t\t\tvar section = document.createElement(\"span\");\n\t\t\t\t\t\t\tsection.className = \"console-section\";\n\t\t\t\t\t\t\tsection.style.cssText = sectionCss + \"background-color: \" + sections[j] + \";\";\n\t\t\t\t\t\t\tbar.appendChild(section);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.graphSpan.appendChild(bar);\n\t\t\t\t\t}\n\t\t\t\t\twrap.appendChild(this.graphSpan);\n\t\t\t\t}\n\n\t\t\t\t(this.container || document.body).appendChild(wrap);\n\n\t\t\t\tthis.lastClick = 0;\n\t\t\t\twrap.addEventListener(\"click\", this);\n\n\t\t\t\tthis.maximized = ! ~(document.cookie || \"\").indexOf(\"console_max\");\n\t\t\t\tthis.toggle();\n\t\t\t}\n\t\t},\n\t\thandleEvent: {\n\t\t\tvalue: function handleEvent(evt) {\n\t\t\t\tvar time = evt.timeStamp;\n\t\t\t\tif (time - this.lastClick < 500) {\n\t\t\t\t\tthis.destroy();\n\t\t\t\t}\n\t\t\t\tthis.lastClick = time;\n\t\t\t\tthis.toggle();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttoggle: {\n\t\t\tvalue: function toggle() {\n\t\t\t\tif (!this.graphStyle) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar margin = 0;\n\t\t\t\tvar opacity = 1;\n\t\t\t\tthis.maximized = !this.maximized;\n\t\t\t\tif (!this.maximized) {\n\t\t\t\t\topacity = 0.5;\n\t\t\t\t\tmargin = -this.height + 20;\n\t\t\t\t\tdocument.cookie = \"console_max=; expires=\" + new Date().toGMTString();\n\t\t\t\t} else {\n\t\t\t\t\tdocument.cookie = \"console_max=1\";\n\t\t\t\t}\n\t\t\t\tvar style = this.graphSpan.style;\n\t\t\t\tstyle.marginTop = margin + \"px\";\n\t\t\t\tstyle.opacity = opacity;\n\t\t\t}\n\t\t},\n\t\tfree: {\n\t\t\tvalue: function free() {\n\t\t\t\t(this.container || document.body).removeChild(this.wrap);\n\t\t\t\tthis.wrap.removeEventListener(\"click\", this);\n\t\t\t\tthis.wrap = null;\n\t\t\t\tthis.container = null;\n\t\t\t}\n\t\t},\n\t\tonTimeEnd: {\n\t\t\tvalue: function onTimeEnd(event) {\n\t\t\t\tvar samples = event.detail;\n\t\t\t\tvar dt = samples.dt;\n\t\t\t\tif (!dt) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.dtSum += dt;\n\t\t\t\tvar fps = 1 / dt;\n\t\t\t\tthis.fpsSum += fps;\n\t\t\t\tthis.fpsSq += fps * fps;\n\t\t\t\tvar lag = samples.lag;\n\t\t\t\tthis.lagSum += lag;\n\t\t\t\tthis.lagSq += lag * lag;\n\t\t\t\tvar tick = samples.tick;\n\t\t\t\tthis.tickSum += tick;\n\t\t\t\tthis.tickSq += tick * tick;\n\t\t\t\tthis.updateSum += samples.update;\n\t\t\t\tthis.fixedUpdateSum += samples.fixedUpdate;\n\t\t\t\tthis.renderSum += samples.render;\n\t\t\t\tthis.frames++;\n\t\t\t\tif (this.dtSum >= this.resolution) {\n\t\t\t\t\tthis.renderGraph();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\trenderGraph: {\n\t\t\tvalue: function renderGraph() {\n\t\t\t\tvar colors = Console.colors;\n\t\t\t\tvar tickMean = this.tickSum / this.frames;\n\t\t\t\tvar tickSD = Math.sqrt((this.tickSq - this.tickSum * this.tickSum / this.frames) / (this.frames - 1));\n\n\t\t\t\tvar color = colors[0];\n\t\t\t\tif (tickMean > 33) {\n\t\t\t\t\tcolor = colors[3];\n\t\t\t\t} else if (tickMean > 16) {\n\t\t\t\t\tcolor = colors[2];\n\t\t\t\t} else if (tickMean > 5) {\n\t\t\t\t\tcolor = colors[1];\n\t\t\t\t}\n\n\t\t\t\tthis.tickSpan.textContent = tickMean < 10 ? Math.round(tickMean * 10) / 10 : Math.round(tickMean);\n\t\t\t\tthis.tickSpan.style.color = color;\n\t\t\t\tthis.tickSpan2.textContent = tickSD < 10 ? Math.round(tickSD || 0 * 10) / 10 : Math.round(tickSD);\n\n\t\t\t\tif (this.graphStyle) {\n\t\t\t\t\tvar bar = this.graphSpan.appendChild(this.graphSpan.firstChild);\n\t\t\t\t\tvar overall = 0;\n\n\t\t\t\t\tvar mag = Math.round(this.height * this.lagSum / this.frames / this.cap);\n\t\t\t\t\tbar.children[0].style.height = mag + \"px\";\n\t\t\t\t\toverall += mag;\n\n\t\t\t\t\tmag = this.height * this.renderSum / this.frames / this.cap;\n\t\t\t\t\tbar.children[1].style.height = mag + \"px\";\n\t\t\t\t\toverall += mag;\n\n\t\t\t\t\tmag = Math.round(this.height * this.updateSum / this.frames / this.cap);\n\t\t\t\t\tbar.children[2].style.height = mag + \"px\";\n\t\t\t\t\toverall += mag;\n\n\t\t\t\t\tmag = Math.round(this.height * this.fixedUpdateSum / this.frames / this.cap);\n\t\t\t\t\tbar.children[3].style.height = mag + \"px\";\n\t\t\t\t\toverall += mag;\n\n\t\t\t\t\tbar.style.marginTop = this.height - overall + \"px\";\n\t\t\t\t}\n\n\t\t\t\tvar fpsMean = this.fpsSum / this.frames;\n\t\t\t\tvar fpsSD = Math.sqrt((this.fpsSq - this.fpsSum * this.fpsSum / this.frames) / (this.frames - 1));\n\t\t\t\tif (fpsMean < 30) {\n\t\t\t\t\tcolor = colors[3];\n\t\t\t\t} else if (fpsMean < 40) {\n\t\t\t\t\tcolor = colors[2];\n\t\t\t\t} else if (fpsMean < 55) {\n\t\t\t\t\tcolor = colors[1];\n\t\t\t\t} else {\n\t\t\t\t\tcolor = colors[0];\n\t\t\t\t}\n\t\t\t\tthis.fpsSpan.textContent = Math.round(fpsMean || 0);\n\t\t\t\tthis.fpsSpan.style.color = color;\n\t\t\t\tthis.fpsSpan2.textContent = Math.round(fpsSD || 0);\n\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t},\n\t\treset: {\n\t\t\tvalue: function reset() {\n\t\t\t\tthis.dtSum = 0;\n\t\t\t\tthis.fpsSum = 0;\n\t\t\t\tthis.fpsSq = 0;\n\t\t\t\tthis.tickSum = 0;\n\t\t\t\tthis.tickSq = 0;\n\t\t\t\tthis.lagSum = 0;\n\t\t\t\tthis.lagSq = 0;\n\t\t\t\tthis.fixedUpdateSum = 0;\n\t\t\t\tthis.updateSum = 0;\n\t\t\t\tthis.renderSum = 0;\n\t\t\t\tthis.frames = 0;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Console;\n})(Component);\n\nmodule.exports = Console;\n\nConsole.colors = [\"#ddd\", \"#fff\", \"#ffc\", \"#fcc\"];\n\nConsole.sections = [\"#ffff33\", \"#ff8533\", \"#2babd6\", \"#9d2bd6\"];\n// ['#fffa5b', '#ff945b', '#5bf4ff', '#bd5bff']\n\nComponent.create(Console, \"console\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Entity = _babelHelpers.interopRequire(__webpack_require__(13));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar _shims = __webpack_require__(22);\n\nvar perf = _shims.performance;\nvar raFrame = _shims.requestAnimationFrame;\n\n/**\n * @class Context\n * Managing renderer, scene and loop\n * @extends Entity\n */\n\nvar Context = (function (_Entity) {\n\tfunction Context() {\n\t\t_babelHelpers.classCallCheck(this, Context);\n\n\t\tEntity.call(this);\n\t\tthis.running = false;\n\t\tthis.time = 0;\n\t\tthis.lastTime = 0;\n\t\tthis.frame = 0;\n\t\tthis.tail = 0;\n\t\tthis.fdtEnabled = false;\n\t\tthis.fdt = 1 / 30;\n\t\tthis.dt = 1 / 60;\n\t\tthis.maxDt = 0.5;\n\t\tthis.maxFdt = this.fdt * 5;\n\t\tthis.scale = 1;\n\t\tthis.rfa = true;\n\t\tthis.enabled = true;\n\n\t\tthis.debug = {\n\t\t\tprofile: 0,\n\t\t\tstep: false,\n\t\t\ttime: true,\n\t\t\tprofileFrom: 0\n\t\t};\n\t\tthis.samples = {\n\t\t\tdt: 0,\n\t\t\tlag: 0,\n\t\t\ttick: 0,\n\t\t\tfixedUpdate: 0,\n\t\t\tupdate: 0,\n\t\t\trender: 0\n\t\t};\n\n\t\tthis.tickBound = this.tick.bind(this);\n\n\t\tthis.element = null;\n\t\tthis.scene = null;\n\t}\n\n\t_babelHelpers.inherits(Context, _Entity);\n\n\t_babelHelpers.createClass(Context, {\n\t\tinit: {\n\t\t\tvalue: function init(element) {\n\t\t\t\tthis.element = element;\n\t\t\t\tthis.createComponent(\"input\");\n\t\t\t\tthis.createComponent(\"console\");\n\t\t\t}\n\t\t},\n\t\tplay: {\n\n\t\t\t/**\n    * Set scene and start game loop\n    * @param {Entity} scene\n    * @param {Boolean} soft\n    */\n\n\t\t\tvalue: function play(scene, soft) {\n\t\t\t\tvar prev = this.scene;\n\t\t\t\tif (prev) {\n\t\t\t\t\tprev.emit(Event.create(\"sceneEnd\", scene));\n\t\t\t\t\tprev.root = null;\n\t\t\t\t\tif (soft) {\n\t\t\t\t\t\tprev.enable(false, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscene.root = this;\n\t\t\t\tthis.scene = scene;\n\t\t\t\tthis.scene.emit(Event.create(\"sceneStart\", prev));\n\t\t\t\tthis.start();\n\t\t\t}\n\t\t},\n\t\tstart: {\n\n\t\t\t/**\n    * Start loop\n    */\n\n\t\t\tvalue: function start() {\n\t\t\t\tif (this.running) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.running = true;\n\t\t\t\tthis.emit(Event.create(\"contextStart\"));\n\t\t\t\traFrame(this.tickBound);\n\t\t\t}\n\t\t},\n\t\tpause: {\n\t\t\tvalue: function pause() {\n\t\t\t\tif (!this.running) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.emit(Event.create(\"contextPause\"));\n\t\t\t\tthis.running = false;\n\t\t\t}\n\t\t},\n\t\ttick: {\n\n\t\t\t/**\n    * Game loop tick, called by requestAnimationFrame\n    *\n    * @param {Number} time Delta time\n    */\n\n\t\t\tvalue: function tick(time) {\n\t\t\t\t// Time value in seconds\n\t\t\t\ttime = (time != null && time < 1000000000000 ? time : perf.now()) / 1000;\n\t\t\t\tthis.time = time;\n\t\t\t\t// rfa here to be less error prone\n\n\t\t\t\tvar i = 0;\n\t\t\t\tvar l = 0;\n\t\t\t\tvar methods = [];\n\t\t\t\tvar debug = this.debug;\n\t\t\t\tvar samples = this.hasEvent(\"onTimeEnd\") ? this.samples : null;\n\t\t\t\tvar pong = 0;\n\n\t\t\t\tif (this.lastTime) {\n\t\t\t\t\tvar dt = time - this.lastTime;\n\t\t\t\t\tif (dt > this.maxDt || dt <= 0) {\n\t\t\t\t\t\tdt = this.dt;\n\t\t\t\t\t} else if (dt > 0.01 && samples != null) {\n\t\t\t\t\t\tsamples.dt = dt;\n\t\t\t\t\t\tvar lag = time - samples.next;\n\t\t\t\t\t\tif (lag > 0) {\n\t\t\t\t\t\t\tsamples.lag = lag * 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.dt = dt *= this.scale;\n\t\t\t\t\tthis.frame++;\n\n\t\t\t\t\tif (debug.profile && !debug.profileFrom) {\n\t\t\t\t\t\tdebug.profileFrom = debug.profile;\n\t\t\t\t\t\tconsole.profile(\"Frame \" + debug.profileFrom);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar ping = samples != null ? perf.now() : 0;\n\t\t\t\t\tvar pingTick = ping;\n\n\t\t\t\t\t// Invoke fixed updates\n\t\t\t\t\tvar fdt = this.fdtEnabled ? this.fdt : dt;\n\t\t\t\t\tvar tail = Math.min(this.tail + dt, this.maxFdt * this.scale);\n\t\t\t\t\twhile (tail >= fdt) {\n\t\t\t\t\t\ttail -= fdt;\n\t\t\t\t\t\tvar fixedUpdates = Registry.methods.fixedUpdate;\n\t\t\t\t\t\tfor (i = 0, l = fixedUpdates.length; i < l; i++) {\n\t\t\t\t\t\t\tif (fixedUpdates[i].enabled) {\n\t\t\t\t\t\t\t\tfixedUpdates[i].fixedUpdate(fdt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar simulates = Registry.methods.simulate;\n\t\t\t\t\t\tfor (i = 0, l = simulates.length; i < l; i++) {\n\t\t\t\t\t\t\tif (simulates[i].enabled) {\n\t\t\t\t\t\t\t\tsimulates[i].simulate(fdt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.tail = tail;\n\n\t\t\t\t\tif (samples != null) {\n\t\t\t\t\t\tpong = perf.now();\n\t\t\t\t\t\tsamples.fixedUpdate = pong - ping;\n\t\t\t\t\t\tping = pong;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Invoke update\n\t\t\t\t\tvar updates = Registry.methods.update;\n\t\t\t\t\tfor (i = 0, l = updates.length; i < l; i++) {\n\t\t\t\t\t\tif (updates[i].enabled) {\n\t\t\t\t\t\t\tupdates[i].update(dt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tRegistry.free();\n\t\t\t\t\tVec2.sweep();\n\n\t\t\t\t\t// Invoke postUpdate\n\t\t\t\t\tvar postUpdates = Registry.methods.postUpdate;\n\t\t\t\t\tfor (i = 0, l = postUpdates.length; i < l; i++) {\n\t\t\t\t\t\tif (postUpdates[i].enabled) {\n\t\t\t\t\t\t\tpostUpdates[i].postUpdate(dt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (samples != null) {\n\t\t\t\t\t\tpong = perf.now();\n\t\t\t\t\t\tsamples.update = pong - ping;\n\t\t\t\t\t\tping = pong;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Invoke preRender\n\t\t\t\t\tvar preRenders = Registry.methods.preRender;\n\t\t\t\t\tfor (i = 0, l = preRenders.length; i < l; i++) {\n\t\t\t\t\t\tif (preRenders[i].enabled) {\n\t\t\t\t\t\t\tpreRenders[i].preRender(dt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar ctx = this.renderer.save();\n\t\t\t\t\t// Invoke render\n\t\t\t\t\tvar renders = Registry.methods.render;\n\t\t\t\t\tfor (i = 0, l = renders.length; i < l; i++) {\n\t\t\t\t\t\tif (renders[i].enabled) {\n\t\t\t\t\t\t\trenders[i].render(ctx);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.renderer.restore();\n\n\t\t\t\t\tif (samples != null) {\n\t\t\t\t\t\tpong = perf.now();\n\t\t\t\t\t\tsamples.render = pong - ping;\n\t\t\t\t\t\tsamples.tick = pong - pingTick;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (debug.step) {}\n\n\t\t\t\t\tif (debug.profileFrom) {\n\t\t\t\t\t\tif (! --debug.profile) {\n\t\t\t\t\t\t\tconsole.profileEnd(\"Frame \" + debug.profileFrom);\n\t\t\t\t\t\t\tdebug.profileFrom = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.lastTime = time;\n\n\t\t\t\tif (samples != null) {\n\t\t\t\t\tsamples.next = Math.max(time + 1 / 60, perf.now() / 1000);\n\t\t\t\t\tvar event = Event.create(\"timeEnd\", samples);\n\t\t\t\t\tthis.emit(event, samples);\n\t\t\t\t}\n\n\t\t\t\tif (this.running) {\n\t\t\t\t\tif (this.rfa) {\n\t\t\t\t\t\traFrame(this.tickBound);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tperf.nextTick(this.tickBound);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Context;\n})(Entity);\n\n;\n\nContext.prototype.type = \"context\";\n\n// Singleton\nvar context = new Context();\n\nmodule.exports = context;\n\n// Debugging hooks\nif (typeof window != \"undefined\" && window.console) {\n\tconsole.acme = console.acme || (console.acme = {});\n\tconsole.acme.context = context;\n\tconsole.acme.profile = function (frames) {\n\t\tif (frames == null) {\n\t\t\tframes = 60;\n\t\t}\n\t\tcontext.debug.profile = frames;\n\t\treturn null;\n\t};\n\tconsole.acme.step = function () {\n\t\tcontext.debug.step = !context.debug.step;\n\t\treturn null;\n\t};\n}\n\n// debugger; // jshint ignore:line\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar _core = __webpack_require__(28)[\"default\"];\n\n/** @flow */\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nEvent.registerTypeOnly(\"enable\");\nEvent.registerTypeOnly(\"disable\");\n\n/**\n * @class Entity\n * Entities are containers that have components attached and act as event hub.\n * With parent and children, they can be organized into a hierachy\n *\n * @abstract\n * @property {Boolean} enabled False when disabled or not allocated. Never act on disabled components!\n * @property {Entity|null} parent Parent entity\n * @property {Entity|null} root Scene entity\n */\n\nvar Entity = (function () {\n\tfunction Entity() {\n\t\t_babelHelpers.classCallCheck(this, Entity);\n\n\t\tthis.type = \"entity\";\n\t\tthis.uid = 0;\n\t\tthis.enabled = false;\n\t\tthis.allocated = false;\n\t\tthis.parent = null;\n\t\tthis.root = null;\n\t\tthis.components = new ComponentMap();\n\t\tthis.listeners = new _core.Map();\n\t\tthis.listenersRef = new _core.Set();\n\t\tthis.prefab = \"\";\n\t\tthis.next = null;\n\t\tthis.firstChild = null;\n\t}\n\n\t_babelHelpers.createClass(Entity, {\n\t\ttoString: {\n\n\t\t\t/**\n    * Brief summary\n    * @private\n    * @return {String}\n    */\n\n\t\t\tvalue: function toString() {\n\t\t\t\tvar comps = this.componentKeys.join(\", \");\n\t\t\t\tvar parent = this.parent ? \" [^ \" + this.parent + \"]\" : \"\";\n\t\t\t\treturn \"Entity \" + this.prefab + \" #\" + this.uid + \" (\" + comps + \")\" + parent;\n\t\t\t}\n\t\t},\n\t\tallocate: {\n\n\t\t\t/**\n    * Allocates entity from component/attribute hash\n    * @private\n    * @param {Object} attributes List of components and their attributes\n    * @return {Entity}\n    */\n\n\t\t\tvalue: function allocate(attributes) {\n\t\t\t\tvar parent = this.parent;\n\t\t\t\tif (parent != null) {\n\t\t\t\t\tvar last = parent.lastChild;\n\t\t\t\t\tif (last != null) {\n\t\t\t\t\t\tlast.next = this;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparent.firstChild = this;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.prefab = \"\";\n\t\t\t\tif (attributes != null) {\n\t\t\t\t\tfor (var type in attributes) {\n\t\t\t\t\t\tthis.createComponent(type, attributes[type]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcreateComponent: {\n\n\t\t\t/**\n    * Add {@link Component} to Entity\n    * @param {String} type Component type\n    * @param  {Object} attributes (optional) Override component attributes\n    * @return {Component}\n    */\n\n\t\t\tvalue: function createComponent(type, attributes) {\n\t\t\t\tvar registry = Registry.types[type];\n\t\t\t\tif (registry == null) {\n\t\t\t\t\tthrow new Error(\"Unknown component \\\"\" + type + \"\\\" for \" + this);\n\t\t\t\t}\n\t\t\t\treturn registry.allocate(this, attributes);\n\t\t\t}\n\t\t},\n\t\tcreateChild: {\n\n\t\t\t/**\n    * Add new Entity as child\n    * @param {String|Object} prefabId {@link Prefab} ID or prefab attribute object\n    * @param {Object} attributes (optional) Override {@link Prefab} attributes\n    * @return {Entity}\n    */\n\n\t\t\tvalue: function createChild(prefabId, attributes) {\n\t\t\t\tif (typeof prefabId == \"string\") {\n\t\t\t\t\treturn Prefab.create(prefabId, this, attributes);\n\t\t\t\t}\n\t\t\t\treturn Entity.create(this, prefabId);\n\t\t\t}\n\t\t},\n\t\thasComponent: {\n\n\t\t\t/**\n    * Match Entity against a list of {@link Component} types.\n    * @param {Array|String} selector {@link Component} type(s)\n    * @return {Boolean}\n    */\n\n\t\t\tvalue: function hasComponent(selector) {\n\t\t\t\treturn this.components.types.has(selector);\n\t\t\t}\n\t\t},\n\t\thasComponents: {\n\t\t\tvalue: function hasComponents(selectors) {\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar selector = _step.value;\n\n\t\t\t\t\t\tif (!this.components.types.has(selector[i])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\tlastChild: {\n\t\t\tget: function () {\n\t\t\t\tvar previous = this.firstChild;\n\t\t\t\tif (previous != null) {\n\t\t\t\t\twhile (previous.next != null) {\n\t\t\t\t\t\tprevious = previous.next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn previous;\n\t\t\t}\n\t\t},\n\t\tdestroy: {\n\n\t\t\t/**\n    * Destroy Entity, including children and components.\n    */\n\n\t\t\tvalue: function destroy() {\n\t\t\t\tif (this.destroyed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.destroyed = true;\n\t\t\t\tthis.enabled = false;\n\t\t\t\tthis.registry.destroy(this);\n\t\t\t\tvar types = this.components.types;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar type = _step.value;\n\n\t\t\t\t\t\tthis.components[type].destroy();\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar child = this.firstChild;\n\t\t\t\twhile (child) {\n\t\t\t\t\tchild.destroy();\n\t\t\t\t\tchild = child.next;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremoveChild: {\n\t\t\tvalue: function removeChild(entity) {\n\t\t\t\tvar child = this.firstChild;\n\t\t\t\tvar prev = null;\n\t\t\t\twhile (child) {\n\t\t\t\t\tif (child == entity) {\n\t\t\t\t\t\tif (prev == null) {\n\t\t\t\t\t\t\tthis.firstChild = child.next;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprev.next = child.next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchild.next = null;\n\t\t\t\t\t\tchild.parent = null;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tprev = child;\n\t\t\t\t\tchild = child.next;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tdeallocate: {\n\n\t\t\t/**\n    * Free destroyed Entity.\n    * @private\n    */\n\n\t\t\tvalue: function deallocate() {\n\t\t\t\t// Remove referenced subscribers\n\t\t\t\tvar refs = this.listenersRef;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(refs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar ref = _step.value;\n\n\t\t\t\t\t\tif (ref.allocated) {\n\t\t\t\t\t\t\tref.off(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trefs.clear();\n\n\t\t\t\t// Remove own subscribers\n\t\t\t\tthis.listeners.clear();\n\n\t\t\t\t// Eager deallocate\n\t\t\t\tvar child = this.firstChild;\n\t\t\t\tthis.firstChild = null;\n\t\t\t\tvar next = null;\n\t\t\t\twhile (child != null) {\n\t\t\t\t\tnext = child.next;\n\t\t\t\t\tchild.next = null;\n\t\t\t\t\tchild = next;\n\t\t\t\t}\n\n\t\t\t\tvar parent = this.parent;\n\t\t\t\tif (parent != null) {\n\t\t\t\t\tparent.removeChild(this);\n\t\t\t\t}\n\t\t\t\tthis.allocated = false;\n\t\t\t\tthis.destroyed = false;\n\t\t\t\tthis.root = null;\n\t\t\t\tthis.parent = null;\n\t\t\t}\n\t\t},\n\t\tenable: {\n\t\t\tvalue: function enable(state, deep) {\n\t\t\t\tif (state == null) {\n\t\t\t\t\tstate = !this.enabled;\n\t\t\t\t}\n\t\t\t\tthis.emit(Event.create(state ? \"enable\" : \"disable\"));\n\t\t\t\tthis.enabled = state;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(this.components.types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar type = _step.value;\n\n\t\t\t\t\t\tthis.components[type].enable(state, true);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (deep) {\n\t\t\t\t\tvar child = this.firstChild;\n\t\t\t\t\twhile (child != null) {\n\t\t\t\t\t\tchild.enable(state, true);\n\t\t\t\t\t\tchild = child.next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thasEvent: {\n\n\t\t\t/**\n    * Has subscriber\n    * @param {String} event Event name to listenerscribe to 'on*'\n    */\n\n\t\t\tvalue: function hasEvent(name) {\n\t\t\t\treturn this.listeners.has(name);\n\t\t\t}\n\t\t},\n\t\ton: {\n\n\t\t\t/**\n    * Subscribe to event messages\n    * @param {Entity|null} scope Target Entity for listenerscription\n    * @param {String} name Event name to listenerscribe to 'on*'\n    * @param {String} method (optional) Local method name to call, defaults to event name\n    */\n\n\t\t\tvalue: function on(scope, name, method) {\n\t\t\t\tif (scope == null) {\n\t\t\t\t\tscope = this;\n\t\t\t\t}\n\t\t\t\tif (!this.listeners.has(name)) {\n\t\t\t\t\tthis.listeners.set(name, []);\n\t\t\t\t}\n\t\t\t\tthis.listeners.get(name).push(scope, method);\n\t\t\t\tif (scope != this) {\n\t\t\t\t\tscope.listenersRef.add(this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\temit: {\n\n\t\t\t/**\n    * Publish a event message for this entity and it's parents\n    * @param {String} event\n    */\n\n\t\t\tvalue: function emit(type, component, detail) {\n\t\t\t\tvar event = typeof type == \"string\" ? Event.create(type) : type;\n\t\t\t\tvar entity = this;\n\t\t\t\tevent.entity = entity;\n\t\t\t\tif (component != null) {\n\t\t\t\t\tevent.component = component;\n\t\t\t\t}\n\t\t\t\tif (detail != null) {\n\t\t\t\t\tevent.detail = detail;\n\t\t\t\t}\n\t\t\t\tvar handler = event.handler;\n\t\t\t\tif (event.aggregate) {\n\t\t\t\t\tRegistry.call(handler, event);\n\t\t\t\t} else {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (entity.enabled && entity.listeners.has(handler)) {\n\t\t\t\t\t\t\t// Invoke\n\t\t\t\t\t\t\tvar listeners = entity.listeners.get(handler);\n\t\t\t\t\t\t\tvar _i = listeners.length;\n\t\t\t\t\t\t\twhile ((_i -= 2) >= 0) {\n\t\t\t\t\t\t\t\tvar listener = listeners[_i];\n\t\t\t\t\t\t\t\tif (listener != null && listener.enabled) {\n\t\t\t\t\t\t\t\t\tlistener[listeners[_i + 1] || handler](event);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (event.stopped) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!event.bubbles) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tentity = entity.parent || entity.root; // Context.scene has .root\n\t\t\t\t\t} while (entity);\n\t\t\t\t}\n\t\t\t\tvar canceled = event.canceled;\n\t\t\t\tevent.destroy();\n\t\t\t\treturn !canceled;\n\t\t\t}\n\t\t},\n\t\toff: {\n\n\t\t\t/**\n    * Unsubscribe scope from event\n    * @param {Entity|Component} unscope (optional) Subscriber scope to remove\n    */\n\n\t\t\tvalue: function off(unscope) {\n\t\t\t\tvar listeners = this.listeners;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(listeners), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar items = _step.value;\n\n\t\t\t\t\t\tvar _i = items.length;\n\t\t\t\t\t\tvar _length = _i / 2;\n\t\t\t\t\t\twhile ((_i -= 2) >= 0) {\n\t\t\t\t\t\t\tif (items[_i] != null && (!unscope || unscope === items[_i])) {\n\t\t\t\t\t\t\t\titems[_i] = null;\n\t\t\t\t\t\t\t\t_length--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_length === 0) {\n\t\t\t\t\t\t\tlisteners[\"delete\"](name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tcreate: {\n\t\t\tvalue: function create(parent, attributes) {\n\t\t\t\treturn Entity.registry.allocate(parent, attributes);\n\t\t\t}\n\t\t},\n\t\tcreatePrefab: {\n\t\t\tvalue: function createPrefab(id, components) {\n\t\t\t\treturn new Prefab(id, components);\n\t\t\t}\n\t\t},\n\t\treset: {\n\t\t\tvalue: function reset() {\n\t\t\t\tPrefab.byId = {};\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Entity;\n})();\n\nexports[\"default\"] = Entity;\n\nEntity.prototype.type = \"entity\";\nRegistry.create(Entity);\n\n/**\n * @class\n * @constructor\n * @param {String} id Prefab Id\n * @param {Object} components Default attributes\n */\n\nvar Prefab = exports.Prefab = (function () {\n\tfunction Prefab(id, components) {\n\t\t_babelHelpers.classCallCheck(this, Prefab);\n\n\t\tthis.id = id;\n\t\tPrefab.byId[this.id] = this;\n\t\tthis.components = components;\n\t\tthis.types = new _core.Set();\n\t\tthis.subKeys = {};\n\t\tfor (var type in components) {\n\t\t\tthis.types.add(type);\n\t\t\tif (components[type] == null) {\n\t\t\t\tcomponents[type] = {};\n\t\t\t}\n\t\t\tthis.subKeys[type] = _core.Object.keys(components[type]);\n\t\t}\n\t}\n\n\t_babelHelpers.createClass(Prefab, {\n\t\tcreate: {\n\n\t\t\t/**\n    * Allocate {@link Entity} from Prefab\n    * @param {Entity} parent Parent entity\n    * @param {Object} components Override prefab components\n    * @return {Entity}\n    */\n\n\t\t\tvalue: function create(parent, components) {\n\t\t\t\tvar entity = Entity.create(parent, components == null ? this.components : null);\n\t\t\t\tentity.prefab = this.id;\n\t\t\t\tif (components != null) {\n\t\t\t\t\tvar keys = _core.Object.getOwnPropertyNames(components);\n\t\t\t\t\tvar types = this.types;\n\t\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\t\tvar _didIteratorError = false;\n\t\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\t\tvar type = _step.value;\n\n\t\t\t\t\t\t\tvar defaults = this.components[type];\n\t\t\t\t\t\t\tvar overrides = defaults;\n\t\t\t\t\t\t\tvar idx = keys.indexOf(type);\n\t\t\t\t\t\t\tif (idx != -1) {\n\t\t\t\t\t\t\t\tkeys[idx] = null;\n\t\t\t\t\t\t\t\toverrides = components[type];\n\t\t\t\t\t\t\t\tvar subKeys = this.subKeys[type];\n\t\t\t\t\t\t\t\tvar k = subKeys.length;\n\t\t\t\t\t\t\t\tif (k > 0) {\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < k; j++) {\n\t\t\t\t\t\t\t\t\t\tvar subKey = subKeys[j];\n\t\t\t\t\t\t\t\t\t\tif (overrides[subKey] === undefined) {\n\t\t\t\t\t\t\t\t\t\t\toverrides[subKey] = defaults[subKey];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tentity.createComponent(type, overrides);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t\t_iteratorError = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator2 = _core.$for.getIterator(keys), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\t\tvar key = _step2.value;\n\n\t\t\t\t\t\t\tif (key != null) {\n\t\t\t\t\t\t\t\tentity.createComponent(key, components[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2[\"return\"]) {\n\t\t\t\t\t\t\t\t_iterator2[\"return\"]();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn entity;\n\t\t\t}\n\t\t},\n\t\ttoString: {\n\n\t\t\t/**\n    * Brief summary\n    * @private\n    * @return {String}\n    */\n\n\t\t\tvalue: function toString() {\n\t\t\t\tvar comps = _core.Object.keys(this.components).join(\", \");\n\t\t\t\treturn \"Prefab #\" + this.id;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tcreate: {\n\n\t\t\t/**\n    * Allocate Prefab by Id\n    * @static\n    * @param {String} id Prefab Id\n    * @param {Entity} parent Parent entity\n    * @param {Object} components Override components\n    * @return {Entity}\n    */\n\n\t\t\tvalue: function create(id, parent, components) {\n\t\t\t\tvar prefab = Prefab.byId[id];\n\t\t\t\tif (prefab == null) {\n\t\t\t\t\tthrow new Error(\"Prefab \\\"\" + id + \"\\\" not found\");\n\t\t\t\t}\n\t\t\t\treturn prefab.create(parent, components);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Prefab;\n})();\n\n;\n\nEntity.reset();\n\nvar ComponentMap = exports.ComponentMap = (function () {\n\tfunction ComponentMap() {\n\t\t_babelHelpers.classCallCheck(this, ComponentMap);\n\n\t\tthis.types = new _core.Set();\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = _core.$for.getIterator(ComponentMap.types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar type = _step.value;\n\n\t\t\t\tthis[type] = null;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_babelHelpers.createClass(ComponentMap, {\n\t\tget: {\n\t\t\tvalue: function get(type) {\n\t\t\t\treturn this[type];\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ComponentMap;\n})();\n\nComponentMap.types = new _core.Set();\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar uid = __webpack_require__(1).uid;\n\nvar Event = (function () {\n\tfunction Event(cancelable, aggregate) {\n\t\t_babelHelpers.classCallCheck(this, Event);\n\n\t\tthis.entity = null;\n\t\tthis.component = null;\n\t\tthis.uid = uid();\n\t\tthis.bubbles = true;\n\t\tthis.aggregate = aggregate ? true : false;\n\t\tthis.cancelable = cancelable ? true : false;\n\t\tthis.timeStamp = Date.now();\n\t\tthis.canceled = false;\n\t\tthis.stopped = false;\n\t\tthis.detail = null;\n\t}\n\n\t_babelHelpers.createClass(Event, {\n\t\ttoString: {\n\t\t\tvalue: function toString() {\n\t\t\t\treturn \"Event \" + this.type + \" [\" + this.component + \" on \" + this.entity + \"]\";\n\t\t\t}\n\t\t},\n\t\tdestroy: {\n\t\t\tvalue: function destroy() {\n\t\t\t\tthis.entity = null;\n\t\t\t\tthis.component = null;\n\t\t\t\tthis.detail = null;\n\t\t\t\tthis.registry.destroy(this);\n\t\t\t}\n\t\t},\n\t\tcancel: {\n\t\t\tvalue: function cancel() {\n\t\t\t\tif (this.cancelable) {\n\t\t\t\t\tthis.cancel = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tvalue: function stop() {\n\t\t\t\tthis.stopped = true;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tcreate: {\n\t\t\tvalue: function create(type, detail) {\n\t\t\t\tvar event = Registry.create(Event.toType(type));\n\t\t\t\tif (detail != null) {\n\t\t\t\t\tevent.detail = detail;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\t\tregister: {\n\t\t\tvalue: function register(cls, type) {\n\t\t\t\ttype = Event.toType(type);\n\t\t\t\tcls.type = type;\n\t\t\t\tcls.prototype.type = type;\n\t\t\t\tcls.prototype.handler = Event.toHandler(type);\n\t\t\t\treturn new Registry(cls);\n\t\t\t}\n\t\t},\n\t\tregisterTypeOnly: {\n\t\t\tvalue: function registerTypeOnly(type) {\n\t\t\t\tvar CustomEvent = (function (_Event) {\n\t\t\t\t\tfunction CustomEvent() {\n\t\t\t\t\t\t_babelHelpers.classCallCheck(this, CustomEvent);\n\n\t\t\t\t\t\tEvent.call(this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_babelHelpers.inherits(CustomEvent, _Event);\n\n\t\t\t\t\treturn CustomEvent;\n\t\t\t\t})(Event);\n\n\t\t\t\treturn Event.register(CustomEvent, type);\n\t\t\t}\n\t\t},\n\t\ttoHandler: {\n\t\t\tvalue: function toHandler(str) {\n\t\t\t\tif (/^on/.test(str)) {\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\treturn \"on\" + str.charAt(0).toUpperCase() + str.slice(1);\n\t\t\t}\n\t\t},\n\t\ttoType: {\n\t\t\tvalue: function toType(str) {\n\t\t\t\tif (!/^on/.test(str)) {\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\treturn str.charAt(2).toLowerCase() + str.slice(3);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Event;\n})();\n\nexports[\"default\"] = Event;\n\nvar Registry = exports.Registry = (function () {\n\tfunction Registry(cls) {\n\t\t_babelHelpers.classCallCheck(this, Registry);\n\n\t\tthis.cls = cls;\n\t\tvar proto = cls.prototype;\n\t\tvar type = proto.type;\n\t\tif (Registry.types[type] != null) {\n\t\t\tthrow new Error(\"Event '\" + type + \"' is already registered\");\n\t\t}\n\t\tthis.type = type;\n\t\tRegistry.types[type] = this;\n\t\tcls.registry = this;\n\t\tproto.registry = this;\n\t\tthis.pool = [];\n\t\tthis.allocated = 0;\n\t\tthis.length = 0;\n\t}\n\n\t_babelHelpers.createClass(Registry, {\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tif (this.allocated == 0) {\n\t\t\t\t\tthis.length++;\n\t\t\t\t\treturn new this.cls();\n\t\t\t\t}\n\t\t\t\tthis.allocated--;\n\t\t\t\tvar instance = this.pool.pop();\n\t\t\t\tthis.cls.call(instance);\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t},\n\t\tdestroy: {\n\t\t\tvalue: function destroy(instance) {\n\t\t\t\tthis.allocated++;\n\t\t\t\tthis.pool.push(instance);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tcreate: {\n\t\t\tvalue: function create(type) {\n\t\t\t\tvar registry = Registry.types[type];\n\t\t\t\tif (registry == null) {\n\t\t\t\t\t// console.warn(`Event '${type}' created on demand`);\n\t\t\t\t\tregistry = Event.registerTypeOnly(type);\n\t\t\t\t}\n\t\t\t\treturn registry.create();\n\t\t\t}\n\t\t},\n\t\tdump: {\n\t\t\tvalue: function dump() {\n\t\t\t\tvar types = Registry.types;\n\t\t\t\tconsole.group(\"Events.dump\");\n\t\t\t\tfor (var type in types) {\n\t\t\t\t\tvar registry = types[type];\n\t\t\t\t\tconsole.log(\"%s: %d/%d allocated\", type, registry.length - registry.allocated, registry.length);\n\t\t\t\t}\n\t\t\t\tconsole.groupEnd(\"Events.dump\");\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Registry;\n})();\n\nRegistry.types = {};\n\nEvent.register(Event, \"event\");\n\nif (typeof window != \"undefined\" && window.console) {\n\tconsole.acme = console.acme || (console.acme = {});\n\tconsole.acme.dumpEvents = function () {\n\t\tRegistry.dump();\n\t\treturn null;\n\t};\n}\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar Event = _babelHelpers.interopRequire(__webpack_require__(14));\n\nvar onKeyBegan = (function (_Event) {\n\tfunction onKeyBegan() {\n\t\t_babelHelpers.classCallCheck(this, onKeyBegan);\n\n\t\tEvent.call(this, true, true);\n\t\tthis.key = \"\";\n\t}\n\n\t_babelHelpers.inherits(onKeyBegan, _Event);\n\n\treturn onKeyBegan;\n})(Event);\n\nEvent.register(onKeyBegan, \"keyBegan\");\n\nvar onKeyEnded = (function (_Event2) {\n\tfunction onKeyEnded() {\n\t\t_babelHelpers.classCallCheck(this, onKeyEnded);\n\n\t\tEvent.call(this, true, true);\n\t\tthis.key = \"\";\n\t}\n\n\t_babelHelpers.inherits(onKeyEnded, _Event2);\n\n\treturn onKeyEnded;\n})(Event);\n\nEvent.register(onKeyEnded, \"keyEnded\");\n\nvar onTouchBegan = (function (_Event3) {\n\tfunction onTouchBegan() {\n\t\t_babelHelpers.classCallCheck(this, onTouchBegan);\n\n\t\tEvent.call(this, true, true);\n\t\tthis.index = 0;\n\t}\n\n\t_babelHelpers.inherits(onTouchBegan, _Event3);\n\n\treturn onTouchBegan;\n})(Event);\n\nEvent.register(onTouchBegan, \"touchBegan\");\n\nvar onTouchEnded = (function (_Event4) {\n\tfunction onTouchEnded() {\n\t\t_babelHelpers.classCallCheck(this, onTouchEnded);\n\n\t\tEvent.call(this, true, true);\n\t\tthis.index = 0;\n\t}\n\n\t_babelHelpers.inherits(onTouchEnded, _Event4);\n\n\treturn onTouchEnded;\n})(Event);\n\nEvent.register(onTouchEnded, \"touchEnded\");\n\n/**\n * @class Input\n * Input handling for mouse, touch, keyboard and hardware sensors\n *\n * @extends Component\n */\n\nvar Input = (function (_Component) {\n\tfunction Input() {\n\t\t_babelHelpers.classCallCheck(this, Input);\n\n\t\tComponent.call(this);\n\t\tthis.queue = [];\n\t\tthis.locks = {};\n\t\tthis.position = Vec2();\n\t\tthis.lastPos = Vec2();\n\t\tthis.touchState = \"\";\n\t\tthis.axis = Vec2();\n\t\tthis.mouseAxis = Vec2();\n\t\tthis.orientation = Vec2();\n\t\tthis.lastOrientation = Vec2();\n\t\tthis.baseOrientation = Vec2();\n\n\t\tthis.map = {\n\t\t\t32: \"space\",\n\t\t\t192: \"debug\",\n\t\t\t38: \"up\",\n\t\t\t87: \"up\",\n\t\t\t39: \"right\",\n\t\t\t68: \"right\",\n\t\t\t40: \"bottom\",\n\t\t\t83: \"bottom\",\n\t\t\t37: \"left\",\n\t\t\t65: \"left\",\n\t\t\t219: \"squareLeft\",\n\t\t\t221: \"squareRight\"\n\t\t};\n\t\tthis.axisMap = {\n\t\t\tleft: Vec2(0, -1),\n\t\t\tright: Vec2(0, 1),\n\t\t\tup: Vec2(1, -1),\n\t\t\tbottom: Vec2(1, 1)\n\t\t};\n\n\t\tthis.keyNames = [];\n\t\tthis.keys = {};\n\n\t\tvar map = this.map;\n\t\tfor (var code in map) {\n\t\t\tvar key = map[code];\n\t\t\tif (! ~this.keyNames.indexOf(key)) {\n\t\t\t\tthis.keyNames.push(key);\n\t\t\t\tthis.keys[key] = null;\n\t\t\t}\n\t\t}\n\n\t\tthis.throttled = {\n\t\t\tmousemove: true,\n\t\t\tdeviceorientation: true\n\t\t};\n\n\t\tthis.lastEvent = \"\";\n\t\tthis.attached = false;\n\n\t\tthis.events = SUPPORT.touch ? {\n\t\t\ttouchstart: \"startTouch\",\n\t\t\ttouchmove: \"moveTouch\",\n\t\t\ttouchend: \"endTouch\",\n\t\t\ttouchcancel: \"endTouch\"\n\t\t} : {\n\t\t\tmousedown: \"startTouch\",\n\t\t\tmousemove: \"moveTouch\",\n\t\t\tmouseup: \"endTouch\",\n\t\t\tkeydown: \"keyStart\",\n\t\t\tkeyup: \"keyEnd\"\n\t\t};\n\n\t\tthis.events.blur = \"blur\";\n\t\tthis.events.deviceorientation = \"deviceOrientation\";\n\t}\n\n\t_babelHelpers.inherits(Input, _Component);\n\n\t_babelHelpers.createClass(Input, {\n\t\tattach: {\n\t\t\tvalue: function attach() {\n\t\t\t\tif (this.attached) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof window == \"undefined\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.attached = true;\n\t\t\t\tfor (var type in this.events) {\n\t\t\t\t\twindow.addEventListener(type, this, false);\n\t\t\t\t}\n\t\t\t\tthis.queue.length = 0;\n\t\t\t}\n\t\t},\n\t\tdetach: {\n\t\t\tvalue: function detach() {\n\t\t\t\tif (!this.attached) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.attached = false;\n\t\t\t\tfor (var type in this.events) {\n\t\t\t\t\twindow.removeEventListener(type, this, false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thandleEvent: {\n\t\t\tvalue: function handleEvent(event) {\n\t\t\t\tif (event.metaKey) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// event.preventDefault();\n\t\t\t\tvar type = event.type;\n\t\t\t\tif (this.throttled[type] && this.lastEvent == type) {\n\t\t\t\t\tthis.queue[this.queue.length - 1] = event;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.lastEvent = type;\n\t\t\t\tthis.queue.push(event);\n\t\t\t}\n\t\t},\n\t\tkeyStart: {\n\t\t\tvalue: function keyStart(keyEvent) {\n\t\t\t\tvar key = this.map[keyEvent.keyCode];\n\t\t\t\tif (key && !this.keys[key]) {\n\t\t\t\t\tif (!this.lock(\"key-\" + key)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar _event = Event.create(\"keyBegan\");\n\t\t\t\t\t_event.key = key;\n\t\t\t\t\tthis.emit(_event);\n\t\t\t\t\tthis.keys[key] = \"began\";\n\t\t\t\t\tthis.updateAxis(key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tkeyEnd: {\n\t\t\tvalue: function keyEnd(keyEvent) {\n\t\t\t\tvar key = this.map[keyEvent.keyCode];\n\t\t\t\tif (key) {\n\t\t\t\t\tif (!this.lock(\"key-\" + key)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar _event = Event.create(\"keyEnded\");\n\t\t\t\t\t_event.key = key;\n\t\t\t\t\tthis.emit(_event);\n\t\t\t\t\tthis.keys[key] = \"ended\";\n\t\t\t\t\tthis.updateAxis(key, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tstartTouch: {\n\t\t\tvalue: function startTouch(touchEvent) {\n\t\t\t\tif (!this.lock(\"touch\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.resolve(touchEvent);\n\t\t\t\tif (!this.touchState && !touchEvent.metaKey) {\n\t\t\t\t\tthis.touchState = \"began\";\n\t\t\t\t\tvar _event = Event.create(\"touchBegan\");\n\t\t\t\t\tthis.emit(_event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmoveTouch: {\n\t\t\tvalue: function moveTouch(touchEvent) {\n\t\t\t\tvar state = this.touchState;\n\t\t\t\tif ((state === \"began\" || state === \"ended\") && !this.lock(\"touch\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.resolve(touchEvent);\n\t\t\t\tif (state && state !== \"ended\" && state !== \"moved\") {\n\t\t\t\t\tthis.touchState = \"moved\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tendTouch: {\n\t\t\tvalue: function endTouch(touchEvent) {\n\t\t\t\tif (!this.lock(\"touch\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.resolve(touchEvent);\n\t\t\t\tif (this.touchState && (!SUPPORT.touch || !touchEvent.targetTouches.length)) {\n\t\t\t\t\tthis.touchState = \"ended\";\n\t\t\t\t\tvar _event = Event.create(\"touchEnded\");\n\t\t\t\t\tthis.emit(_event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateAxis: {\n\t\t\tvalue: function updateAxis(key, ended) {\n\t\t\t\tvar axis = this.axisMap[key];\n\t\t\t\tif (axis) {\n\t\t\t\t\tif (ended) {\n\t\t\t\t\t\tthis.axis[axis[0]] -= axis[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.axis[axis[0]] += axis[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tblur: {\n\t\t\tvalue: function blur() {\n\t\t\t\tif (this.touchState && this.touchState !== \"ended\") {\n\t\t\t\t\tthis.touchState = \"ended\";\n\t\t\t\t}\n\t\t\t\tvar keys = this.keys;\n\t\t\t\tvar names = this.keyNames;\n\t\t\t\tfor (var i = 0, l = names.length; i < l; i++) {\n\t\t\t\t\tvar key = names[i];\n\t\t\t\t\tif (keys[key] && keys[key] !== \"ended\") {\n\t\t\t\t\t\tkeys[key] = \"ended\";\n\t\t\t\t\t\tthis.updateAxis(key, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcalibrateOrientation: {\n\t\t\tvalue: function calibrateOrientation() {\n\t\t\t\tthis.baseOrientationTime = this.orientationTime;\n\t\t\t\tVec2.copy(this.baseOrientation, this.orientation);\n\t\t\t\tVec2.set(this.orientation);\n\t\t\t}\n\t\t},\n\t\tdeviceOrientation: {\n\t\t\tvalue: function deviceOrientation(event) {\n\t\t\t\tVec2.copy(this.lastOrientation, this.orientation);\n\t\t\t\tVec2.sub(Vec2.set(this.orientation, event.gamma | 0, event.beta | 0), this.baseOrientation);\n\t\t\t\tthis.orientationTime = event.timeStamp / 1000;\n\t\t\t\tif (!this.baseOrientationTime) {\n\t\t\t\t\tthis.calibrateOrientation();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tresolve: {\n\t\t\tvalue: function resolve(event) {\n\t\t\t\tvar coords = SUPPORT.touch ? event.targetTouches[0] : event;\n\t\t\t\tif (coords) {\n\t\t\t\t\tthis.lastTime = this.time;\n\t\t\t\t\tthis.time = event.timeStamp / 1000;\n\t\t\t\t\tVec2.copy(this.lastPos, this.position);\n\t\t\t\t\tvar renderer = Context.renderer;\n\t\t\t\t\tVec2.set(this.position, (coords.pageX - renderer.margin[0]) / renderer.scale | 0, (coords.pageY - renderer.margin[1]) / renderer.scale | 0);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tlock: {\n\t\t\tvalue: function lock(key) {\n\t\t\t\tif (this.locks[key] === this.frame) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.locks[key] = this.frame;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\tpostUpdate: {\n\t\t\tvalue: function postUpdate() {\n\t\t\t\tswitch (this.touchState) {\n\t\t\t\t\tcase \"began\":\n\t\t\t\t\t\tthis.touchState = \"stationary\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ended\":\n\t\t\t\t\t\tthis.touchState = \"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar keys = this.keys;\n\t\t\t\tvar names = this.keyNames;\n\t\t\t\tfor (var i = 0, l = names.length; i < l; i++) {\n\t\t\t\t\tvar key = names[i];\n\t\t\t\t\tswitch (keys[key]) {\n\t\t\t\t\t\tcase \"began\":\n\t\t\t\t\t\t\tkeys[key] = \"pressed\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"ended\":\n\t\t\t\t\t\t\tkeys[key] = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.frame = Context.frame;\n\n\t\t\t\tvar event = null;\n\t\t\t\tvar queue = this.queue;\n\t\t\t\twhile (event = queue[0]) {\n\t\t\t\t\tvar type = event.type;\n\t\t\t\t\tif (this[this.events[type] || type](event) != null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tqueue.shift();\n\t\t\t\t}\n\t\t\t\tif (!queue.length) {\n\t\t\t\t\tthis.lastEvent = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonContextPause: {\n\t\t\tvalue: function onContextPause() {\n\t\t\t\tthis.detach();\n\t\t\t}\n\t\t},\n\t\tonContextStart: {\n\t\t\tvalue: function onContextStart() {\n\t\t\t\tthis.attach();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Input;\n})(Component);\n\n;\n\nvar SUPPORT = {};\nif (typeof window != \"undefined\") {\n\tSUPPORT.touch = \"ontouchstart\" in window;\n\tSUPPORT.orientation = \"ondeviceorientation\" in window;\n}\n\nComponent.create(Input, \"input\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar chance = __webpack_require__(2).chance;\n\nvar force = Vec2();\n\nvar Jitter = (function (_Component) {\n\tfunction Jitter() {\n\t\t_babelHelpers.classCallCheck(this, Jitter);\n\n\t\tComponent.call(this);\n\t\tthis.factor = 0;\n\t\tthis.force = 0;\n\t}\n\n\t_babelHelpers.inherits(Jitter, _Component);\n\n\t_babelHelpers.createClass(Jitter, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tfactor: 0.1,\n\t\t\t\t\tforce: 250\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tfixedUpdate: {\n\t\t\tvalue: function fixedUpdate(dt) {\n\t\t\t\tif (chance(this.factor)) {\n\t\t\t\t\tVec2.variant(Vec2.zero, this.force, force);\n\t\t\t\t\tthis.components.body.applyForce(force);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Jitter;\n})(Component);\n\nComponent.create(Jitter, \"jitter\");\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvcGh5c2ljcy9qaXR0ZXIuanM/MDkxZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBQ08sU0FBUyxvREFBTSxFQUFtQjs7SUFDbEMsSUFBSSxvREFBTSxFQUFjOztJQUN2QixNQUFNLHVCQUFPLENBQWdCLEVBQTdCLE1BQU07O0FBRWQsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFLENBQUM7O0lBRWIsTUFBTTtBQUNDLFVBRFAsTUFBTSxHQUNJO3FDQURWLE1BQU07O0FBRVQsV0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyQixNQUFJLENBQUMsTUFBTSxHQUFHLENBQUcsQ0FBQztBQUNsQixNQUFJLENBQUMsS0FBSyxHQUFHLENBQUcsQ0FBQztFQUNqQjs7d0JBTEcsTUFBTTs7MkJBQU4sTUFBTTtBQU9OLFlBQVU7UUFBQSxZQUFHO0FBQ2hCLFdBQU87QUFDTixXQUFNLEVBQUUsR0FBRztBQUNYLFVBQUssRUFBRSxHQUFHO0tBQ1gsQ0FBQztJQUNEOztBQUVELGFBQVc7VUFBQSxxQkFBQyxFQUFFLEVBQUU7QUFDZixRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDdkIsU0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0MsU0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hDO0lBQ0Y7Ozs7UUFuQkksTUFBTTtHQUFTLFNBQVM7O0FBc0I5QixTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29yZS9jb21wb25lbnQnO1xuaW1wb3J0IFZlYzIgZnJvbSAnLi4vbWF0aC92ZWMyJztcbmltcG9ydCB7Y2hhbmNlfSBmcm9tICcuLi9tYXRoL3JhbmRvbSc7XG5cbmxldCBmb3JjZSA9IFZlYzIoKTtcblxuY2xhc3MgSml0dGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gIFx0Q29tcG9uZW50LmNhbGwodGhpcyk7XG5cdCAgdGhpcy5mYWN0b3IgPSAwLjA7XG5cdCAgdGhpcy5mb3JjZSA9IDAuMDtcbiAgfVxuXG4gIGdldCBhdHRyaWJ1dGVzKCkge1xuICBcdHJldHVybiB7XG5cdFx0ICBmYWN0b3I6IDAuMSxcblx0XHQgIGZvcmNlOiAyNTBcblx0XHR9O1xuICB9XG5cbiAgZml4ZWRVcGRhdGUoZHQpIHtcblx0ICBpZiAoY2hhbmNlKHRoaXMuZmFjdG9yKSkge1xuXHQgICAgVmVjMi52YXJpYW50KFZlYzIuemVybywgdGhpcy5mb3JjZSwgZm9yY2UpO1xuXHQgICAgdGhpcy5jb21wb25lbnRzLmJvZHkuYXBwbHlGb3JjZShmb3JjZSk7XG5cdCAgfVxuXHR9XG59XG5cbkNvbXBvbmVudC5jcmVhdGUoSml0dGVyLCAnaml0dGVyJyk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9waHlzaWNzL2ppdHRlci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIiwiZmlsZSI6IjE2LmpzIn0=");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/*\n * 2x3 Matrix\n * @class\n * @classdesc Float32Array representation of 2x3 transformation matrix.\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat2d.js\n * https://github.com/simonsarris/Canvas-tutorials/blob/master/transform.js\n * @param {Number[]|Number} fromOrA\n * @param {Number} b\n * @param {Number} c\n * @param {Number} d\n * @param {Number} tx\n * @param {Number} ty\n * @returns {Mat2} mat2 New 2D Matrix\n */\nmodule.exports = Mat2;\n\nfunction Mat2(fromOrA, b, c, d, tx, ty) {\n\tif (b != null) {\n\t\treturn new Float32Array([fromOrA, b, c, d, tx, ty]);\n\t}\n\treturn new Float32Array(fromOrA || Mat2.identity);\n}\n\nMat2.identity = Mat2(1, 0, 0, 1, 0, 0);\n\n/**\n * Set Matrix from a, b, c, d, tx, ty\n * @param {Mat2} result [description]\n * @param {Number} a\n * @param {Number} b\n * @param {Number} c\n * @param {Number} d\n * @param {Number} tx\n * @param {Number} ty\n */\nMat2.set = function (result, a, b, c, d, tx, ty) {\n\tresult[0] = a || 0;\n\tresult[1] = b || 0;\n\tresult[2] = c != null ? c : 1;\n\tresult[3] = d || 0;\n\tresult[4] = tx || 0;\n\tresult[5] = ty != null ? ty : 1;\n\treturn result;\n};\n\nMat2.reset = function (result) {\n\tresult.set(Mat2.identity);\n};\n\nMat2.toString = function (a) {\n\treturn \"[\" + a[0] + \", \" + a[1] + \" | \" + a[2] + \", \" + a[3] + \" | \" + a[4] + \", \" + a[5] + \"]\";\n};\n\nMat2.copy = function (result, b) {\n\tresult.set(b || Mat2.identity);\n\treturn result;\n};\n\nMat2.valid = function (a) {\n\treturn !(isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]) || isNaN(a[3]) || isNaN(a[4]) || isNaN(a[5]));\n};\n\nMat2.isIdentity = function (a) {\n\treturn a[0] == 1 && a[1] === 0 && a[2] === 0 && a[3] == 1 && a[4] === 0 && a[5] === 0;\n};\n\nMat2.multiply = function (a, b, result) {\n\tresult = result || a;\n\tvar aa = a[0];\n\tvar ab = a[1];\n\tvar ac = a[2];\n\tvar ad = a[3];\n\tvar atx = a[4];\n\tvar aty = a[5];\n\tvar ba = b[0];\n\tvar bb = b[1];\n\tvar bc = b[2];\n\tvar bd = b[3];\n\tvar btx = b[4];\n\tvar bty = b[5];\n\tresult[0] = aa * ba + ab * bc;\n\tresult[1] = aa * bb + ab * bd;\n\tresult[2] = ac * ba + ad * bc;\n\tresult[3] = ac * bb + ad * bd;\n\tresult[4] = ba * atx + bc * aty + btx;\n\tresult[5] = bb * atx + bd * aty + bty;\n\treturn result;\n};\n\nMat2.rotate = function (a, rad, result) {\n\tresult = result || a;\n\tif (!rad) {\n\t\treturn result;\n\t}\n\tvar aa = a[0];\n\tvar ab = a[1];\n\tvar ac = a[2];\n\tvar ad = a[3];\n\tvar atx = a[4];\n\tvar aty = a[5];\n\tvar st = Math.sin(rad);\n\tvar ct = Math.cos(rad);\n\tresult[0] = aa * ct + ab * st;\n\tresult[1] = -aa * st + ab * ct;\n\tresult[2] = ac * ct + ad * st;\n\tresult[3] = -ac * st + ct * ad;\n\tresult[4] = ct * atx + st * aty;\n\tresult[5] = ct * aty - st * atx;\n\treturn result;\n};\n\nMat2.scale = function (a, v, result) {\n\tresult = result || a;\n\tvar vx = v[0];\n\tvar vy = v[1];\n\tif (vx == 1 && vy == 1) {\n\t\treturn result;\n\t}\n\tresult[0] = a[0] * vx;\n\tresult[1] = a[1] * vy;\n\tresult[2] = a[2] * vx;\n\tresult[3] = a[3] * vy;\n\tresult[4] = a[4] * vx;\n\tresult[5] = a[5] * vy;\n\treturn result;\n};\n\nMat2.translate = function (a, v, result) {\n\tif (!result) {\n\t\tresult = a;\n\t} else {\n\t\tresult[0] = a[0];\n\t\tresult[1] = a[1];\n\t\tresult[2] = a[2];\n\t\tresult[3] = a[3];\n\t}\n\tresult[4] = a[4] + v[0];\n\tresult[5] = a[5] + v[1];\n\treturn result;\n};\n\nMat2.apply = function (a, v, result) {\n\tresult = result || v;\n\tvar x = v[0];\n\tvar y = v[1];\n\tresult[0] = x * a[0] + y * a[2] + a[4];\n\tresult[1] = x * a[1] + y * a[3] + a[5];\n\treturn result;\n};\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Entity = _babelHelpers.interopRequire(__webpack_require__(13));\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar _mathMathf = __webpack_require__(1);\n\nvar TAU = _mathMathf.TAU;\nvar clamp = _mathMathf.clamp;\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar random = __webpack_require__(2).random;\n\nvar Tweens = _babelHelpers.interopRequire(__webpack_require__(24));\n\nvar Color = _babelHelpers.interopRequire(__webpack_require__(9));\n\nvar _coreSprite = __webpack_require__(3);\n\nvar SpriteAsset = _coreSprite.SpriteAsset;\nvar SpriteSheet = _coreSprite.SpriteSheet;\n\nvar Particle = (function (_Component) {\n\tfunction Particle() {\n\t\t_babelHelpers.classCallCheck(this, Particle);\n\n\t\tComponent.call(this);\n\t\tthis.lifetime = 0;\n\t\tthis.lifetimeVariant = 0;\n\t\tthis.radius = 0;\n\t\tthis.radiusVariant = 0;\n\t\tthis.alphaVariant = 0;\n\t\tthis.shrink = Tweens.linear;\n\t\tthis.fade = Tweens.linear;\n\t\tthis.age = 0;\n\t}\n\n\t_babelHelpers.inherits(Particle, _Component);\n\n\t_babelHelpers.createClass(Particle, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tlifetime: 1,\n\t\t\t\t\tlifetimeVariant: 1,\n\t\t\t\t\tradius: 1,\n\t\t\t\t\tradiusVariant: 0,\n\t\t\t\t\talphaVariant: 0,\n\t\t\t\t\tshrink: Tweens.quintIn,\n\t\t\t\t\tfade: Tweens.quintIn\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create(attributes) {\n\t\t\t\tvar variant = this.lifetimeVariant;\n\t\t\t\tif (variant > 0) {\n\t\t\t\t\tthis.lifetime += random(-variant, variant);\n\t\t\t\t}\n\t\t\t\tvariant = this.radiusVariant;\n\t\t\t\tif (variant > 0) {\n\t\t\t\t\tthis.radius += random(-variant, variant);\n\t\t\t\t}\n\t\t\t\tvariant = this.alphaVariant;\n\t\t\t\tif (variant > 0) {\n\t\t\t\t\tvar transform = this.components.transform;\n\t\t\t\t\ttransform.alpha = clamp(transform.alpha + random(-variant, variant), 0, 1);\n\t\t\t\t}\n\t\t\t\tthis.age = 0;\n\t\t\t}\n\t\t},\n\t\tupdate: {\n\t\t\tvalue: function update(dt) {\n\t\t\t\tthis.age += dt;\n\t\t\t\tvar age = this.age;\n\t\t\t\tvar lifetime = this.lifetime;\n\t\t\t\tif (age > lifetime) {\n\t\t\t\t\tthis.entity.destroy();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this.shrink) {\n\t\t\t\t\tthis.radius *= 1 - this.shrink(age / lifetime);\n\t\t\t\t\tif (this.radius < 1) {\n\t\t\t\t\t\tthis.entity.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.fade) {\n\t\t\t\t\tvar transform = this.components.transform;\n\t\t\t\t\ttransform.alpha *= 1 - this.fade(age / lifetime);\n\t\t\t\t\tif (transform.alpha <= 0.02) {\n\t\t\t\t\t\tthis.entity.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.components.spriteTween.frame = this.radius - 1 | 0;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tgenerateSpriteAsset: {\n\t\t\tvalue: function generateSpriteAsset(attributes) {\n\t\t\t\tattributes = attributes || {};\n\t\t\t\tvar color = Color(attributes.color || Color.gray);\n\t\t\t\tvar alpha = attributes.alpha || 1;\n\t\t\t\tvar max = attributes.max = attributes.max || 25;\n\t\t\t\tvar size = max * 2;\n\t\t\t\tvar center = attributes.center || 0.5;\n\t\t\t\tvar shape = attributes.shape || \"circle\";\n\n\t\t\t\treturn new SpriteAsset(function (ctx) {\n\t\t\t\t\tfor (var radius = 1; radius <= max; radius++) {\n\t\t\t\t\t\tvar _top = max + size * (radius - 1);\n\n\t\t\t\t\t\tif (center < 1) {\n\t\t\t\t\t\t\tvar grad = ctx.createRadialGradient(max, _top, 0, max, _top, radius);\n\t\t\t\t\t\t\tcolor[3] = alpha;\n\t\t\t\t\t\t\tgrad.addColorStop(0, Color.rgba(color));\n\t\t\t\t\t\t\tif (center != 0.5) {\n\t\t\t\t\t\t\t\tcolor[3] = alpha / 2;\n\t\t\t\t\t\t\t\tgrad.addColorStop(center, Color.rgba(color));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolor[3] = 0;\n\t\t\t\t\t\t\tgrad.addColorStop(1, Color.rgba(color));\n\t\t\t\t\t\t\tctx.fillStyle = grad;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.fillStyle = Color.rgba(color);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (shape == \"rect\") {\n\t\t\t\t\t\t\tctx.fillRect(max - radius / 2 | 0, _top - radius / 2, radius, radius);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.arc(max, _top, radius, 0, TAU, true);\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, Vec2(size, size * max));\n\t\t\t}\n\t\t},\n\t\tgenerateSpriteSheet: {\n\t\t\tvalue: function generateSpriteSheet(attributes) {\n\t\t\t\tattributes = attributes || {};\n\t\t\t\tvar sprite = Particle.generateSpriteAsset(attributes);\n\t\t\t\tvar size = attributes.max * 2;\n\t\t\t\treturn new SpriteSheet({\n\t\t\t\t\tsize: Vec2(size, size),\n\t\t\t\t\tsprites: sprite\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Particle;\n})(Component);\n\nmodule.exports = Particle;\n\nParticle.defaultSpriteSheet = Particle.generateSpriteSheet();\n\nEntity.createPrefab(\"particle\", {\n\ttransform: null,\n\tbody: {\n\t\tmass: 0.1,\n\t\tfast: true\n\t},\n\tparticle: null,\n\tspriteTween: {\n\t\tasset: Particle.defaultSpriteSheet\n\t}\n});\n\nComponent.create(Particle, \"particle\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar EPSILON = __webpack_require__(1).EPSILON;\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar velocity = Vec2();\nvar force = Vec2();\nvar combinedVelocity = Vec2();\nvar forceCache = Vec2();\nvar cache = Vec2();\n\nvar Physics = (function (_Component) {\n\tfunction Physics() {\n\t\t_babelHelpers.classCallCheck(this, Physics);\n\n\t\tthis._gravity = Vec2();\n\t}\n\n\t_babelHelpers.inherits(Physics, _Component);\n\n\t_babelHelpers.createClass(Physics, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tgravity: Vec2()\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tsimulate: {\n\n\t\t\t// onBodyCreate(event) {\n\t\t\t// \tconsole.log(event.)\n\t\t\t// }\n\n\t\t\tvalue: function simulate(dt) {\n\t\t\t\tvar dtSq = dt * dt;\n\t\t\t\tvar bodies = Registry.types.body.instances;\n\t\t\t\tfor (var i = 0, l = bodies.length; i < l; i++) {\n\t\t\t\t\tvar body = bodies[i];\n\t\t\t\t\tif (!body.enabled || body.fixed) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar transform = body.components.transform;\n\t\t\t\t\tbody.copyVelocity(velocity);\n\t\t\t\t\tVec2.add(body._force, body._continuousForce, force);\n\n\t\t\t\t\t// Fast path (no mass)\n\t\t\t\t\tif (body.fast) {\n\t\t\t\t\t\tif (body.maxForce > 0) {\n\t\t\t\t\t\t\tVec2.limit(force, body.maxForce);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tVec2.add(velocity, Vec2.scale(force, dt));\n\t\t\t\t\t\tif (body.maxVelocity > 0) {\n\t\t\t\t\t\t\tVec2.limit(velocity, body.maxVelocity);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.force = Vec2.zero;\n\t\t\t\t\t\tbody.velocity = velocity;\n\t\t\t\t\t\ttransform.translateBy(Vec2.scale(velocity, dt));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply scene gravity\n\t\t\t\t\tvar gravity = this._gravity;\n\t\t\t\t\tif (Vec2.lenSq(gravity) > 0 && body.mass > EPSILON) {\n\t\t\t\t\t\tVec2.add(force, body.mass !== 1 ? Vec2.scale(gravity, 1 / body.mass, cache) : gravity);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply friction\n\t\t\t\t\tif (body.friction > 0) {\n\t\t\t\t\t\tVec2.add(force, Vec2.scale(Vec2.norm(velocity, cache), -body.friction));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (body.maxForce > 0) {\n\t\t\t\t\t\tVec2.limit(force, body.maxForce);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n     // http://www.compsoc.man.ac.uk/~lucky/Democritus/Theory/verlet.html#velver\n     // http://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet\n     let lastForce = Vec2.scale(body.lastForce, dt / 2);\n     */\n\n\t\t\t\t\ttransform.translateBy(Vec2.add(Vec2.scale(velocity, dt, combinedVelocity), Vec2.scale(force, 0.5 * dtSq, forceCache)));\n\n\t\t\t\t\tVec2.add(velocity, Vec2.scale(force, dt, forceCache));\n\n\t\t\t\t\t// Apply drag\n\t\t\t\t\tif (body.drag < 1) {\n\t\t\t\t\t\tVec2.scale(velocity, body.drag);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Limit velocity\n\t\t\t\t\tif (body.maxVelocity > 0) {\n\t\t\t\t\t\tVec2.limit(velocity, body.maxVelocity);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar minVelocity = body.minVelocity;\n\t\t\t\t\tif (minVelocity > 0) {\n\t\t\t\t\t\tif (Vec2.lenSq(velocity) <= minVelocity * minVelocity) {\n\t\t\t\t\t\t\tif (!body.sleeping) {\n\t\t\t\t\t\t\t\tVec2.set(velocity);\n\t\t\t\t\t\t\t\tbody.sleeping = true;\n\t\t\t\t\t\t\t\tbody.emit(\"bodySleep\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (body.sleeping) {\n\t\t\t\t\t\t\t\tbody.sleeping = false;\n\t\t\t\t\t\t\t\tbody.emit(\"bodyWake\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reset force\n\t\t\t\t\tbody.force = Vec2.zero;\n\t\t\t\t\tbody.velocity = velocity;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Physics;\n})(Component);\n\nComponent.create(Physics, \"physics\");\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvcGh5c2ljcy9waHlzaWNzLmpzPzQwZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztJQUNPLFNBQVMsb0RBQU0sRUFBbUI7O0lBQ2xDLFFBQVEsb0RBQU0sRUFBa0I7O0lBQy9CLE9BQU8sdUJBQU8sQ0FBZSxFQUE3QixPQUFPOztJQUNSLElBQUksb0RBQU0sRUFBYzs7QUFFL0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDdEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDbkIsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUM5QixJQUFJLFVBQVUsR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUN4QixJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQzs7SUFFYixPQUFPO0FBQ0QsVUFETixPQUFPLEdBQ0U7cUNBRFQsT0FBTzs7QUFFWCxNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDO0VBQ3ZCOzt3QkFISSxPQUFPOzsyQkFBUCxPQUFPO0FBS1IsWUFBVTtRQUFBLFlBQUc7QUFDaEIsV0FBTztBQUNOLFlBQU8sRUFBRSxJQUFJLEVBQUU7S0FDZixDQUFDO0lBQ0Y7O0FBTUQsVUFBUTs7Ozs7O1VBQUEsa0JBQUMsRUFBRSxFQUFFO0FBQ1osUUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNuQixRQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDM0MsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM5QyxTQUFJLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckIsU0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNoQyxlQUFTO01BQ1Q7QUFDRCxTQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztBQUMxQyxTQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLFNBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7OztBQUdwRCxTQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDZCxVQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFdBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNqQztBQUNELFVBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUMsVUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtBQUN6QixXQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDdkM7QUFDRCxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDdkIsVUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsZUFBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hELGVBQVM7TUFDVDs7O0FBR0QsU0FBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUM1QixTQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFO0FBQ25ELFVBQUksQ0FBQyxHQUFHLENBQ1AsS0FBSyxFQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FDekMsT0FBTyxDQUNQLENBQUM7TUFDRjs7O0FBR0QsU0FBSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtBQUN0QixVQUFJLENBQUMsR0FBRyxDQUNQLEtBQUssRUFDTCxJQUFJLENBQUMsS0FBSyxDQUNULElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FDMUMsQ0FDRCxDQUFDO01BQ0Y7O0FBRUQsU0FBSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtBQUN0QixVQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7TUFDakM7Ozs7Ozs7O0FBUUQsY0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsRUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxVQUFVLENBQUMsQ0FDekMsQ0FBQyxDQUFDOztBQUVILFNBQUksQ0FBQyxHQUFHLENBQ1AsUUFBUSxFQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FDakMsQ0FBQzs7O0FBR0YsU0FBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtBQUNsQixVQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDaEM7OztBQUdELFNBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7QUFDekIsVUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO01BQ3ZDOztBQUVELFNBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDbkMsU0FBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO0FBQ3BCLFVBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxXQUFXLEdBQUcsV0FBVyxFQUFFO0FBQ3RELFdBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ25CLFlBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkIsWUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDckIsWUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QjtPQUNELE1BQU07QUFDTixXQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbEIsWUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDdEIsWUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0QjtPQUNEO01BQ0Q7OztBQUdELFNBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUN2QixTQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztLQUN6QjtJQUNEOzs7O1FBaEhJLE9BQU87R0FBUyxTQUFTOztBQW1IL0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvcmUvY29tcG9uZW50JztcbmltcG9ydCBSZWdpc3RyeSBmcm9tICcuLi9jb3JlL3JlZ2lzdHJ5JztcbmltcG9ydCB7RVBTSUxPTn0gZnJvbSAnLi4vbWF0aC9tYXRoZic7XG5pbXBvcnQgVmVjMiBmcm9tICcuLi9tYXRoL3ZlYzInO1xuXG5sZXQgdmVsb2NpdHkgPSBWZWMyKCk7XG5sZXQgZm9yY2UgPSBWZWMyKCk7XG5sZXQgY29tYmluZWRWZWxvY2l0eSA9IFZlYzIoKTtcbmxldCBmb3JjZUNhY2hlID0gVmVjMigpO1xubGV0IGNhY2hlID0gVmVjMigpO1xuXG5jbGFzcyBQaHlzaWNzIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5fZ3Jhdml0eSA9IFZlYzIoKTtcblx0fVxuXG5cdGdldCBhdHRyaWJ1dGVzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRncmF2aXR5OiBWZWMyKClcblx0XHR9O1xuXHR9XG5cblx0Ly8gb25Cb2R5Q3JlYXRlKGV2ZW50KSB7XG5cdC8vIFx0Y29uc29sZS5sb2coZXZlbnQuKVxuXHQvLyB9XG5cblx0c2ltdWxhdGUoZHQpIHtcblx0XHRsZXQgZHRTcSA9IGR0ICogZHQ7XG5cdFx0bGV0IGJvZGllcyA9IFJlZ2lzdHJ5LnR5cGVzLmJvZHkuaW5zdGFuY2VzO1xuXHRcdGZvciAobGV0IGkgPSAwLCBsID0gYm9kaWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0bGV0IGJvZHkgPSBib2RpZXNbaV07XG5cdFx0XHRpZiAoIWJvZHkuZW5hYmxlZCB8fCBib2R5LmZpeGVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHRyYW5zZm9ybSA9IGJvZHkuY29tcG9uZW50cy50cmFuc2Zvcm07XG5cdFx0XHRib2R5LmNvcHlWZWxvY2l0eSh2ZWxvY2l0eSk7XG5cdFx0XHRWZWMyLmFkZChib2R5Ll9mb3JjZSwgYm9keS5fY29udGludW91c0ZvcmNlLCBmb3JjZSk7XG5cblx0XHRcdC8vIEZhc3QgcGF0aCAobm8gbWFzcylcblx0XHRcdGlmIChib2R5LmZhc3QpIHtcblx0XHRcdFx0aWYgKGJvZHkubWF4Rm9yY2UgPiAwKSB7XG5cdFx0XHRcdFx0VmVjMi5saW1pdChmb3JjZSwgYm9keS5tYXhGb3JjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0VmVjMi5hZGQodmVsb2NpdHksIFZlYzIuc2NhbGUoZm9yY2UsIGR0KSk7XG5cdFx0XHRcdGlmIChib2R5Lm1heFZlbG9jaXR5ID4gMCkge1xuXHRcdFx0XHRcdFZlYzIubGltaXQodmVsb2NpdHksIGJvZHkubWF4VmVsb2NpdHkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJvZHkuZm9yY2UgPSBWZWMyLnplcm87XG5cdFx0XHRcdGJvZHkudmVsb2NpdHkgPSB2ZWxvY2l0eTtcblx0XHRcdFx0dHJhbnNmb3JtLnRyYW5zbGF0ZUJ5KFZlYzIuc2NhbGUodmVsb2NpdHksIGR0KSk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBzY2VuZSBncmF2aXR5XG5cdFx0XHRsZXQgZ3Jhdml0eSA9IHRoaXMuX2dyYXZpdHk7XG5cdFx0XHRpZiAoVmVjMi5sZW5TcShncmF2aXR5KSA+IDAgJiYgYm9keS5tYXNzID4gRVBTSUxPTikge1xuXHRcdFx0XHRWZWMyLmFkZChcblx0XHRcdFx0XHRmb3JjZSwgKGJvZHkubWFzcyAhPT0gMSkgP1xuXHRcdFx0XHRcdFZlYzIuc2NhbGUoZ3Jhdml0eSwgMSAvIGJvZHkubWFzcywgY2FjaGUpIDpcblx0XHRcdFx0XHRncmF2aXR5XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGZyaWN0aW9uXG5cdFx0XHRpZiAoYm9keS5mcmljdGlvbiA+IDApIHtcblx0XHRcdFx0VmVjMi5hZGQoXG5cdFx0XHRcdFx0Zm9yY2UsXG5cdFx0XHRcdFx0VmVjMi5zY2FsZShcblx0XHRcdFx0XHRcdFZlYzIubm9ybSh2ZWxvY2l0eSwgY2FjaGUpLCAtYm9keS5mcmljdGlvblxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGJvZHkubWF4Rm9yY2UgPiAwKSB7XG5cdFx0XHRcdFZlYzIubGltaXQoZm9yY2UsIGJvZHkubWF4Rm9yY2UpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKlxuXHRcdFx0Ly8gaHR0cDovL3d3dy5jb21wc29jLm1hbi5hYy51ay9+bHVja3kvRGVtb2NyaXR1cy9UaGVvcnkvdmVybGV0Lmh0bWwjdmVsdmVyXG5cdFx0XHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZlcmxldF9pbnRlZ3JhdGlvbiNWZWxvY2l0eV9WZXJsZXRcblx0XHRcdGxldCBsYXN0Rm9yY2UgPSBWZWMyLnNjYWxlKGJvZHkubGFzdEZvcmNlLCBkdCAvIDIpO1xuXHRcdFx0Ki9cblxuXHRcdFx0dHJhbnNmb3JtLnRyYW5zbGF0ZUJ5KFZlYzIuYWRkKFxuXHRcdFx0XHRWZWMyLnNjYWxlKHZlbG9jaXR5LCBkdCwgY29tYmluZWRWZWxvY2l0eSksXG5cdFx0XHRcdFZlYzIuc2NhbGUoZm9yY2UsIDAuNSAqIGR0U3EsIGZvcmNlQ2FjaGUpXG5cdFx0XHQpKTtcblxuXHRcdFx0VmVjMi5hZGQoXG5cdFx0XHRcdHZlbG9jaXR5LFxuXHRcdFx0XHRWZWMyLnNjYWxlKGZvcmNlLCBkdCwgZm9yY2VDYWNoZSlcblx0XHRcdCk7XG5cblx0XHRcdC8vIEFwcGx5IGRyYWdcblx0XHRcdGlmIChib2R5LmRyYWcgPCAxKSB7XG5cdFx0XHRcdFZlYzIuc2NhbGUodmVsb2NpdHksIGJvZHkuZHJhZyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExpbWl0IHZlbG9jaXR5XG5cdFx0XHRpZiAoYm9keS5tYXhWZWxvY2l0eSA+IDApIHtcblx0XHRcdFx0VmVjMi5saW1pdCh2ZWxvY2l0eSwgYm9keS5tYXhWZWxvY2l0eSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBtaW5WZWxvY2l0eSA9IGJvZHkubWluVmVsb2NpdHk7XG5cdFx0XHRpZiAobWluVmVsb2NpdHkgPiAwKSB7XG5cdFx0XHRcdGlmIChWZWMyLmxlblNxKHZlbG9jaXR5KSA8PSBtaW5WZWxvY2l0eSAqIG1pblZlbG9jaXR5KSB7XG5cdFx0XHRcdFx0aWYgKCFib2R5LnNsZWVwaW5nKSB7XG5cdFx0XHRcdFx0XHRWZWMyLnNldCh2ZWxvY2l0eSk7XG5cdFx0XHRcdFx0XHRib2R5LnNsZWVwaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJvZHkuZW1pdCgnYm9keVNsZWVwJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChib2R5LnNsZWVwaW5nKSB7XG5cdFx0XHRcdFx0XHRib2R5LnNsZWVwaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRib2R5LmVtaXQoJ2JvZHlXYWtlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc2V0IGZvcmNlXG5cdFx0XHRib2R5LmZvcmNlID0gVmVjMi56ZXJvO1xuXHRcdFx0Ym9keS52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuXHRcdH1cblx0fVxufVxuXG5Db21wb25lbnQuY3JlYXRlKFBoeXNpY3MsICdwaHlzaWNzJyk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9waHlzaWNzL3BoeXNpY3MuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiIxOS5qcyJ9");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar _core = __webpack_require__(28)[\"default\"];\n\n/* @flow weak */\n\n/**\n * @todo [description]\n */\n\nvar uid = __webpack_require__(1).uid;\n\n// EntityLike | ComponentLike;\n\n/**\n * Registry\n * @class\n * @param {Object} cls Class to registry\n */\n\nvar Registry = (function () {\n\tfunction Registry(cls) {\n\t\t_babelHelpers.classCallCheck(this, Registry);\n\n\t\tthis.cls = cls;\n\t\tvar proto = cls.prototype;\n\t\tthis.instances = [];\n\t\tthis.enabled = false;\n\t\tthis.allocated = 0;\n\t\tthis.instantiated = 0;\n\t\tvar type = proto.type;\n\t\tthis.type = type;\n\t\tif (Registry.types[type] != null) {\n\t\t\tconsole.warn(\"Registry \\\"%s\\\" was overridden with \", type, cls);\n\t\t}\n\t\tRegistry.types[type] = this;\n\t\ttypeIndex.add(type);\n\n\t\tthis.events = [];\n\t\tthis.methods = [];\n\t\tthis.attributes = {};\n\t\tthis.attributeKeys = [];\n\n\t\tthis.isComponent = type != \"entity\";\n\t\tif (this.isComponent) {\n\t\t\tvar _attributes = proto.attributes || cls.attributes;\n\t\t\tif (_attributes != null) {\n\t\t\t\tthis.attributes = _attributes;\n\t\t\t\tthis.attributeKeys = _core.Object.keys(_attributes);\n\t\t\t}\n\t\t\tvar keys = _core.Object.getOwnPropertyNames(proto).concat(_core.Object.keys(cls));\n\t\t\tvar fn = \"\";\n\t\t\tvar i = 0;\n\t\t\tvar l = 0;\n\t\t\tfor (l = keys.length; i < l; i++) {\n\t\t\t\tfn = keys[i];\n\t\t\t\tif (/^on[A-Z]/.test(fn)) {\n\t\t\t\t\tif (methodsIndex.indexOf(fn) === -1) {\n\t\t\t\t\t\tmethodsIndex.push(fn);\n\t\t\t\t\t\tRegistry.methods[fn] = [];\n\t\t\t\t\t}\n\t\t\t\t\tthis.events.push(fn);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0, l = methodsIndex.length; i < l; i++) {\n\t\t\t\tfn = methodsIndex[i];\n\t\t\t\tif (cls[fn] != null) {\n\t\t\t\t\tRegistry.methods[fn].push(cls);\n\t\t\t\t} else if (proto[fn] != null) {\n\t\t\t\t\tthis.methods.push(fn);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcls.enabled = false;\n\t\tcls.registry = this;\n\t\tproto.registry = this;\n\t}\n\n\t_babelHelpers.createClass(Registry, {\n\t\ttoString: {\n\n\t\t\t/**\n    * Brief summary.\n    *\n    * @return {String}\n    */\n\n\t\t\tvalue: function toString() {\n\t\t\t\treturn \"Registry \" + this.type + \" [\" + this.allocated + \"/\" + this.instantiated + \"]\";\n\t\t\t}\n\t\t},\n\t\tpush: {\n\t\t\tvalue: function push() {\n\t\t\t\tthis.instantiated++;\n\t\t\t\tinstantiated++;\n\t\t\t\tvar instance = new this.cls();\n\t\t\t\tthis.instances.push(instance);\n\t\t\t\t// Register instance callbacks\n\t\t\t\tvar methods = this.methods;\n\t\t\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\t\t\tRegistry.methods[methods[i]].push(instance);\n\t\t\t\t}\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t},\n\t\tdeinstantiate: {\n\t\t\tvalue: function deinstantiate(instance) {\n\t\t\t\tvar methods = this.methods;\n\t\t\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\t\t\tvar list = Registry.methods[methods[i]];\n\t\t\t\t\tlist.splice(list.indexOf(instance), 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpop: {\n\t\t\tvalue: function pop() {\n\t\t\t\tvar l = this.instantiated;\n\t\t\t\tif (this.allocated == l) {\n\t\t\t\t\treturn this.push();\n\t\t\t\t}\n\t\t\t\tvar instances = this.instances;\n\t\t\t\tfor (var i = 0; i < l; i++) {\n\t\t\t\t\tif (!instances[i].allocated) {\n\t\t\t\t\t\treturn instances[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tallocate: {\n\n\t\t\t/**\n    * Allocate a new instance from free registry or by creating. The provided attributes are merged with the default attributes.\n    * @param {Entity} parent (optional) Parent class\n    * @param {Object} attributes (optional) Attributes object\n    * @return {Object}\n    */\n\n\t\t\tvalue: function allocate(parent, attributes) {\n\t\t\t\t// Get free or create new instance\n\t\t\t\tvar instance = this.pop();\n\t\t\t\tthis.allocated++;\n\t\t\t\tallocated++;\n\t\t\t\tthis.enabled = true;\n\t\t\t\tthis.cls.enabled = true;\n\t\t\t\tvar id = uid();\n\t\t\t\tinstance.uid = id;\n\t\t\t\tinstance.enabled = true;\n\t\t\t\tinstance.allocated = true;\n\t\t\t\tinstance.parent = parent;\n\t\t\t\tinstance.root = parent != null ? parent.root || parent : null;\n\t\t\t\t// Set layer, combined from parent layer, registry layer and uid\n\t\t\t\t// instance.layer = ((parent != null) ? parent.layer : 0) + this.layer + 2 - 1 / id;\n\n\t\t\t\tif (this.isComponent) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tvar defaults = this.attributes;\n\t\t\t\t\tvar keys = this.attributeKeys;\n\t\t\t\t\tvar l = keys.length;\n\t\t\t\t\tif (l > 0) {\n\t\t\t\t\t\tif (attributes == null) {\n\t\t\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\t\t\tinstance[keys[i]] = defaults[keys[i]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\t\t\tvar key = keys[i];\n\t\t\t\t\t\t\t\tif (Registry.verbose) {\n\t\t\t\t\t\t\t\t\tif (this.allocated == 1 && !(key in instance)) {\n\t\t\t\t\t\t\t\t\t\tconsole.warn(\"Component \\\"%s\\\" does not have attribute \\\"%s\\\"\", this.type, key);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinstance[key] = attributes[key] !== undefined ? attributes[key] : defaults[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add events\n\t\t\t\t\tvar _events = this.events;\n\t\t\t\t\tfor (i = 0, l = _events.length; i < l; i++) {\n\t\t\t\t\t\tparent.on(instance, _events[i], _events[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (instance.allocate != null) {\n\t\t\t\t\tinstance.allocate(attributes);\n\t\t\t\t}\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t},\n\t\tdestroy: {\n\n\t\t\t/**\n    * Destroy given instance.\n    * @param {Object} instance Registryed object\n    */\n\n\t\t\tvalue: function destroy(instance) {\n\t\t\t\tdeallocateQueue.add(instance);\n\t\t\t}\n\t\t},\n\t\tdeallocate: {\n\n\t\t\t/**\n    * Notify registry of deallocated object.\n    */\n\n\t\t\tvalue: function deallocate() {\n\t\t\t\tallocated--;\n\t\t\t\tif (this.allocated-- === 0) {\n\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\tthis.cls.enabled = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcall: {\n\n\t\t\t/**\n    * Invoke method on all enabled registryed object instances.\n    * @param {String} fn Method name\n    * @param {Mixed} payload (optional) Argument(s)\n    */\n\n\t\t\tvalue: function call(fn, payload) {\n\t\t\t\tvar instances = this.instances;\n\t\t\t\tvar i = this.instances.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (instances[i].enabled) {\n\t\t\t\t\t\tinstances[i][fn](payload);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\treset: {\n\n\t\t\t// Create call array\n\n\t\t\tvalue: function reset() {\n\t\t\t\tRegistry.methods = {};\n\t\t\t\tfor (var i = 0, l = methodsIndex.length; i < l; i++) {\n\t\t\t\t\tRegistry.methods[methodsIndex[i]] = [];\n\t\t\t\t}\n\t\t\t\tRegistry.types = {};\n\t\t\t}\n\t\t},\n\t\tdump: {\n\n\t\t\t/**\n    * Dump debugging details and optionally flush freed objects.\n    *\n    * @param {Boolean} flush (optional) Flush after debug.\n    */\n\n\t\t\tvalue: function dump(flush) {\n\t\t\t\tvar types = Registry.types;\n\t\t\t\tconsole.group(\"Registry.dump\");\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(typeIndex), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar _type = _step.value;\n\n\t\t\t\t\t\tvar registry = types[_type];\n\t\t\t\t\t\tconsole.log(\"%s: %d/%d allocated\", _type, registry.allocated, registry.instantiated);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.groupEnd(\"Registry.dump\");\n\t\t\t\tif (flush) {\n\t\t\t\t\tRegistry.flush();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfree: {\n\t\t\tvalue: function free() {\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(deallocateQueue), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar instance = _step.value;\n\n\t\t\t\t\t\tinstance.deallocate();\n\t\t\t\t\t\tinstance.registry.deallocate();\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdeallocateQueue.clear();\n\t\t\t\tif (instantiated > Registry.flushMin && allocated / instantiated < Registry.flushRatio) {\n\t\t\t\t\tRegistry.flush();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tflush: {\n\t\t\tvalue: function flush() {\n\t\t\t\t// console.group('Registry.flush');\n\t\t\t\tvar collectedSum = 0;\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = _core.$for.getIterator(typeIndex), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar _type = _step.value;\n\n\t\t\t\t\t\tvar registry = Registry.types[_type];\n\t\t\t\t\t\tif (registry.instantiated == registry.allocated) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar collected = 0;\n\t\t\t\t\t\tvar _instances = registry.instances;\n\t\t\t\t\t\tvar j = _instances.length;\n\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\tvar instance = _instances[j];\n\t\t\t\t\t\t\tif (instance.allocated) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tregistry.deinstantiate(instance);\n\t\t\t\t\t\t\t_instances.splice(j, 1);\n\t\t\t\t\t\t\tcollected++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollectedSum += collected;\n\t\t\t\t\t\tregistry.instantiated -= collected;\n\t\t\t\t\t\t// console.log('%s: %d flushed/%d remaining', type, collected, registry.instantiated);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n\t\t\t\t\t\t\t_iterator[\"return\"]();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tinstantiated -= collectedSum;\n\t\t\t\tconsole.log(\"%d flushed/%d remaining\", collectedSum, instantiated);\n\t\t\t\t// console.groupEnd('Registry.flush');\n\t\t\t}\n\t\t},\n\t\tcall: {\n\t\t\tvalue: function call(fn, arg) {\n\t\t\t\tvar methods = this.methods[fn];\n\t\t\t\tif (methods == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar i = methods.length;\n\t\t\t\tif (i === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (methods[i].enabled) {\n\t\t\t\t\t\tmethods[i][fn](arg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create(cls) {\n\t\t\t\tnew Registry(cls);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Registry;\n})();\n\nmodule.exports = Registry;\n\nvar methodsIndex = [\"fixedUpdate\", \"simulate\", \"update\", \"postUpdate\", \"preRender\", \"render\"];\nvar deallocateQueue = new _core.Set();\nvar typeIndex = new _core.Set();\nvar allocated = 0;\nvar instantiated = 0;\n\nRegistry.flushMin = 50;\nRegistry.flushRatio = 0.1;\n\nRegistry.verbose = false;\nRegistry.types = {};\nRegistry.methods = {};\nRegistry.reset();\n\nif (typeof window != \"undefined\" && window.console) {\n\tconsole.acme = console.acme || (console.acme = {});\n\tconsole.acme.registry = Registry;\n\tconsole.acme.dump = function (flush) {\n\t\tRegistry.dump(flush);\n\t\treturn null;\n\t};\n}\n// BaseRegisterable & {\n// \tattributes: ?Object;\n// } & {[key:string]: (payload:any) => void};\n\n// BaseRegisterable & {\n// \ton: (scope:?Entity, name:string, method:?string) => void;\n// }\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Entity = _babelHelpers.interopRequire(__webpack_require__(13));\n\nvar Bounds = _babelHelpers.interopRequire(__webpack_require__(7));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar Color = _babelHelpers.interopRequire(__webpack_require__(9));\n\nvar Renderer = (function () {\n\tfunction Renderer(element, size) {\n\t\t_babelHelpers.classCallCheck(this, Renderer);\n\n\t\tthis.element = element || document.body;\n\t\tthis.size = Vec2(size);\n\t\tthis.color = Color.white;\n\t\tthis.content = Vec2(size);\n\t\tthis.browser = Vec2();\n\t\tthis.margin = Vec2();\n\t\tthis.projection = Vec2.scale(this.content, 0.5, Vec2());\n\t\tthis.scale = 0;\n\t\tthis.noContext = false;\n\t\tthis.orientation = \"landscape\";\n\n\t\tthis.canvas = document.createElement(\"canvas\");\n\t\t// if (this.color != null) {\n\t\t// \tthis.canvas.mozOpaque = true;\n\t\t// }\n\t\tthis.ctx = null;\n\n\t\t// var deviceRatio = window.devicePixelRatio || 1;\n\t\t// var backingStoreRatio = this.ctx.backingStorePixelRatio ||\n\t\t// \tthis.ctx.webkitBackingStorePixelRatio ||\n\t\t// \tthis.ctx.mozBackingStorePixelRatio || 1;\n\t\t// this.ratio = deviceRatio / backingStoreRatio;\n\t\tthis.ratio = window.devicePixelRatio || 1;\n\n\t\t// var oldSave = this.ctx.save;\n\t\t// var oldRestore = this.ctx.restore;\n\t\t// this.ctx.save = function() {\n\t\t// \tthis.saved++;\n\t\t// \t// console.log('SAVE');\n\t\t// \t// debugger;\n\t\t// \toldSave.call(this);\n\t\t// };\n\t\t// this.ctx.restore = function() {\n\t\t// \tthis.saved--;\n\t\t// \t// console.log('RESTORE');\n\t\t// \t// debugger;\n\t\t// \toldRestore.call(this);\n\t\t// }\n\t\t// this.ctx.saved = 0;\n\n\t\tthis.canvas.width = this.content[0] * this.ratio;\n\t\tthis.canvas.height = this.content[1] * this.ratio;\n\t\tthis.element.style.width = this.content[0] + \"px\";\n\t\tthis.element.style.height = this.content[1] + \"px\";\n\t\tthis.element.appendChild(this.canvas);\n\n\t\tvar style = this.element.style;\n\t\tthis.transformProp = [\"transform\", \"webkitTransform\"].filter(function (key) {\n\t\t\treturn style[key] != null;\n\t\t})[0];\n\n\t\twindow.addEventListener(\"resize\", this, false);\n\t\tthis.reflow();\n\t}\n\n\t_babelHelpers.createClass(Renderer, {\n\t\thandleEvent: {\n\t\t\tvalue: function handleEvent(evt) {\n\t\t\t\tthis.reflow();\n\t\t\t}\n\t\t},\n\t\treflow: {\n\t\t\tvalue: function reflow() {\n\t\t\t\tvar browser = this.browser;\n\t\t\t\tVec2.set(browser, window.innerWidth, window.innerHeight);\n\t\t\t\tvar scale = Math.min(browser[0] / this.content[0], browser[1] / this.content[1]);\n\t\t\t\tif (scale !== this.scale) {\n\t\t\t\t\tthis.scale = scale;\n\t\t\t\t\tVec2.scale(this.content, this.scale, this.size);\n\t\t\t\t}\n\t\t\t\tvar offset = Vec2.scale(Vec2.sub(browser, this.size, this.margin), 0.5);\n\t\t\t\tthis.element.style[this.transformProp] = \"translate(\" + (offset[0] | 0) + \"px, \" + (offset[1] | 0) + \"px) scale(\" + scale + \")\";\n\t\t\t}\n\t\t},\n\t\tsave: {\n\t\t\tvalue: function save() {\n\t\t\t\tif (this.noContext) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (this.ctx == null) {\n\t\t\t\t\tthis.ctx = this.canvas.getContext(\"2d\");\n\t\t\t\t}\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tthis.ctx.save();\n\t\t\t\tif (this.color != null) {\n\t\t\t\t\tctx.fillStyle = Color.rgba(this.color);\n\t\t\t\t\tctx.fillRect(0, 0, this.content[0], this.content[1]);\n\t\t\t\t} else {\n\t\t\t\t\tctx.clearRect(0, 0, this.content[0], this.content[1]);\n\t\t\t\t}\n\t\t\t\tctx.scale(this.ratio, this.ratio);\n\t\t\t\treturn ctx;\n\t\t\t}\n\t\t},\n\t\trestore: {\n\t\t\tvalue: function restore() {\n\t\t\t\tif (this.noContext) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tthis.ctx.restore();\n\t\t\t}\n\t\t},\n\t\trequestFullscreen: {\n\t\t\tvalue: function requestFullscreen() {\n\t\t\t\tvar target = this.element.parentNode;\n\t\t\t\tif (target.requestFullScreen != null) {\n\t\t\t\t\ttarget.requestFullScreen();\n\t\t\t\t} else if (target.webkitRequestFullScreen != null) {\n\t\t\t\t\ttarget.webkitRequestFullScreen();\n\t\t\t\t} else if (target.mozRequestFullScreen != null) {\n\t\t\t\t\ttarget.mozRequestFullScreen();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttopLeft: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.sub(Vec2.scale(this.content, 0.5, topLeft), this.projection);\n\t\t\t}\n\t\t},\n\t\tbottomRight: {\n\t\t\tget: function () {\n\t\t\t\treturn Vec2.add(Vec2.scale(this.content, 0.5, bottomRight), this.projection);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Renderer;\n})();\n\nmodule.exports = Renderer;\n\nvar topLeft = Vec2();\nvar bottomRight = Vec2();\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/* @flow */\n\nvar performance = exports.performance = null;\nvar requestAnimationFrame = exports.requestAnimationFrame = null;\n\nif (typeof window != \"undefined\") {\n\t// performance.now\n\tperformance = exports.performance = window.performance || (window.performance = {});\n\tperformance.now = performance.now || performance.webkitNow || performance.msNow || performance.mozNow || Date.now;\n\n\tperformance.nextTick = (function () {\n\t\tvar queue = [];\n\t\tfunction nextTick(fn) {\n\t\t\tqueue.push(fn);\n\t\t\twindow.postMessage(\"nexttick\", \"*\");\n\t\t}\n\t\tfunction handleMessage(event) {\n\t\t\tif (event.source != window || event.data != \"nexttick\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.stopPropagation();\n\t\t\tif (queue.length > 0) {\n\t\t\t\tqueue.shift()();\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"message\", handleMessage, true);\n\t\treturn nextTick;\n\t})();\n\n\trequestAnimationFrame = exports.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;\n}\n\n/* Unused\n// Object.setPrototypeOf\n// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.setprototypeof\nObject.setPrototypeOf = Object.setPrototypeOf || function(obj, proto) {\n\tobj.__proto__ = proto;\n\treturn obj;\n};\n\n// Object.mixin\nObject.mixin = Object.mixin || function(obj, properties) {\n\tfor (let key in properties) {\n\t\tobj[key] = properties[key];\n\t}\n\treturn obj;\n};\n*/\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvY29yZS9zaGltcy5qcz9lM2FhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxJQUFJLFdBQVcsV0FBWCxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLElBQUkscUJBQXFCLFdBQXJCLHFCQUFxQixHQUFHLElBQUksQ0FBQzs7QUFFeEMsSUFBSSxPQUFPLE1BQU0sSUFBSSxXQUFXLEVBQUU7O0FBRWpDLFlBQVcsV0FBWCxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzlELFlBQVcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsU0FBUyxJQUN6RCxXQUFXLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQzs7QUFFckQsWUFBVyxDQUFDLFFBQVEsR0FBRyxDQUFDLFlBQVc7QUFDbEMsTUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsV0FBUyxRQUFRLENBQUMsRUFBRSxFQUFFO0FBQ3JCLFFBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDZixTQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztHQUNwQztBQUNELFdBQVMsYUFBYSxDQUFDLEtBQUssRUFBRTtBQUM3QixPQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3ZELFdBQU87SUFDUDtBQUNELFFBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN4QixPQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3JCLFNBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0lBQ2hCO0dBQ0Q7O0FBRUQsUUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEQsU0FBTyxRQUFRLENBQUM7RUFDaEIsR0FBRyxDQUFDOztBQUVMLHNCQUFxQixXQUFyQixxQkFBcUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLElBQ25ELE1BQU0sQ0FBQyx3QkFBd0IsSUFBSSxNQUFNLENBQUMsMkJBQTJCLENBQUM7Q0FDdkU7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuZXhwb3J0IGxldCBwZXJmb3JtYW5jZSA9IG51bGw7XG5leHBvcnQgbGV0IHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IG51bGw7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnKSB7XG5cdC8vIHBlcmZvcm1hbmNlLm5vd1xuXHRwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCAod2luZG93LnBlcmZvcm1hbmNlID0ge30pO1xuXHRwZXJmb3JtYW5jZS5ub3cgPSBwZXJmb3JtYW5jZS5ub3cgfHwgcGVyZm9ybWFuY2Uud2Via2l0Tm93IHx8XG5cdFx0cGVyZm9ybWFuY2UubXNOb3cgfHwgcGVyZm9ybWFuY2UubW96Tm93IHx8IERhdGUubm93O1xuXG5cdHBlcmZvcm1hbmNlLm5leHRUaWNrID0gKGZ1bmN0aW9uKCkge1xuXHRcdGxldCBxdWV1ZSA9IFtdO1xuXHRcdGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG5cdFx0XHRxdWV1ZS5wdXNoKGZuKTtcblx0XHRcdHdpbmRvdy5wb3N0TWVzc2FnZSgnbmV4dHRpY2snLCAnKicpO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG5cdFx0XHRpZiAoZXZlbnQuc291cmNlICE9IHdpbmRvdyB8fCBldmVudC5kYXRhICE9ICduZXh0dGljaycpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRpZiAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRxdWV1ZS5zaGlmdCgpKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlLCB0cnVlKTtcblx0XHRyZXR1cm4gbmV4dFRpY2s7XG5cdH0pKCk7XG5cblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZTtcbn1cblxuLyogVW51c2VkXG4vLyBPYmplY3Quc2V0UHJvdG90eXBlT2Zcbi8vIGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuT2JqZWN0LnNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKG9iaiwgcHJvdG8pIHtcblx0b2JqLl9fcHJvdG9fXyA9IHByb3RvO1xuXHRyZXR1cm4gb2JqO1xufTtcblxuLy8gT2JqZWN0Lm1peGluXG5PYmplY3QubWl4aW4gPSBPYmplY3QubWl4aW4gfHwgZnVuY3Rpb24ob2JqLCBwcm9wZXJ0aWVzKSB7XG5cdGZvciAobGV0IGtleSBpbiBwcm9wZXJ0aWVzKSB7XG5cdFx0b2JqW2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG5cdH1cblx0cmV0dXJuIG9iajtcbn07XG4qL1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vbGliL2NvcmUvc2hpbXMuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiIyMi5qcyJ9");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Vec2 = _babelHelpers.interopRequire(__webpack_require__(25));\n\nvar Mat2 = _babelHelpers.interopRequire(__webpack_require__(17));\n\n/**\n * Transform keeps track of transformation (position, rotation and scale) and\n * composite, alpha.\n * @extends Component\n * @class\n */\n\nvar Transform = (function (_Component) {\n\tfunction Transform() {\n\t\t_babelHelpers.classCallCheck(this, Transform);\n\n\t\tComponent.call(this);\n\t\tthis.rotation = 0;\n\t\tthis.alpha = 1;\n\t\tthis.composite = \"\";\n\t\tthis._position = Vec2();\n\t\tthis._scale = Vec2();\n\t\tthis._matrix = Mat2();\n\t\tthis._matrixWorld = Mat2();\n\t\tthis._dirty = false;\n\t\tthis._dirtyParent = false;\n\t\tthis._globalPosition = Vec2();\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.parentTransform = null;\n\t}\n\n\t_babelHelpers.inherits(Transform, _Component);\n\n\t_babelHelpers.createClass(Transform, {\n\t\tattributes: {\n\t\t\tget: function () {\n\t\t\t\treturn {\n\t\t\t\t\tposition: Vec2(),\n\t\t\t\t\tscale: Vec2(1, 1),\n\t\t\t\t\trotation: 0,\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tcomposite: \"source-over\"\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tthis._dirty = true;\n\t\t\t\tthis._dirtyParent = true;\n\t\t\t\tthis.matrixAutoUpdate = true;\n\t\t\t\tvar parent = this.entity.parent;\n\t\t\t\tthis.parentTransform = parent ? parent.components.transform : null;\n\t\t\t}\n\t\t},\n\t\tmatrix: {\n\t\t\tget: function () {\n\t\t\t\tvar matrix = this._matrix;\n\t\t\t\tif (this.dirty || this.matrixAutoUpdate) {\n\t\t\t\t\tMat2.translate(Mat2.identity, this._position, matrix);\n\t\t\t\t\tMat2.rotate(matrix, this.rotation);\n\t\t\t\t\tMat2.scale(matrix, this._scale);\n\t\t\t\t\tthis._dirty = false;\n\t\t\t\t\tthis.dirtyParent = true;\n\t\t\t\t}\n\t\t\t\treturn matrix;\n\t\t\t}\n\t\t},\n\t\tmatrixWorld: {\n\t\t\tget: function () {\n\t\t\t\tvar matrix = this.matrix;\n\t\t\t\tvar parent = this.parentTransform;\n\t\t\t\tif (!Transform.enableTree || parent == null) {\n\t\t\t\t\treturn matrix;\n\t\t\t\t}\n\t\t\t\tvar matrixWorld = this._matrixWorld;\n\t\t\t\tif (this._dirtyParent) {\n\t\t\t\t\tMat2.multiply(parent.matrixWorld, matrix, matrixWorld);\n\t\t\t\t\tthis._dirtyParent = false;\n\t\t\t\t}\n\t\t\t\treturn matrixWorld;\n\t\t\t}\n\t\t},\n\t\talphaWorld: {\n\t\t\tget: function () {\n\t\t\t\tvar alpha = this.alpha;\n\t\t\t\tif (!Transform.enableTree) {\n\t\t\t\t\treturn alpha;\n\t\t\t\t}\n\t\t\t\tvar parent = this.parentTransform;\n\t\t\t\tif (parent == null) {\n\t\t\t\t\treturn alpha;\n\t\t\t\t}\n\t\t\t\treturn parent.alphaWorld * alpha;\n\t\t\t}\n\t\t},\n\t\tglobalPosition: {\n\t\t\tget: function () {\n\t\t\t\tvar parent = this.parentTransform;\n\t\t\t\tvar position = this.position;\n\t\t\t\tif (parent == null) {\n\t\t\t\t\treturn position;\n\t\t\t\t}\n\t\t\t\treturn Vec2.add(position, parent.globalPosition, this._globalPosition);\n\t\t\t}\n\t\t},\n\t\tpositionOnly: {\n\t\t\tget: function () {\n\t\t\t\tvar parent = this.parentTransform;\n\t\t\t\treturn (parent == null || parent.positionOnly) && this.rotation === 0 && this._scale[0] == 1 && this._scale[1] == 1;\n\t\t\t},\n\t\t\tset: function (to) {\n\t\t\t\tif (to) {\n\t\t\t\t\tthis.rotation = 0;\n\t\t\t\t\tthis.scale = Vec2.one;\n\t\t\t\t\tthis.parentTransform.positionOnly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdealloc: {\n\t\t\tvalue: function dealloc() {\n\t\t\t\tthis.parentTransform = null;\n\t\t\t}\n\t\t},\n\t\tdirty: {\n\t\t\tset: function (to) {\n\t\t\t\tif (this._dirty == to) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._dirty = to;\n\t\t\t\tif (to && Transform.enableTree) {\n\t\t\t\t\tthis.dirtyParent = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdirtyParent: {\n\t\t\tset: function (to) {\n\t\t\t\tif (this._dirtyParent == to) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._dirtyParent = true;\n\t\t\t\tvar start = this.entity;\n\t\t\t\tvar child = start.firstChild;\n\t\t\t\twhile (child != null) {\n\t\t\t\t\tchild.components.transform._dirtyParent = true;\n\t\t\t\t\tif (child.firstChild != null) {\n\t\t\t\t\t\tchild = child.firstChild;\n\t\t\t\t\t} else if (child.next == null) {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tchild = child.parent;\n\t\t\t\t\t\t\tif (child == start) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (child.next == null);\n\t\t\t\t\t}\n\t\t\t\t\tchild = child.next;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcompose: {\n\t\t\tvalue: function compose(position, rotation, scale) {\n\t\t\t\tif (position != null) {\n\t\t\t\t\tthis.position = position;\n\t\t\t\t}\n\t\t\t\tif (rotation != null) {\n\t\t\t\t\tthis.rotation = rotation;\n\t\t\t\t}\n\t\t\t\tif (scale != null) {\n\t\t\t\t\tthis.scale = scale;\n\t\t\t\t}\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateBy: {\n\t\t\tvalue: function translateBy(by) {\n\t\t\t\tthis._position[0] += by[0];\n\t\t\t\tthis._position[1] += by[1];\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateTo: {\n\t\t\tvalue: function translateTo(to) {\n\t\t\t\tthis._position[0] = to[0];\n\t\t\t\tthis._position[1] = to[1];\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateXBy: {\n\t\t\tvalue: function translateXBy(by) {\n\t\t\t\tthis._position[0] += by;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateXTo: {\n\t\t\tvalue: function translateXTo(to) {\n\t\t\t\tthis._position[0] = to;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateYBy: {\n\t\t\tvalue: function translateYBy(by) {\n\t\t\t\tthis._position[1] += by;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\ttranslateYTo: {\n\t\t\tvalue: function translateYTo(to) {\n\t\t\t\tthis._position[1] = to;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleBy: {\n\t\t\tvalue: function scaleBy(by) {\n\t\t\t\tthis._scale[0] += by[0];\n\t\t\t\tthis._scale[1] += by[1];\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleTo: {\n\t\t\tvalue: function scaleTo(to) {\n\t\t\t\tthis._scale[0] = to[0];\n\t\t\t\tthis._scale[1] = to[1];\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleXBy: {\n\t\t\tvalue: function scaleXBy(by) {\n\t\t\t\tthis._scale[0] += by;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleXTo: {\n\t\t\tvalue: function scaleXTo(to) {\n\t\t\t\tthis._scale[0] = to;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleYBy: {\n\t\t\tvalue: function scaleYBy(by) {\n\t\t\t\tthis._scale[1] += by;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tscaleYTo: {\n\t\t\tvalue: function scaleYTo(to) {\n\t\t\t\tthis._scale[1] = to;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\trotateBy: {\n\t\t\tvalue: function rotateBy(by) {\n\t\t\t\tthis.rotation += by;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\trotateTo: {\n\t\t\tvalue: function rotateTo(to) {\n\t\t\t\tthis.rotation = to;\n\t\t\t\tthis.dirty = true;\n\t\t\t}\n\t\t},\n\t\tapplyMatrixWorld: {\n\t\t\tvalue: function applyMatrixWorld(ctx) {\n\t\t\t\tvar mtx = this.matrixWorld;\n\t\t\t\tctx.setTransform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4] + 0.5 | 0, mtx[5] + 0.5 | 0);\n\t\t\t}\n\t\t},\n\t\tapplyMatrix: {\n\t\t\tvalue: function applyMatrix(ctx) {\n\t\t\t\tif (this.positionOnly) {\n\t\t\t\t\tctx.translate(this.position[0], this.position[1]);\n\t\t\t\t} else {\n\t\t\t\t\tvar mtx = this.matrix;\n\t\t\t\t\tctx.transform(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4] + 0.5 | 0, mtx[5] + 0.5 | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Transform;\n})(Component);\n\nTransform.enableTree = true;\n\nVec2.defineProperty(Transform, \"position\", { dirty: true });\nVec2.defineProperty(Transform, \"scale\", { dirty: true });\n\nComponent.create(Transform, \"transform\");\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/* @flow */\n\nvar Tweens = {\n\tlinear: function linear(t) {\n\t\treturn t;\n\t}\n};\n\nmodule.exports = Tweens;\n\n// http://greweb.me/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/\n// https://github.com/petehunt/react-touch/blob/gh-pages/src/math/EasingFunctions.js\n// https://gist.github.com/gre/1650294\n// http://joshondesign.com/2013/03/01/improvedEasingEquations\n\nfunction powIn(exp) {\n\treturn function (t) {\n\t\treturn Math.pow(t, exp);\n\t};\n}\n\nfunction toOut(exp) {\n\treturn function (t) {\n\t\treturn 1 - Math.pow(1 - t, exp);\n\t};\n}\n\nfunction toInOut(exp) {\n\treturn function (t) {\n\t\treturn (t < 0.5 ? Math.pow(t * 2, exp) : 2 - Math.pow(2 * (1 - t), exp)) / 2;\n\t};\n}\n\nvar transitions = [\"quad\", \"cubic\", \"quart\", \"quint\"];\nfor (var i = 0, l = transitions.length; i < l; i++) {\n\tvar transition = transitions[i];\n\tTweens[transition + \"In\"] = powIn(i + 2);\n\tTweens[transition + \"Out\"] = toOut(i + 2);\n\tTweens[transition + \"InOut\"] = toInOut(i + 2);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvbWF0aC90d2VlbnMuanM/MTQ4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBSSxNQUFNLEdBQUc7QUFDWixPQUFNLEVBQUUsZ0JBQVMsQ0FBUSxFQUFTO0FBQ2pDLFNBQU8sQ0FBQyxDQUFDO0VBQ1Q7Q0FDRCxDQUFDOztpQkFFYSxNQUFNOzs7Ozs7O0FBT3JCLFNBQVMsS0FBSyxDQUFDLEdBQVUsRUFBRTtBQUMxQixRQUFPLFVBQVMsQ0FBUSxFQUFTO0FBQ2hDLFNBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDeEIsQ0FBQztDQUNGOztBQUVELFNBQVMsS0FBSyxDQUFDLEdBQVUsRUFBRTtBQUMxQixRQUFPLFVBQVMsQ0FBUSxFQUFTO0FBQ2hDLFNBQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNoQyxDQUFDO0NBQ0Y7O0FBRUQsU0FBUyxPQUFPLENBQUMsR0FBVSxFQUFFO0FBQzVCLFFBQU8sVUFBUyxDQUFRLEVBQVM7QUFDaEMsU0FBTyxDQUFFLENBQUMsR0FBRyxHQUFHLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQy9FLENBQUM7Q0FDRjs7QUFFRCxJQUFJLFdBQVcsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbkQsS0FBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLE9BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN6QyxPQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUMsT0FBTSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxudmFyIFR3ZWVucyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbih0Om51bWJlcik6bnVtYmVyIHtcblx0XHRyZXR1cm4gdDtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVHdlZW5zO1xuXG4vLyBodHRwOi8vZ3Jld2ViLm1lLzIwMTIvMDIvYmV6aWVyLWN1cnZlLWJhc2VkLWVhc2luZy1mdW5jdGlvbnMtZnJvbS1jb25jZXB0LXRvLWltcGxlbWVudGF0aW9uL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3BldGVodW50L3JlYWN0LXRvdWNoL2Jsb2IvZ2gtcGFnZXMvc3JjL21hdGgvRWFzaW5nRnVuY3Rpb25zLmpzXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NFxuLy8gaHR0cDovL2pvc2hvbmRlc2lnbi5jb20vMjAxMy8wMy8wMS9pbXByb3ZlZEVhc2luZ0VxdWF0aW9uc1xuXG5mdW5jdGlvbiBwb3dJbihleHA6bnVtYmVyKSB7XG5cdHJldHVybiBmdW5jdGlvbih0Om51bWJlcik6bnVtYmVyIHtcblx0XHRyZXR1cm4gTWF0aC5wb3codCwgZXhwKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gdG9PdXQoZXhwOm51bWJlcikge1xuXHRyZXR1cm4gZnVuY3Rpb24odDpudW1iZXIpOm51bWJlciB7XG5cdFx0cmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZXhwKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gdG9Jbk91dChleHA6bnVtYmVyKSB7XG5cdHJldHVybiBmdW5jdGlvbih0Om51bWJlcik6bnVtYmVyIHtcblx0XHRyZXR1cm4gKCh0IDwgMC41KSA/IE1hdGgucG93KHQgKiAyLCBleHApIDogMiAtIE1hdGgucG93KDIgKiAoMSAtIHQpLCBleHApKSAvIDI7XG5cdH07XG59XG5cbnZhciB0cmFuc2l0aW9ucyA9IFsncXVhZCcsICdjdWJpYycsICdxdWFydCcsICdxdWludCddO1xuZm9yICh2YXIgaSA9IDAsIGwgPSB0cmFuc2l0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0dmFyIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uc1tpXTtcblx0VHdlZW5zW3RyYW5zaXRpb24gKyAnSW4nXSA9IHBvd0luKGkgKyAyKTtcblx0VHdlZW5zW3RyYW5zaXRpb24gKyAnT3V0J10gPSB0b091dChpICsgMik7XG5cdFR3ZWVuc1t0cmFuc2l0aW9uICsgJ0luT3V0J10gPSB0b0luT3V0KGkgKyAyKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vbGliL21hdGgvdHdlZW5zLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIiLCJmaWxlIjoiMjQuanMifQ==");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/**\n * Initialize from Vec2 array or x/y values. Returns a new (typed) array.\n * @class\n * @classdesc Float32Array representation of 2D vectors and points.\n * @param {Vec2|Number} [fromOrX=Vec2.zero] Typed array to copy from or x\n * @param {Number} y y, when x was provided as first argument\n * @returns {Vec2} vec2 New 2D Vector\n */\nmodule.exports = Vec2;\n\nvar _mathMathf = __webpack_require__(1);\n\nvar clamp = _mathMathf.clamp;\nvar EPSILON = _mathMathf.EPSILON;\nvar TAU = _mathMathf.TAU;\n\nvar random = __webpack_require__(2).random;\n\nvar freeStack = [];\nvar sweepStack = [];\nfunction Vec2(fromOrX, y) {\n\tvar a = freeStack.pop() || new Float32Array(2);\n\tif (y != null) {\n\t\ta[0] = fromOrX;\n\t\ta[1] = y;\n\t} else if (fromOrX != null) {\n\t\ta[0] = fromOrX[0];\n\t\ta[1] = fromOrX[1];\n\t} else {\n\t\ta[0] = 0;\n\t\ta[1] = 0;\n\t}\n\treturn a;\n}\n\nVec2.marked = function () {\n\tvar a = Vec2();\n\tsweepStack.push(a);\n\treturn a;\n};\n\nVec2.sweep = function () {\n\tif (sweepStack.length > 0) {\n\t\tfreeStack.push.apply(freeStack, sweepStack);\n\t\tsweepStack.length = 0;\n\t}\n};\n\nVec2.destroy = function (a) {\n\tfreeStack.push(a);\n};\n\nVec2.zero = Vec2(0, 0);\nVec2.one = Vec2(1, 1);\nVec2.center = Vec2(0.5, 0.5);\nVec2.topLeft = Vec2(0, 0);\nVec2.topCenter = Vec2(0.5, 0);\nVec2.topRight = Vec2(1, 0);\nVec2.centerLeft = Vec2(0, 0.5);\nVec2.centerRight = Vec2(1, 0.5);\nVec2.bottomLeft = Vec2(1, 1);\nVec2.bottomCenter = Vec2(0.5, 1);\nVec2.bottomRight = Vec2(0.5, 0.5);\n\n/**\n * Set vector from x and y value\n * @param {Vec2} result Vec2 to mutate\n * @param {Number} [x=0]\n * @param {Number} [y=0]\n * @return {Vec2} result\n */\nVec2.set = function (result, x, y) {\n\tresult[0] = x || 0;\n\tresult[1] = y || 0;\n\treturn result;\n};\n\nVec2.copy = function (result, b) {\n\tresult[0] = b[0];\n\tresult[1] = b[1];\n\treturn result;\n};\n\nVec2.reset = function (result) {\n\tresult[0] = 0;\n\tresult[1] = 0;\n\treturn result;\n};\n\nVec2.valid = function (a) {\n\treturn !(isNaN(a[0]) || isNaN(a[1]));\n};\n\nVec2.toString = function (a) {\n\treturn \"[\" + a[0] + \", \" + a[1] + \"]\";\n};\n\nvar objVecCache = Vec2();\n\nVec2.fromObj = function (obj, a) {\n\ta = a || objVecCache;\n\ta[0] = obj.x;\n\ta[1] = obj.y;\n\treturn a;\n};\n\nvar objCache = {\n\tx: 0,\n\ty: 0\n};\nVec2.toObj = function (a, obj) {\n\tobj = obj || objCache;\n\tobj.x = a[0];\n\tobj.y = a[1];\n\treturn obj;\n};\n\nVec2.equals = function (a, b) {\n\treturn a[0] == b[0] && a[1] == b[1];\n};\n\nVec2.approx = function (a, b) {\n\treturn Math.abs(a[0] - b[0]) < EPSILON && Math.abs(a[1] - b[1]) < EPSILON;\n};\n\nVec2.isZero = function (a, b) {\n\treturn a[0] === 0 && a[1] === 0;\n};\n\nVec2.approxZero = function (a, b) {\n\treturn a[0] < EPSILON && a[0] > -EPSILON && a[1] < EPSILON && a[1] > -EPSILON;\n};\n\nVec2.add = function (a, b, result) {\n\tresult = result || a;\n\tresult[0] = a[0] + b[0];\n\tresult[1] = a[1] + b[1];\n\treturn result;\n};\n\nVec2.sub = function (a, b, result) {\n\tresult = result || a;\n\tresult[0] = a[0] - b[0];\n\tresult[1] = a[1] - b[1];\n\treturn result;\n};\n\nVec2.mul = function (a, b, result) {\n\tresult = result || a;\n\tresult[0] = a[0] * b[0];\n\tresult[1] = a[1] * b[1];\n\treturn result;\n};\n\nVec2.scale = function (a, scalar, result) {\n\tresult = result || a;\n\tresult[0] = a[0] * scalar;\n\tresult[1] = a[1] * scalar;\n\treturn result;\n};\n\nVec2.norm = function (a, result, scalar) {\n\tresult = result || a;\n\tvar x = a[0];\n\tvar y = a[1];\n\tvar len = (scalar || 1) / (Math.sqrt(x * x + y * y) || 1);\n\tresult[0] = x * len;\n\tresult[1] = y * len;\n\treturn result;\n};\n\nVec2.lenSq = function (a) {\n\treturn a[0] * a[0] + a[1] * a[1];\n};\n\nVec2.len = function (a) {\n\treturn Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n};\n\nVec2.dot = function (a, b) {\n\treturn a[0] * b[0] + a[1] * b[1];\n};\n\nVec2.cross = function (a, b) {\n\treturn a[0] * b[1] - a[1] * b[0];\n};\n\n/**\n * Linear interpolation\n * http://en.wikipedia.org/wiki/Lerp_%28computing%29\n * @param  {Vec2} a\n * @param  {Vec2} b\n * @param  {Number} scalar Interpolation parameter between 0 and 1\n * @return {Vec2} Result\n */\nVec2.lerp = function (a, b, scalar, result) {\n\tresult = result || a;\n\tresult[0] = a[0] + scalar * (b[0] - a[0]);\n\tresult[1] = a[1] + scalar * (b[1] - a[1]);\n\treturn result;\n};\n\nvar slerpCacheA = Vec2();\nvar slerpCacheB = Vec2();\n\n/**\n * Spherical linear interpolation\n * http://en.wikipedia.org/wiki/Slerp\n * @param  {Vec2} a\n * @param  {Vec2} b\n * @param  {Number} scalar Interpolation parameter between 0 and 1\n * @return {Vec2} Result\n */\nVec2.slerp = function (a, b, scalar, result) {\n\tresult = result || a;\n\tvar omega = Math.acos(clamp(Vec2.dot(Vec2.norm(a, slerpCacheA), Vec2.norm(b, slerpCacheB)), -1, 1));\n\treturn Vec2.lerp(a, b, Math.min(scalar, omega) / omega, result);\n};\n\nVec2.max = function (a, b, axis) {\n\tif (axis != null) {\n\t\treturn a[axis] > b[axis] ? a : b;\n\t}\n\treturn Vec2.lenSq(a) > Vec2.lenSq(b) ? a : b;\n};\n\nVec2.perp = function (a, result) {\n\tresult = result || a;\n\tvar x = a[0];\n\tresult[0] = a[1];\n\tresult[1] = -x;\n\treturn result;\n};\n\nVec2.dist = function (a, b) {\n\tvar x = b[0] - a[0];\n\tvar y = b[1] - a[1];\n\treturn Math.sqrt(x * x + y * y);\n};\n\nVec2.distSq = function (a, b) {\n\tvar x = b[0] - a[0];\n\tvar y = b[1] - a[1];\n\treturn x * x + y * y;\n};\n\nVec2.near = function (a, b, dist) {\n\treturn Vec2.distSq(a, b) <= dist * dist;\n};\n\nVec2.limit = function (a, max, result) {\n\tresult = result || a;\n\tvar x = a[0];\n\tvar y = a[1];\n\tvar ratio = max / Math.sqrt(x * x + y * y);\n\tif (ratio < 1) {\n\t\tresult[0] = x * ratio;\n\t\tresult[1] = y * ratio;\n\t} else if (result !== a) {\n\t\tresult[0] = x;\n\t\tresult[1] = y;\n\t}\n\treturn result;\n};\n\nVec2.clamp = Vec2.limit;\n\nvar radCache1 = Vec2();\nvar radCache2 = Vec2();\n\nVec2.rad = function (a, b) {\n\tif (!b) {\n\t\treturn Math.atan2(a[1], a[0]);\n\t}\n\treturn Math.acos(Vec2.dot(Vec2.norm(a, radCache1), Vec2.norm(b, radCache2)));\n};\n\nVec2.rotate = function (a, theta, result) {\n\tresult = result || a;\n\tvar sinA = Math.sin(theta);\n\tvar cosA = Math.cos(theta);\n\tresult[0] = a[0] * cosA - a[1] * sinA;\n\tresult[1] = a[0] * sinA + a[1] * cosA;\n\treturn result;\n};\n\nVec2.rotateAxis = function (a, b, theta, result) {\n\treturn Vec2.add(Vec2.rotate(Vec2.sub(a, b, result || a), theta), b);\n};\n\nVec2.rotateTo = function (a, rad, result) {\n\tresult = result || a;\n\tvar len = Vec2.len(a);\n\treturn Vec2.rotate(Vec2.set(result, len, 0), rad);\n};\n\nVec2.lookAt = function (a, b, result) {\n\tvar len = Vec2.len(a);\n\treturn Vec2.norm(Vec2.rotate(a, Math.atan2(b[0] - a[0], b[1] - a[1]) - Math.atan2(a[1], a[0]), result || a), null, len);\n};\n\nVec2.variant = function (a, delta, result) {\n\tresult = result || a;\n\tresult[0] = a[0] + random(-delta, delta);\n\tresult[1] = a[1] + random(-delta, delta);\n\treturn result;\n};\n\nVec2.variantCirc = function (a, delta, result) {\n\tresult = result || a;\n\tvar len = random(0, delta);\n\tvar theta = random(0, TAU);\n\tresult[0] = a[0] + len * Math.cos(theta);\n\tresult[1] = a[1] + len * Math.sin(theta);\n\treturn result;\n};\n\nVec2.variantRad = function (a, delta, result) {\n\treturn Vec2.rotate(a, random(-delta, delta), result);\n};\n\nVec2.variantLen = function (a, delta, result) {\n\treturn Vec2.norm(a, result, Vec2.len(a) + random(-delta, delta));\n};\n\nVec2.defineProperty = function (cls, name, options) {\n\tif (options == null) {\n\t\toptions = {};\n\t}\n\tvar prop = \"_\" + name;\n\tvar descriptor = {};\n\tif (!options.noGet) {\n\t\tdescriptor.get = function () {\n\t\t\treturn this[prop];\n\t\t};\n\t}\n\tif (options.dirty) {\n\t\tdescriptor.set = function (value) {\n\t\t\tthis[prop][0] = value[0];\n\t\t\tthis[prop][1] = value[1];\n\t\t\tthis.dirty = true;\n\t\t};\n\t} else if (!options.noSet) {\n\t\tdescriptor.set = function (value) {\n\t\t\tthis[prop][0] = value[0];\n\t\t\tthis[prop][1] = value[1];\n\t\t};\n\t}\n\tObject.defineProperty(cls.prototype, name, descriptor);\n\tvar copy = \"copy\" + name.charAt(0).toUpperCase() + name.slice(1);\n\tcls.prototype[copy] = function (result) {\n\t\tresult[0] = this[prop][0];\n\t\tresult[1] = this[prop][1];\n\t\treturn result;\n\t};\n};\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _babelHelpers = __webpack_require__(27)[\"default\"];\n\nvar Component = _babelHelpers.interopRequire(__webpack_require__(10));\n\nvar Context = _babelHelpers.interopRequire(__webpack_require__(12));\n\nvar Registry = _babelHelpers.interopRequire(__webpack_require__(20));\n\nvar Color = _babelHelpers.interopRequire(__webpack_require__(9));\n\nvar PixiSprite = exports.PixiSprite = (function (_Component) {\n\tfunction PixiSprite() {\n\t\t_babelHelpers.classCallCheck(this, PixiSprite);\n\n\t\tComponent.call(this);\n\t\tthis.container = null;\n\t\tthis.sprite = new PIXI.Sprite();\n\t}\n\n\t_babelHelpers.inherits(PixiSprite, _Component);\n\n\t_babelHelpers.createClass(PixiSprite, {\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tthis.container = Context.components.pixiSpriteSystem.camera;\n\t\t\t}\n\t\t},\n\t\tfree: {\n\t\t\tvalue: function free() {\n\t\t\t\tthis.container.removeChild(this.sprite);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn PixiSprite;\n})(Component);\n\nComponent.create(PixiSprite, \"pixiSprite\");\n\nvar PixiSpriteSystem = exports.PixiSpriteSystem = (function (_Component2) {\n\tfunction PixiSpriteSystem() {\n\t\t_babelHelpers.classCallCheck(this, PixiSpriteSystem);\n\n\t\tif (_Component2 != null) {\n\t\t\t_Component2.apply(this, arguments);\n\t\t}\n\t}\n\n\t_babelHelpers.inherits(PixiSpriteSystem, _Component2);\n\n\t_babelHelpers.createClass(PixiSpriteSystem, {\n\t\tcreate: {\n\t\t\tvalue: function create() {\n\t\t\t\tPIXI.dontSayHello = true;\n\t\t\t\tvar renderer = Context.renderer;\n\t\t\t\tthis.stage = new PIXI.Stage(16777215); // Color.toHex(renderer.color)\n\t\t\t\tthis.camera = new PIXI.DisplayObjectContainer();\n\t\t\t\tthis.stage.addChild(this.camera);\n\t\t\t\tthis.renderer = new PIXI.WebGLRenderer(renderer.content[0], renderer.content[1], {\n\t\t\t\t\tview: renderer.canvas,\n\t\t\t\t\tresolution: renderer.ratio\n\t\t\t\t});\n\t\t\t\tthis.renderer.resize(renderer.content[0], renderer.content[1]);\n\t\t\t}\n\t\t},\n\t\tonSpriteTweenCreate: {\n\t\t\tvalue: function onSpriteTweenCreate(event) {\n\t\t\t\tevent.entity.createComponent(\"pixiSprite\");\n\t\t\t}\n\t\t},\n\t\tonSpriteTweenDestroy: {\n\t\t\tvalue: function onSpriteTweenDestroy(event) {\n\t\t\t\tevent.entity.components.pixiSprite.destroy();\n\t\t\t}\n\t\t},\n\t\trender: {\n\t\t\tvalue: function render() {\n\t\t\t\tvar pixiSprites = Registry.types.pixiSprite.instances;\n\t\t\t\tvar added = false;\n\t\t\t\tfor (var i = 0, l = pixiSprites.length; i < l; i++) {\n\t\t\t\t\tvar pixiSprite = pixiSprites[i];\n\t\t\t\t\tif (!pixiSprite.enabled) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar tween = pixiSprite.components.spriteTween;\n\t\t\t\t\tvar sprite = pixiSprite.sprite;\n\t\t\t\t\tif (tween != null) {\n\t\t\t\t\t\tif (!tween.enabled) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar asset = tween.asset;\n\t\t\t\t\t\tif (!asset.ready) {\n\t\t\t\t\t\t\tif (!asset.prepare()) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (asset.frames != null) {\n\t\t\t\t\t\t\t\tvar _frames = asset.frames;\n\t\t\t\t\t\t\t\tfor (var j = 0, k = _frames.length; j < k; j++) {\n\t\t\t\t\t\t\t\t\tvar frame = _frames[j];\n\t\t\t\t\t\t\t\t\tframe.pixiTexture = new PIXI.Texture.fromCanvas(frame.sprite.buffer, PIXI.scaleModes.NEAREST);\n\t\t\t\t\t\t\t\t\tvar size = frame.size;\n\t\t\t\t\t\t\t\t\tvar position = frame.position;\n\n\t\t\t\t\t\t\t\t\tframe.pixiTexture.setFrame(new PIXI.Rectangle(position[0] | 0, position[1] | 0, size[0] | 0, size[1] | 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (asset.frames != null) {\n\t\t\t\t\t\t\tvar frame = asset.frames[tween.frame];\n\t\t\t\t\t\t\tif (sprite.texture != frame.pixiTexture) {\n\t\t\t\t\t\t\t\tVec2.toObj(frame.anchor, sprite.anchor);\n\t\t\t\t\t\t\t\tsprite.setTexture(frame.pixiTexture);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sprite.texture != null) {\n\t\t\t\t\t\t\tsprite.setTexture(new PIXI.Texture.fromCanvas(asset.buffer, PIXI.scaleModes.NEAREST));\n\t\t\t\t\t\t\tVec2.toObj(asset.defaultAnchor, sprite.anchor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!sprite.stage) {\n\t\t\t\t\t\tif (!sprite.texture) {\n\t\t\t\t\t\t\tthrow new Error(\"PIXI.Sprite without texture\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.camera.addChild(sprite);\n\t\t\t\t\t\tadded = true;\n\t\t\t\t\t}\n\t\t\t\t\tvar transform = pixiSprite.components.transform;\n\t\t\t\t\tVec2.toObj(transform.position, sprite.position);\n\t\t\t\t\tsprite.rotation = transform.rotation;\n\t\t\t\t\tsprite.alpha = transform.alpha;\n\t\t\t\t}\n\t\t\t\t// if (added) {\n\t\t\t\t// \tdebugger;\n\t\t\t\t// \t// this.stage.children.sort(depthCompare);\n\t\t\t\t// }\n\t\t\t\tVec2.toObj(this.renderer.projection, Context.renderer.position);\n\t\t\t\tthis.renderer.render(this.stage);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn PixiSpriteSystem;\n})(Component);\n\n;\n\n// function depthCompare(a, b) {\n// \tif (a.layer < b.layer) {\n// \t\treturn -1;\n// \t}\n// \tif (a.layer > b.layer) {\n// \t\treturn 1;\n// \t}\n// \treturn 0;\n// }\n\nComponent.create(PixiSpriteSystem, \"pixiSpriteSystem\");\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\nvar _core = __webpack_require__(28)[\"default\"];\n\nvar helpers = exports[\"default\"] = {};\nexports.__esModule = true;\n\nhelpers.inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) subClass.__proto__ = superClass;\n};\n\nhelpers.defaults = function (obj, defaults) {\n  var keys = _core.Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    var value = _core.Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nhelpers.createClass = (function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n\n    Object.defineProperties(target, props);\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nhelpers.applyConstructor = function (Constructor, args) {\n  var instance = Object.create(Constructor.prototype);\n  var result = Constructor.apply(instance, args);\n  return result != null && (typeof result == \"object\" || typeof result == \"function\") ? result : instance;\n};\n\nhelpers.taggedTemplateLiteral = function (strings, raw) {\n  return _core.Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: _core.Object.freeze(raw)\n    }\n  }));\n};\n\nhelpers.taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nhelpers.interopRequire = function (obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nhelpers.toArray = function (arr) {\n  return Array.isArray(arr) ? arr : _core.Array.from(arr);\n};\n\nhelpers.toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return _core.Array.from(arr);\n  }\n};\n\nhelpers.slicedToArray = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (_core.$for.isIterable(Object(arr))) {\n    var _arr = [];\n\n    for (var _iterator = _core.$for.getIterator(arr), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nhelpers.objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nhelpers.hasOwn = Object.prototype.hasOwnProperty;\nhelpers.slice = Array.prototype.slice;\nhelpers.bind = Function.prototype.bind;\n\nhelpers.defineProperty = function (obj, key, value) {\n  return Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  });\n};\n\nhelpers.asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new _core.Promise(function (resolve, reject) {\n      var callNext = step.bind(null, \"next\");\n      var callThrow = step.bind(null, \"throw\");\n\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          _core.Promise.resolve(value).then(callNext, callThrow);\n        }\n      }\n\n      callNext();\n    });\n  };\n};\n\nhelpers.interopRequireWildcard = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n};\n\nhelpers._typeof = function (obj) {\n  return obj && obj.constructor === _core.Symbol ? \"symbol\" : typeof obj;\n};\n\nhelpers._extends = _core.Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nhelpers.get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    desc = parent = getter = undefined;\n\n    var desc = _core.Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = _core.Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        continue _function;\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nhelpers.set = function set(_x, _x2, _x3, _x4) {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n    var object = _x,\n        property = _x2,\n        value = _x3,\n        receiver = _x4;\n    desc = parent = setter = undefined;\n\n    var desc = _core.Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = _core.Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        _x = parent;\n        _x2 = property;\n        _x3 = value;\n        _x4 = receiver;\n        _again = true;\n        continue _function;\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      return desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        return setter.call(receiver, value);\n      }\n    }\n  }\n};\n\nhelpers.classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nhelpers.objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nhelpers.temporalUndefined = {};\n\nhelpers.temporalAssertDefined = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  }\n\n  return true;\n};\n\nhelpers.selfGlobal = typeof global === \"undefined\" ? self : global;\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;base64,");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _core = __webpack_require__(28)[\"default\"];\n\n/**\n * Core.js 0.6.1\n * https://github.com/zloirock/core-js\n * License: http://rock.mit-license.org\n * © 2015 Denis Pushkarev\n */\n!(function (global, framework, undefined) {\n  \"use strict\";\n\n  /******************************************************************************\n   * Module : common                                                            *\n   ******************************************************************************/\n\n  // Shortcuts for [[Class]] & property names\n  var OBJECT = \"Object\",\n      FUNCTION = \"Function\",\n      ARRAY = \"Array\",\n      STRING = \"String\",\n      NUMBER = \"Number\",\n      REGEXP = \"RegExp\",\n      DATE = \"Date\",\n      MAP = \"Map\",\n      SET = \"Set\",\n      WEAKMAP = \"WeakMap\",\n      WEAKSET = \"WeakSet\",\n      SYMBOL = \"Symbol\",\n      PROMISE = \"Promise\",\n      MATH = \"Math\",\n      ARGUMENTS = \"Arguments\",\n      PROTOTYPE = \"prototype\",\n      CONSTRUCTOR = \"constructor\",\n      TO_STRING = \"toString\",\n      TO_STRING_TAG = TO_STRING + \"Tag\",\n      TO_LOCALE = \"toLocaleString\",\n      HAS_OWN = \"hasOwnProperty\",\n      FOR_EACH = \"forEach\",\n      ITERATOR = \"iterator\",\n      FF_ITERATOR = \"@@\" + ITERATOR,\n      PROCESS = \"process\",\n      CREATE_ELEMENT = \"createElement\"\n  // Aliases global objects and prototypes\n  ,\n      Function = global[FUNCTION],\n      Object = global[OBJECT],\n      Array = global[ARRAY],\n      String = global[STRING],\n      Number = global[NUMBER],\n      RegExp = global[REGEXP],\n      Date = global[DATE],\n      Map = global[MAP],\n      Set = global[SET],\n      WeakMap = global[WEAKMAP],\n      WeakSet = global[WEAKSET],\n      Symbol = global[SYMBOL],\n      Math = global[MATH],\n      TypeError = global.TypeError,\n      RangeError = global.RangeError,\n      setTimeout = global.setTimeout,\n      setImmediate = global.setImmediate,\n      clearImmediate = global.clearImmediate,\n      parseInt = global.parseInt,\n      isFinite = global.isFinite,\n      process = global[PROCESS],\n      nextTick = process && process.nextTick,\n      document = global.document,\n      html = document && document.documentElement,\n      navigator = global.navigator,\n      define = global.define,\n      console = global.console || {},\n      ArrayProto = Array[PROTOTYPE],\n      ObjectProto = Object[PROTOTYPE],\n      FunctionProto = Function[PROTOTYPE],\n      Infinity = 1 / 0,\n      DOT = \".\";\n\n  // http://jsperf.com/core-js-isobject\n  function isObject(it) {\n    return it !== null && (typeof it == \"object\" || typeof it == \"function\");\n  }\n  function isFunction(it) {\n    return typeof it == \"function\";\n  }\n  // Native function?\n  var isNative = ctx(/./.test, /\\[native code\\]\\s*\\}\\s*$/, 1);\n\n  // Object internal [[Class]] or toStringTag\n  // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring\n  var toString = ObjectProto[TO_STRING];\n  function setToStringTag(it, tag, stat) {\n    if (it && !has(it = stat ? it : it[PROTOTYPE], SYMBOL_TAG)) hidden(it, SYMBOL_TAG, tag);\n  }\n  function cof(it) {\n    return toString.call(it).slice(8, -1);\n  }\n  function classof(it) {\n    var O, T;\n    return it == undefined ? it === undefined ? \"Undefined\" : \"Null\" : typeof (T = (O = Object(it))[SYMBOL_TAG]) == \"string\" ? T : cof(O);\n  }\n\n  // Function\n  var call = FunctionProto.call,\n      apply = FunctionProto.apply,\n      REFERENCE_GET;\n  // Partial apply\n  function part() {\n    var fn = assertFunction(this),\n        length = arguments.length,\n        args = Array(length),\n        i = 0,\n        _ = path._,\n        holder = false;\n    while (length > i) if ((args[i] = arguments[i++]) === _) holder = true;\n    return function () {\n      var that = this,\n          _length = arguments.length,\n          i = 0,\n          j = 0,\n          _args;\n      if (!holder && !_length) return invoke(fn, args, that);\n      _args = args.slice();\n      if (holder) for (; length > i; i++) if (_args[i] === _) _args[i] = arguments[j++];\n      while (_length > j) _args.push(arguments[j++]);\n      return invoke(fn, _args, that);\n    };\n  }\n  // Optional / simple context binding\n  function ctx(fn, that, length) {\n    assertFunction(fn);\n    if (~length && that === undefined) {\n      return fn;\n    }switch (length) {\n      case 1:\n        return function (a) {\n          return fn.call(that, a);\n        };\n      case 2:\n        return function (a, b) {\n          return fn.call(that, a, b);\n        };\n      case 3:\n        return function (a, b, c) {\n          return fn.call(that, a, b, c);\n        };\n    }return function () {\n      return fn.apply(that, arguments);\n    };\n  }\n  // Fast apply\n  // http://jsperf.lnkit.com/fast-apply/5\n  function invoke(fn, args, that) {\n    var un = that === undefined;\n    switch (args.length | 0) {\n      case 0:\n        return un ? fn() : fn.call(that);\n      case 1:\n        return un ? fn(args[0]) : fn.call(that, args[0]);\n      case 2:\n        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);\n      case 3:\n        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);\n      case 4:\n        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);\n      case 5:\n        return un ? fn(args[0], args[1], args[2], args[3], args[4]) : fn.call(that, args[0], args[1], args[2], args[3], args[4]);\n    }return fn.apply(that, args);\n  }\n\n  // Object:\n  var create = Object.create,\n      getPrototypeOf = Object.getPrototypeOf,\n      setPrototypeOf = Object.setPrototypeOf,\n      defineProperty = Object.defineProperty,\n      defineProperties = Object.defineProperties,\n      getOwnDescriptor = Object.getOwnPropertyDescriptor,\n      getKeys = Object.keys,\n      getNames = Object.getOwnPropertyNames,\n      getSymbols = Object.getOwnPropertySymbols,\n      isFrozen = Object.isFrozen,\n      has = ctx(call, ObjectProto[HAS_OWN], 2)\n  // Dummy, fix for not array-like ES3 string in es5 module\n  ,\n      ES5Object = Object,\n      Dict;\n  function toObject(it) {\n    return ES5Object(assertDefined(it));\n  }\n  function returnIt(it) {\n    return it;\n  }\n  function returnThis() {\n    return this;\n  }\n  function get(object, key) {\n    if (has(object, key)) {\n      return object[key];\n    }\n  }\n  function ownKeys(it) {\n    assertObject(it);\n    return getSymbols ? getNames(it).concat(getSymbols(it)) : getNames(it);\n  }\n  // 19.1.2.1 Object.assign(target, source, ...)\n  var assign = Object.assign || function (target, source) {\n    var T = Object(assertDefined(target)),\n        l = arguments.length,\n        i = 1;\n    while (l > i) {\n      var S = ES5Object(arguments[i++]),\n          keys = getKeys(S),\n          length = keys.length,\n          j = 0,\n          key;\n      while (length > j) T[key = keys[j++]] = S[key];\n    }\n    return T;\n  };\n  function keyOf(object, el) {\n    var O = toObject(object),\n        keys = getKeys(O),\n        length = keys.length,\n        index = 0,\n        key;\n    while (length > index) if (O[key = keys[index++]] === el) {\n      return key;\n    }\n  }\n\n  // Array\n  // array('str1,str2,str3') => ['str1', 'str2', 'str3']\n  function array(it) {\n    return String(it).split(\",\");\n  }\n  var push = ArrayProto.push,\n      unshift = ArrayProto.unshift,\n      slice = ArrayProto.slice,\n      splice = ArrayProto.splice,\n      indexOf = ArrayProto.indexOf,\n      forEach = ArrayProto[FOR_EACH];\n  /*\r\n   * 0 -> forEach\r\n   * 1 -> map\r\n   * 2 -> filter\r\n   * 3 -> some\r\n   * 4 -> every\r\n   * 5 -> find\r\n   * 6 -> findIndex\r\n   */\n  function createArrayMethod(type) {\n    var isMap = type == 1,\n        isFilter = type == 2,\n        isSome = type == 3,\n        isEvery = type == 4,\n        isFindIndex = type == 6,\n        noholes = type == 5 || isFindIndex;\n    return function (callbackfn /*, that = undefined */) {\n      var O = Object(assertDefined(this)),\n          that = arguments[1],\n          self = ES5Object(O),\n          f = ctx(callbackfn, that, 3),\n          length = toLength(self.length),\n          index = 0,\n          result = isMap ? Array(length) : isFilter ? [] : undefined,\n          val,\n          res;\n      for (; length > index; index++) if (noholes || index in self) {\n        val = self[index];\n        res = f(val, index, O);\n        if (type) {\n          if (isMap) result[index] = res; // map\n          else if (res) switch (type) {\n            case 3:\n              return true; // some\n            case 5:\n              return val; // find\n            case 6:\n              return index; // findIndex\n            case 2:\n              result.push(val); // filter\n          } else if (isEvery) return false; // every\n        }\n      }\n      return isFindIndex ? -1 : isSome || isEvery ? isEvery : result;\n    };\n  }\n  function createArrayContains(isContains) {\n    return function (el /*, fromIndex = 0 */) {\n      var O = toObject(this),\n          length = toLength(O.length),\n          index = toIndex(arguments[1], length);\n      if (isContains && el != el) {\n        for (; length > index; index++) if (sameNaN(O[index])) return isContains || index;\n      } else for (; length > index; index++) if (isContains || index in O) {\n        if (O[index] === el) return isContains || index;\n      }return !isContains && -1;\n    };\n  }\n  function generic(A, B) {\n    // strange IE quirks mode bug -> use typeof vs isFunction\n    return typeof A == \"function\" ? A : B;\n  }\n\n  // Math\n  var MAX_SAFE_INTEGER = 9007199254740991 // pow(2, 53) - 1 == 9007199254740991\n  ,\n      pow = Math.pow,\n      abs = Math.abs,\n      ceil = Math.ceil,\n      floor = Math.floor,\n      max = Math.max,\n      min = Math.min,\n      random = Math.random,\n      trunc = Math.trunc || function (it) {\n    return (it > 0 ? floor : ceil)(it);\n  };\n  // 20.1.2.4 Number.isNaN(number)\n  function sameNaN(number) {\n    return number != number;\n  }\n  // 7.1.4 ToInteger\n  function toInteger(it) {\n    return isNaN(it) ? 0 : trunc(it);\n  }\n  // 7.1.15 ToLength\n  function toLength(it) {\n    return it > 0 ? min(toInteger(it), MAX_SAFE_INTEGER) : 0;\n  }\n  function toIndex(index, length) {\n    var index = toInteger(index);\n    return index < 0 ? max(index + length, 0) : min(index, length);\n  }\n  function lz(num) {\n    return num > 9 ? num : \"0\" + num;\n  }\n\n  function createReplacer(regExp, replace, isStatic) {\n    var replacer = isObject(replace) ? function (part) {\n      return replace[part];\n    } : replace;\n    return function (it) {\n      return String(isStatic ? it : this).replace(regExp, replacer);\n    };\n  }\n  function createPointAt(toString) {\n    return function (pos) {\n      var s = String(assertDefined(this)),\n          i = toInteger(pos),\n          l = s.length,\n          a,\n          b;\n      if (i < 0 || i >= l) return toString ? \"\" : undefined;\n      a = s.charCodeAt(i);\n      return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? toString ? s.charAt(i) : a : toString ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;\n    };\n  }\n\n  // Assertion & errors\n  var REDUCE_ERROR = \"Reduce of empty object with no initial value\";\n  function assert(condition, msg1, msg2) {\n    if (!condition) throw TypeError(msg2 ? msg1 + msg2 : msg1);\n  }\n  function assertDefined(it) {\n    if (it == undefined) throw TypeError(\"Function called on null or undefined\");\n    return it;\n  }\n  function assertFunction(it) {\n    assert(isFunction(it), it, \" is not a function!\");\n    return it;\n  }\n  function assertObject(it) {\n    assert(isObject(it), it, \" is not an object!\");\n    return it;\n  }\n  function assertInstance(it, Constructor, name) {\n    assert(it instanceof Constructor, name, \": use the 'new' operator!\");\n  }\n\n  // Property descriptors & Symbol\n  function descriptor(bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  }\n  function simpleSet(object, key, value) {\n    object[key] = value;\n    return object;\n  }\n  function createDefiner(bitmap) {\n    return DESC ? function (object, key, value) {\n      return defineProperty(object, key, descriptor(bitmap, value));\n    } : simpleSet;\n  }\n  function uid(key) {\n    return SYMBOL + \"(\" + key + \")_\" + (++sid + random())[TO_STRING](36);\n  }\n  function getWellKnownSymbol(name, setter) {\n    return Symbol && Symbol[name] || (setter ? Symbol : safeSymbol)(SYMBOL + DOT + name);\n  }\n  // The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.\n  var DESC = !!(function () {\n    try {\n      return defineProperty({}, \"a\", { get: function get() {\n          return 2;\n        } }).a == 2;\n    } catch (e) {}\n  })(),\n      sid = 0,\n      hidden = createDefiner(1),\n      set = Symbol ? simpleSet : hidden,\n      safeSymbol = Symbol || uid;\n  function assignHidden(target, src) {\n    for (var key in src) hidden(target, key, src[key]);\n    return target;\n  }\n\n  var SYMBOL_UNSCOPABLES = getWellKnownSymbol(\"unscopables\"),\n      ArrayUnscopables = ArrayProto[SYMBOL_UNSCOPABLES] || {},\n      SYMBOL_TAG = getWellKnownSymbol(TO_STRING_TAG),\n      SYMBOL_SPECIES = getWellKnownSymbol(\"species\"),\n      SYMBOL_ITERATOR;\n  function setSpecies(C) {\n    if (DESC && (framework || !isNative(C))) defineProperty(C, SYMBOL_SPECIES, {\n      configurable: true,\n      get: returnThis\n    });\n  }\n\n  /******************************************************************************\n   * Module : common.export                                                     *\n   ******************************************************************************/\n\n  var NODE = cof(process) == PROCESS,\n      core = {},\n      path = framework ? global : core,\n      old = global.core,\n      exportGlobal\n  // type bitmap\n  ,\n      FORCED = 1,\n      GLOBAL = 2,\n      STATIC = 4,\n      PROTO = 8,\n      BIND = 16,\n      WRAP = 32;\n  function $define(type, name, source) {\n    var key,\n        own,\n        out,\n        exp,\n        isGlobal = type & GLOBAL,\n        target = isGlobal ? global : type & STATIC ? global[name] : (global[name] || ObjectProto)[PROTOTYPE],\n        exports = isGlobal ? core : core[name] || (core[name] = {});\n    if (isGlobal) source = name;\n    for (key in source) {\n      // there is a similar native\n      own = !(type & FORCED) && target && key in target && (!isFunction(target[key]) || isNative(target[key]));\n      // export native or passed\n      out = (own ? target : source)[key];\n      // prevent global pollution for namespaces\n      if (!framework && isGlobal && !isFunction(target[key])) exp = source[key];\n      // bind timers to global for call from export context\n      else if (type & BIND && own) exp = ctx(out, global);\n      // wrap global constructors for prevent change them in library\n      else if (type & WRAP && !framework && target[key] == out) {\n        exp = function (param) {\n          return this instanceof out ? new out(param) : out(param);\n        };\n        exp[PROTOTYPE] = out[PROTOTYPE];\n      } else exp = type & PROTO && isFunction(out) ? ctx(call, out) : out;\n      // extend global\n      if (framework && target && !own) {\n        if (isGlobal) target[key] = out;else delete target[key] && hidden(target, key, out);\n      }\n      // export\n      if (exports[key] != out) hidden(exports, key, exp);\n    }\n  }\n  // CommonJS export\n  if (typeof module != \"undefined\" && module.exports) module.exports = core;\n  // RequireJS export\n  else if (isFunction(define) && define.amd) define(function () {\n    return core;\n  });\n  // Export to global object\n  else exportGlobal = true;\n  if (exportGlobal || framework) {\n    core.noConflict = function () {\n      global.core = old;\n      return core;\n    };\n    global.core = core;\n  }\n\n  /******************************************************************************\n   * Module : common.iterators                                                  *\n   ******************************************************************************/\n\n  SYMBOL_ITERATOR = getWellKnownSymbol(ITERATOR);\n  var ITER = safeSymbol(\"iter\"),\n      KEY = 1,\n      VALUE = 2,\n      Iterators = {},\n      IteratorPrototype = {}\n  // Safari has byggy iterators w/o `next`\n  ,\n      BUGGY_ITERATORS = \"keys\" in ArrayProto && !(\"next\" in [].keys());\n  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n  setIterator(IteratorPrototype, returnThis);\n  function setIterator(O, value) {\n    hidden(O, SYMBOL_ITERATOR, value);\n    // Add iterator for FF iterator protocol\n    FF_ITERATOR in ArrayProto && hidden(O, FF_ITERATOR, value);\n  }\n  function createIterator(Constructor, NAME, next, proto) {\n    Constructor[PROTOTYPE] = create(proto || IteratorPrototype, { next: descriptor(1, next) });\n    setToStringTag(Constructor, NAME + \" Iterator\");\n  }\n  function defineIterator(Constructor, NAME, value, DEFAULT) {\n    var proto = Constructor[PROTOTYPE],\n        iter = get(proto, SYMBOL_ITERATOR) || get(proto, FF_ITERATOR) || DEFAULT && get(proto, DEFAULT) || value;\n    if (framework) {\n      // Define iterator\n      setIterator(proto, iter);\n      if (iter !== value) {\n        var iterProto = getPrototypeOf(iter.call(new Constructor()));\n        // Set @@toStringTag to native iterators\n        setToStringTag(iterProto, NAME + \" Iterator\", true);\n        // FF fix\n        has(proto, FF_ITERATOR) && setIterator(iterProto, returnThis);\n      }\n    }\n    // Plug for library\n    Iterators[NAME] = iter;\n    // FF & v8 fix\n    Iterators[NAME + \" Iterator\"] = returnThis;\n    return iter;\n  }\n  function defineStdIterators(Base, NAME, Constructor, next, DEFAULT, IS_SET) {\n    function createIter(kind) {\n      return function () {\n        return new Constructor(this, kind);\n      };\n    }\n    createIterator(Constructor, NAME, next);\n    var entries = createIter(KEY + VALUE),\n        values = createIter(VALUE);\n    if (DEFAULT == VALUE) values = defineIterator(Base, NAME, values, \"values\");else entries = defineIterator(Base, NAME, entries, \"entries\");\n    if (DEFAULT) {\n      $define(PROTO + FORCED * BUGGY_ITERATORS, NAME, {\n        entries: entries,\n        keys: IS_SET ? values : createIter(KEY),\n        values: values\n      });\n    }\n  }\n  function iterResult(done, value) {\n    return { value: value, done: !!done };\n  }\n  function isIterable(it) {\n    var O = Object(it),\n        Symbol = global[SYMBOL],\n        hasExt = ((Symbol && Symbol[ITERATOR] || FF_ITERATOR) in O);\n    return hasExt || SYMBOL_ITERATOR in O || has(Iterators, classof(O));\n  }\n  function getIterator(it) {\n    var Symbol = global[SYMBOL],\n        ext = it[Symbol && Symbol[ITERATOR] || FF_ITERATOR],\n        getIter = ext || it[SYMBOL_ITERATOR] || Iterators[classof(it)];\n    return assertObject(getIter.call(it));\n  }\n  function stepCall(fn, value, entries) {\n    return entries ? invoke(fn, value) : fn(value);\n  }\n  function checkDangerIterClosing(fn) {\n    var danger = true;\n    var O = {\n      next: function next() {\n        throw 1;\n      },\n      \"return\": function () {\n        danger = false;\n      }\n    };\n    O[SYMBOL_ITERATOR] = returnThis;\n    try {\n      fn(O);\n    } catch (e) {}\n    return danger;\n  }\n  function closeIterator(iterator) {\n    var ret = iterator[\"return\"];\n    if (ret !== undefined) ret.call(iterator);\n  }\n  function safeIterClose(exec, iterator) {\n    try {\n      exec(iterator);\n    } catch (e) {\n      closeIterator(iterator);\n      throw e;\n    }\n  }\n  function forOf(iterable, entries, fn, that) {\n    safeIterClose(function (iterator) {\n      var f = ctx(fn, that, entries ? 2 : 1),\n          step;\n      while (!(step = iterator.next()).done) if (stepCall(f, step.value, entries) === false) {\n        return closeIterator(iterator);\n      }\n    }, getIterator(iterable));\n  }\n\n  /******************************************************************************\n   * Module : es6.symbol                                                        *\n   ******************************************************************************/\n\n  // ECMAScript 6 symbols shim\n  !(function (TAG, SymbolRegistry, AllSymbols, setter) {\n    // 19.4.1.1 Symbol([description])\n    if (!isNative(Symbol)) {\n      Symbol = function (description) {\n        assert(!(this instanceof Symbol), SYMBOL + \" is not a \" + CONSTRUCTOR);\n        var tag = uid(description),\n            sym = set(create(Symbol[PROTOTYPE]), TAG, tag);\n        AllSymbols[tag] = sym;\n        DESC && setter && defineProperty(ObjectProto, tag, {\n          configurable: true,\n          set: function set(value) {\n            hidden(this, tag, value);\n          }\n        });\n        return sym;\n      };\n      hidden(Symbol[PROTOTYPE], TO_STRING, function () {\n        return this[TAG];\n      });\n    }\n    $define(GLOBAL + WRAP, { Symbol: Symbol });\n\n    var symbolStatics = {\n      // 19.4.2.1 Symbol.for(key)\n      \"for\": function (key) {\n        return has(SymbolRegistry, key += \"\") ? SymbolRegistry[key] : SymbolRegistry[key] = Symbol(key);\n      },\n      // 19.4.2.4 Symbol.iterator\n      iterator: SYMBOL_ITERATOR || getWellKnownSymbol(ITERATOR),\n      // 19.4.2.5 Symbol.keyFor(sym)\n      keyFor: part.call(keyOf, SymbolRegistry),\n      // 19.4.2.10 Symbol.species\n      species: SYMBOL_SPECIES,\n      // 19.4.2.13 Symbol.toStringTag\n      toStringTag: SYMBOL_TAG = getWellKnownSymbol(TO_STRING_TAG, true),\n      // 19.4.2.14 Symbol.unscopables\n      unscopables: SYMBOL_UNSCOPABLES,\n      pure: safeSymbol,\n      set: set,\n      useSetter: function useSetter() {\n        setter = true;\n      },\n      useSimple: function useSimple() {\n        setter = false;\n      }\n    };\n    // 19.4.2.2 Symbol.hasInstance\n    // 19.4.2.3 Symbol.isConcatSpreadable\n    // 19.4.2.6 Symbol.match\n    // 19.4.2.8 Symbol.replace\n    // 19.4.2.9 Symbol.search\n    // 19.4.2.11 Symbol.split\n    // 19.4.2.12 Symbol.toPrimitive\n    forEach.call(array(\"hasInstance,isConcatSpreadable,match,replace,search,split,toPrimitive\"), function (it) {\n      symbolStatics[it] = getWellKnownSymbol(it);\n    });\n    $define(STATIC, SYMBOL, symbolStatics);\n\n    setToStringTag(Symbol, SYMBOL);\n\n    $define(STATIC + FORCED * !isNative(Symbol), OBJECT, {\n      // 19.1.2.7 Object.getOwnPropertyNames(O)\n      getOwnPropertyNames: function getOwnPropertyNames(it) {\n        var names = getNames(toObject(it)),\n            result = [],\n            key,\n            i = 0;\n        while (names.length > i) has(AllSymbols, key = names[i++]) || result.push(key);\n        return result;\n      },\n      // 19.1.2.8 Object.getOwnPropertySymbols(O)\n      getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n        var names = getNames(toObject(it)),\n            result = [],\n            key,\n            i = 0;\n        while (names.length > i) has(AllSymbols, key = names[i++]) && result.push(AllSymbols[key]);\n        return result;\n      }\n    });\n\n    // 20.2.1.9 Math[@@toStringTag]\n    setToStringTag(Math, MATH, true);\n    // 24.3.3 JSON[@@toStringTag]\n    setToStringTag(global.JSON, \"JSON\", true);\n  })(safeSymbol(\"tag\"), {}, {}, true);\n\n  /******************************************************************************\n   * Module : es6.object.statics                                                *\n   ******************************************************************************/\n\n  !(function () {\n    var objectStatic = {\n      // 19.1.3.1 Object.assign(target, source)\n      assign: assign,\n      // 19.1.3.10 Object.is(value1, value2)\n      is: function is(x, y) {\n        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n      }\n    };\n    // 19.1.3.19 Object.setPrototypeOf(O, proto)\n    // Works with __proto__ only. Old v8 can't works with null proto objects.\n    \"__proto__\" in ObjectProto && (function (buggy, set) {\n      try {\n        set = ctx(call, getOwnDescriptor(ObjectProto, \"__proto__\").set, 2);\n        set({}, ArrayProto);\n      } catch (e) {\n        buggy = true;\n      }\n      objectStatic.setPrototypeOf = setPrototypeOf = setPrototypeOf || function (O, proto) {\n        assertObject(O);\n        assert(proto === null || isObject(proto), proto, \": can't set as prototype!\");\n        if (buggy) O.__proto__ = proto;else set(O, proto);\n        return O;\n      };\n    })();\n    $define(STATIC, OBJECT, objectStatic);\n  })();\n\n  /******************************************************************************\n   * Module : es6.object.statics-accept-primitives                              *\n   ******************************************************************************/\n\n  !(function () {\n    // Object static methods accept primitives\n    function wrapObjectMethod(key, MODE) {\n      var fn = Object[key],\n          exp = core[OBJECT][key],\n          f = 0,\n          o = {};\n      if (!exp || isNative(exp)) {\n        o[key] = MODE == 1 ? function (it) {\n          return isObject(it) ? fn(it) : it;\n        } : MODE == 2 ? function (it) {\n          return isObject(it) ? fn(it) : true;\n        } : MODE == 3 ? function (it) {\n          return isObject(it) ? fn(it) : false;\n        } : MODE == 4 ? function (it, key) {\n          return fn(toObject(it), key);\n        } : function (it) {\n          return fn(toObject(it));\n        };\n        try {\n          fn(DOT);\n        } catch (e) {\n          f = 1;\n        }\n        $define(STATIC + FORCED * f, OBJECT, o);\n      }\n    }\n    wrapObjectMethod(\"freeze\", 1);\n    wrapObjectMethod(\"seal\", 1);\n    wrapObjectMethod(\"preventExtensions\", 1);\n    wrapObjectMethod(\"isFrozen\", 2);\n    wrapObjectMethod(\"isSealed\", 2);\n    wrapObjectMethod(\"isExtensible\", 3);\n    wrapObjectMethod(\"getOwnPropertyDescriptor\", 4);\n    wrapObjectMethod(\"getPrototypeOf\");\n    wrapObjectMethod(\"keys\");\n    wrapObjectMethod(\"getOwnPropertyNames\");\n  })();\n\n  /******************************************************************************\n   * Module : es6.number.statics                                                *\n   ******************************************************************************/\n\n  !(function (isInteger) {\n    $define(STATIC, NUMBER, {\n      // 20.1.2.1 Number.EPSILON\n      EPSILON: pow(2, -52),\n      // 20.1.2.2 Number.isFinite(number)\n      isFinite: (function (_isFinite) {\n        var _isFiniteWrapper = function isFinite(_x) {\n          return _isFinite.apply(this, arguments);\n        };\n\n        _isFiniteWrapper.toString = function () {\n          return _isFinite.toString();\n        };\n\n        return _isFiniteWrapper;\n      })(function (it) {\n        return typeof it == \"number\" && isFinite(it);\n      }),\n      // 20.1.2.3 Number.isInteger(number)\n      isInteger: isInteger,\n      // 20.1.2.4 Number.isNaN(number)\n      isNaN: sameNaN,\n      // 20.1.2.5 Number.isSafeInteger(number)\n      isSafeInteger: function isSafeInteger(number) {\n        return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;\n      },\n      // 20.1.2.6 Number.MAX_SAFE_INTEGER\n      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,\n      // 20.1.2.10 Number.MIN_SAFE_INTEGER\n      MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,\n      // 20.1.2.12 Number.parseFloat(string)\n      parseFloat: parseFloat,\n      // 20.1.2.13 Number.parseInt(string, radix)\n      parseInt: parseInt\n    });\n    // 20.1.2.3 Number.isInteger(number)\n  })(Number.isInteger || function (it) {\n    return !isObject(it) && isFinite(it) && floor(it) === it;\n  });\n\n  /******************************************************************************\n   * Module : es6.math                                                          *\n   ******************************************************************************/\n\n  // ECMAScript 6 shim\n  !(function () {\n    // 20.2.2.28 Math.sign(x)\n    var E = Math.E,\n        exp = Math.exp,\n        log = Math.log,\n        sqrt = Math.sqrt,\n        sign = Math.sign || function (x) {\n      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n    };\n\n    // 20.2.2.5 Math.asinh(x)\n    function asinh(x) {\n      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));\n    }\n    // 20.2.2.14 Math.expm1(x)\n    function expm1(x) {\n      return (x = +x) == 0 ? x : x > -0.000001 && x < 0.000001 ? x + x * x / 2 : exp(x) - 1;\n    }\n\n    $define(STATIC, MATH, {\n      // 20.2.2.3 Math.acosh(x)\n      acosh: function acosh(x) {\n        return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;\n      },\n      // 20.2.2.5 Math.asinh(x)\n      asinh: asinh,\n      // 20.2.2.7 Math.atanh(x)\n      atanh: function atanh(x) {\n        return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;\n      },\n      // 20.2.2.9 Math.cbrt(x)\n      cbrt: function cbrt(x) {\n        return sign(x = +x) * pow(abs(x), 1 / 3);\n      },\n      // 20.2.2.11 Math.clz32(x)\n      clz32: function clz32(x) {\n        return (x >>>= 0) ? 32 - x[TO_STRING](2).length : 32;\n      },\n      // 20.2.2.12 Math.cosh(x)\n      cosh: function cosh(x) {\n        return (exp(x = +x) + exp(-x)) / 2;\n      },\n      // 20.2.2.14 Math.expm1(x)\n      expm1: expm1,\n      // 20.2.2.16 Math.fround(x)\n      // TODO: fallback for IE9-\n      fround: function fround(x) {\n        return new Float32Array([x])[0];\n      },\n      // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\n      hypot: function hypot(value1, value2) {\n        var sum = 0,\n            len1 = arguments.length,\n            len2 = len1,\n            args = Array(len1),\n            larg = -Infinity,\n            arg;\n        while (len1--) {\n          arg = args[len1] = +arguments[len1];\n          if (arg == Infinity || arg == -Infinity) {\n            return Infinity;\n          }if (arg > larg) larg = arg;\n        }\n        larg = arg || 1;\n        while (len2--) sum += pow(args[len2] / larg, 2);\n        return larg * sqrt(sum);\n      },\n      // 20.2.2.18 Math.imul(x, y)\n      imul: function imul(x, y) {\n        var UInt16 = 65535,\n            xn = +x,\n            yn = +y,\n            xl = UInt16 & xn,\n            yl = UInt16 & yn;\n        return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);\n      },\n      // 20.2.2.20 Math.log1p(x)\n      log1p: function log1p(x) {\n        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);\n      },\n      // 20.2.2.21 Math.log10(x)\n      log10: function log10(x) {\n        return log(x) / Math.LN10;\n      },\n      // 20.2.2.22 Math.log2(x)\n      log2: function log2(x) {\n        return log(x) / Math.LN2;\n      },\n      // 20.2.2.28 Math.sign(x)\n      sign: sign,\n      // 20.2.2.30 Math.sinh(x)\n      sinh: function sinh(x) {\n        return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);\n      },\n      // 20.2.2.33 Math.tanh(x)\n      tanh: function tanh(x) {\n        var a = expm1(x = +x),\n            b = expm1(-x);\n        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n      },\n      // 20.2.2.34 Math.trunc(x)\n      trunc: trunc\n    });\n  })();\n\n  /******************************************************************************\n   * Module : es6.string                                                        *\n   ******************************************************************************/\n\n  !(function (fromCharCode) {\n    function assertNotRegExp(it) {\n      if (cof(it) == REGEXP) throw TypeError();\n    }\n\n    $define(STATIC, STRING, {\n      // 21.1.2.2 String.fromCodePoint(...codePoints)\n      fromCodePoint: function fromCodePoint(x) {\n        var res = [],\n            len = arguments.length,\n            i = 0,\n            code;\n        while (len > i) {\n          code = +arguments[i++];\n          if (toIndex(code, 1114111) !== code) throw RangeError(code + \" is not a valid code point\");\n          res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));\n        }return res.join(\"\");\n      },\n      // 21.1.2.4 String.raw(callSite, ...substitutions)\n      raw: (function (_raw) {\n        var _rawWrapper = function raw(_x) {\n          return _raw.apply(this, arguments);\n        };\n\n        _rawWrapper.toString = function () {\n          return _raw.toString();\n        };\n\n        return _rawWrapper;\n      })(function (callSite) {\n        var raw = toObject(callSite.raw),\n            len = toLength(raw.length),\n            sln = arguments.length,\n            res = [],\n            i = 0;\n        while (len > i) {\n          res.push(String(raw[i++]));\n          if (i < sln) res.push(String(arguments[i]));\n        }return res.join(\"\");\n      })\n    });\n\n    $define(PROTO, STRING, {\n      // 21.1.3.3 String.prototype.codePointAt(pos)\n      codePointAt: createPointAt(false),\n      // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n      endsWith: function endsWith(searchString /*, endPosition = @length */) {\n        assertNotRegExp(searchString);\n        var that = String(assertDefined(this)),\n            endPosition = arguments[1],\n            len = toLength(that.length),\n            end = endPosition === undefined ? len : min(toLength(endPosition), len);\n        searchString += \"\";\n        return that.slice(end - searchString.length, end) === searchString;\n      },\n      // 21.1.3.7 String.prototype.includes(searchString, position = 0)\n      includes: function includes(searchString /*, position = 0 */) {\n        assertNotRegExp(searchString);\n        return !! ~String(assertDefined(this)).indexOf(searchString, arguments[1]);\n      },\n      // 21.1.3.13 String.prototype.repeat(count)\n      repeat: function repeat(count) {\n        var str = String(assertDefined(this)),\n            res = \"\",\n            n = toInteger(count);\n        if (0 > n || n == Infinity) throw RangeError(\"Count can't be negative\");\n        for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n        return res;\n      },\n      // 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n      startsWith: function startsWith(searchString /*, position = 0 */) {\n        assertNotRegExp(searchString);\n        var that = String(assertDefined(this)),\n            index = toLength(min(arguments[1], that.length));\n        searchString += \"\";\n        return that.slice(index, index + searchString.length) === searchString;\n      }\n    });\n  })(String.fromCharCode);\n\n  /******************************************************************************\n   * Module : es6.array.statics                                                 *\n   ******************************************************************************/\n\n  !(function () {\n    $define(STATIC + FORCED * checkDangerIterClosing(Array.from), ARRAY, {\n      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n      from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {\n        var O = Object(assertDefined(arrayLike)),\n            mapfn = arguments[1],\n            mapping = mapfn !== undefined,\n            f = mapping ? ctx(mapfn, arguments[2], 2) : undefined,\n            index = 0,\n            length,\n            result,\n            step;\n        if (isIterable(O)) {\n          result = new (generic(this, Array))();\n          safeIterClose(function (iterator) {\n            for (; !(step = iterator.next()).done; index++) {\n              result[index] = mapping ? f(step.value, index) : step.value;\n            }\n          }, getIterator(O));\n        } else {\n          result = new (generic(this, Array))(length = toLength(O.length));\n          for (; length > index; index++) {\n            result[index] = mapping ? f(O[index], index) : O[index];\n          }\n        }\n        result.length = index;\n        return result;\n      }\n    });\n\n    $define(STATIC, ARRAY, {\n      // 22.1.2.3 Array.of( ...items)\n      of: function of() {\n        var index = 0,\n            length = arguments.length,\n            result = new (generic(this, Array))(length);\n        while (length > index) result[index] = arguments[index++];\n        result.length = length;\n        return result;\n      }\n    });\n\n    setSpecies(Array);\n  })();\n\n  /******************************************************************************\n   * Module : es6.array.prototype                                               *\n   ******************************************************************************/\n\n  !(function () {\n    $define(PROTO, ARRAY, {\n      // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n      copyWithin: function copyWithin(target, /* = 0 */start /* = 0, end = @length */) {\n        var O = Object(assertDefined(this)),\n            len = toLength(O.length),\n            to = toIndex(target, len),\n            from = toIndex(start, len),\n            end = arguments[2],\n            fin = end === undefined ? len : toIndex(end, len),\n            count = min(fin - from, len - to),\n            inc = 1;\n        if (from < to && to < from + count) {\n          inc = -1;\n          from = from + count - 1;\n          to = to + count - 1;\n        }\n        while (count-- > 0) {\n          if (from in O) O[to] = O[from];else delete O[to];\n          to += inc;\n          from += inc;\n        }return O;\n      },\n      // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n      fill: function fill(value /*, start = 0, end = @length */) {\n        var O = Object(assertDefined(this)),\n            length = toLength(O.length),\n            index = toIndex(arguments[1], length),\n            end = arguments[2],\n            endPos = end === undefined ? length : toIndex(end, length);\n        while (endPos > index) O[index++] = value;\n        return O;\n      },\n      // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n      find: createArrayMethod(5),\n      // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n      findIndex: createArrayMethod(6)\n    });\n\n    if (framework) {\n      // 22.1.3.31 Array.prototype[@@unscopables]\n      forEach.call(array(\"find,findIndex,fill,copyWithin,entries,keys,values\"), function (it) {\n        ArrayUnscopables[it] = true;\n      });\n      SYMBOL_UNSCOPABLES in ArrayProto || hidden(ArrayProto, SYMBOL_UNSCOPABLES, ArrayUnscopables);\n    }\n  })();\n\n  /******************************************************************************\n   * Module : es6.iterators                                                     *\n   ******************************************************************************/\n\n  !(function (at) {\n    // 22.1.3.4 Array.prototype.entries()\n    // 22.1.3.13 Array.prototype.keys()\n    // 22.1.3.29 Array.prototype.values()\n    // 22.1.3.30 Array.prototype[@@iterator]()\n    defineStdIterators(Array, ARRAY, function (iterated, kind) {\n      set(this, ITER, { o: toObject(iterated), i: 0, k: kind });\n      // 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n    }, function () {\n      var iter = this[ITER],\n          O = iter.o,\n          kind = iter.k,\n          index = iter.i++;\n      if (!O || index >= O.length) {\n        iter.o = undefined;\n        return iterResult(1);\n      }\n      if (kind == KEY) return iterResult(0, index);\n      if (kind == VALUE) return iterResult(0, O[index]);\n      return iterResult(0, [index, O[index]]);\n    }, VALUE);\n\n    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n    Iterators[ARGUMENTS] = Iterators[ARRAY];\n\n    // 21.1.3.27 String.prototype[@@iterator]()\n    defineStdIterators(String, STRING, function (iterated) {\n      set(this, ITER, { o: String(iterated), i: 0 });\n      // 21.1.5.2.1 %StringIteratorPrototype%.next()\n    }, function () {\n      var iter = this[ITER],\n          O = iter.o,\n          index = iter.i,\n          point;\n      if (index >= O.length) return iterResult(1);\n      point = at.call(O, index);\n      iter.i += point.length;\n      return iterResult(0, point);\n    });\n  })(createPointAt(true));\n\n  /******************************************************************************\n   * Module : web.immediate                                                     *\n   ******************************************************************************/\n\n  // setImmediate shim\n  // Node.js 0.9+ & IE10+ has setImmediate, else:\n  isFunction(setImmediate) && isFunction(clearImmediate) || (function (ONREADYSTATECHANGE) {\n    var postMessage = global.postMessage,\n        addEventListener = global.addEventListener,\n        MessageChannel = global.MessageChannel,\n        counter = 0,\n        queue = {},\n        defer,\n        channel,\n        port;\n    setImmediate = function (fn) {\n      var args = [],\n          i = 1;\n      while (arguments.length > i) args.push(arguments[i++]);\n      queue[++counter] = function () {\n        invoke(isFunction(fn) ? fn : Function(fn), args);\n      };\n      defer(counter);\n      return counter;\n    };\n    clearImmediate = function (id) {\n      delete queue[id];\n    };\n    function run(id) {\n      if (has(queue, id)) {\n        var fn = queue[id];\n        delete queue[id];\n        fn();\n      }\n    }\n    function listner(event) {\n      run(event.data);\n    }\n    // Node.js 0.8-\n    if (NODE) {\n      defer = function (id) {\n        nextTick(part.call(run, id));\n      }\n      // Modern browsers, skip implementation for WebWorkers\n      // IE8 has postMessage, but it's sync & typeof its postMessage is object\n      ;\n    } else if (addEventListener && isFunction(postMessage) && !global.importScripts) {\n      defer = function (id) {\n        postMessage(id, \"*\");\n      };\n      addEventListener(\"message\", listner, false);\n      // WebWorkers\n    } else if (isFunction(MessageChannel)) {\n      channel = new MessageChannel();\n      port = channel.port2;\n      channel.port1.onmessage = listner;\n      defer = ctx(port.postMessage, port, 1);\n      // IE8-\n    } else if (document && ONREADYSTATECHANGE in document[CREATE_ELEMENT](\"script\")) {\n      defer = function (id) {\n        html.appendChild(document[CREATE_ELEMENT](\"script\"))[ONREADYSTATECHANGE] = function () {\n          html.removeChild(this);\n          run(id);\n        };\n      }\n      // Rest old browsers\n      ;\n    } else {\n      defer = function (id) {\n        setTimeout(run, 0, id);\n      };\n    }\n  })(\"onreadystatechange\");\n  $define(GLOBAL + BIND, {\n    setImmediate: setImmediate,\n    clearImmediate: clearImmediate\n  });\n\n  /******************************************************************************\n   * Module : es6.promise                                                       *\n   ******************************************************************************/\n\n  // ES6 promises shim\n  // Based on https://github.com/getify/native-promise-only/\n  !(function (Promise, test) {\n    isFunction(Promise) && isFunction(Promise.resolve) && Promise.resolve(test = new Promise(function () {})) == test || (function (asap, RECORD) {\n      function isThenable(it) {\n        var then;\n        if (isObject(it)) then = it.then;\n        return isFunction(then) ? then : false;\n      }\n      function handledRejectionOrHasOnRejected(promise) {\n        var record = promise[RECORD],\n            chain = record.c,\n            i = 0,\n            react;\n        if (record.h) {\n          return true;\n        }while (chain.length > i) {\n          react = chain[i++];\n          if (react.fail || handledRejectionOrHasOnRejected(react.P)) {\n            return true;\n          }\n        }\n      }\n      function notify(record, reject) {\n        var chain = record.c;\n        if (reject || chain.length) asap(function () {\n          var promise = record.p,\n              value = record.v,\n              ok = record.s == 1,\n              i = 0;\n          if (reject && !handledRejectionOrHasOnRejected(promise)) {\n            setTimeout(function () {\n              if (!handledRejectionOrHasOnRejected(promise)) {\n                if (NODE) {\n                  if (!process.emit(\"unhandledRejection\", value, promise)) {}\n                } else if (isFunction(console.error)) {\n                  console.error(\"Unhandled promise rejection\", value);\n                }\n              }\n            }, 1000);\n          } else while (chain.length > i) !(function (react) {\n            var cb = ok ? react.ok : react.fail,\n                ret,\n                then;\n            try {\n              if (cb) {\n                if (!ok) record.h = true;\n                ret = cb === true ? value : cb(value);\n                if (ret === react.P) {\n                  react.rej(TypeError(PROMISE + \"-chain cycle\"));\n                } else if (then = isThenable(ret)) {\n                  then.call(ret, react.res, react.rej);\n                } else react.res(ret);\n              } else react.rej(value);\n            } catch (err) {\n              react.rej(err);\n            }\n          })(chain[i++]);\n          chain.length = 0;\n        });\n      }\n      function resolve(value) {\n        var record = this,\n            then,\n            wrapper;\n        if (record.d) {\n          return;\n        }record.d = true;\n        record = record.r || record; // unwrap\n        try {\n          if (then = isThenable(value)) {\n            wrapper = { r: record, d: false }; // wrap\n            then.call(value, ctx(resolve, wrapper, 1), ctx(reject, wrapper, 1));\n          } else {\n            record.v = value;\n            record.s = 1;\n            notify(record);\n          }\n        } catch (err) {\n          reject.call(wrapper || { r: record, d: false }, err); // wrap\n        }\n      }\n      function reject(value) {\n        var record = this;\n        if (record.d) {\n          return;\n        }record.d = true;\n        record = record.r || record; // unwrap\n        record.v = value;\n        record.s = 2;\n        notify(record, true);\n      }\n      function getConstructor(C) {\n        var S = assertObject(C)[SYMBOL_SPECIES];\n        return S != undefined ? S : C;\n      }\n      // 25.4.3.1 Promise(executor)\n      Promise = function (executor) {\n        assertFunction(executor);\n        assertInstance(this, Promise, PROMISE);\n        var record = {\n          p: this, // promise\n          c: [], // chain\n          s: 0, // state\n          d: false, // done\n          v: undefined, // value\n          h: false // handled rejection\n        };\n        hidden(this, RECORD, record);\n        try {\n          executor(ctx(resolve, record, 1), ctx(reject, record, 1));\n        } catch (err) {\n          reject.call(record, err);\n        }\n      };\n      assignHidden(Promise[PROTOTYPE], {\n        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n        then: function then(onFulfilled, onRejected) {\n          var S = assertObject(assertObject(this)[CONSTRUCTOR])[SYMBOL_SPECIES];\n          var react = {\n            ok: isFunction(onFulfilled) ? onFulfilled : true,\n            fail: isFunction(onRejected) ? onRejected : false\n          },\n              P = react.P = new (S != undefined ? S : Promise)(function (resolve, reject) {\n            react.res = assertFunction(resolve);\n            react.rej = assertFunction(reject);\n          }),\n              record = this[RECORD];\n          record.c.push(react);\n          record.s && notify(record);\n          return P;\n        },\n        // 25.4.5.1 Promise.prototype.catch(onRejected)\n        \"catch\": function (onRejected) {\n          return this.then(undefined, onRejected);\n        }\n      });\n      assignHidden(Promise, {\n        // 25.4.4.1 Promise.all(iterable)\n        all: function all(iterable) {\n          var Promise = getConstructor(this),\n              values = [];\n          return new Promise(function (resolve, reject) {\n            forOf(iterable, false, push, values);\n            var remaining = values.length,\n                results = Array(remaining);\n            if (remaining) forEach.call(values, function (promise, index) {\n              Promise.resolve(promise).then(function (value) {\n                results[index] = value;\n                --remaining || resolve(results);\n              }, reject);\n            });else resolve(results);\n          });\n        },\n        // 25.4.4.4 Promise.race(iterable)\n        race: function race(iterable) {\n          var Promise = getConstructor(this);\n          return new Promise(function (resolve, reject) {\n            forOf(iterable, false, function (promise) {\n              Promise.resolve(promise).then(resolve, reject);\n            });\n          });\n        },\n        // 25.4.4.5 Promise.reject(r)\n        reject: function reject(r) {\n          return new (getConstructor(this))(function (resolve, reject) {\n            reject(r);\n          });\n        },\n        // 25.4.4.6 Promise.resolve(x)\n        resolve: function resolve(x) {\n          return isObject(x) && RECORD in x && getPrototypeOf(x) === this[PROTOTYPE] ? x : new (getConstructor(this))(function (resolve, reject) {\n            resolve(x);\n          });\n        }\n      });\n    })(nextTick || setImmediate, safeSymbol(\"record\"));\n    setToStringTag(Promise, PROMISE);\n    setSpecies(Promise);\n    $define(GLOBAL + FORCED * !isNative(Promise), { Promise: Promise });\n  })(global[PROMISE]);\n\n  /******************************************************************************\n   * Module : es6.collections                                                   *\n   ******************************************************************************/\n\n  // ECMAScript 6 collections shim\n  !(function () {\n    var UID = safeSymbol(\"uid\"),\n        O1 = safeSymbol(\"O1\"),\n        WEAK = safeSymbol(\"weak\"),\n        LEAK = safeSymbol(\"leak\"),\n        LAST = safeSymbol(\"last\"),\n        FIRST = safeSymbol(\"first\"),\n        SIZE = DESC ? safeSymbol(\"size\") : \"size\",\n        uid = 0,\n        tmp = {};\n\n    function getCollection(C, NAME, methods, commonMethods, isMap, isWeak) {\n      var ADDER = isMap ? \"set\" : \"add\",\n          proto = C && C[PROTOTYPE],\n          O = {};\n      function initFromIterable(that, iterable) {\n        if (iterable != undefined) forOf(iterable, isMap, that[ADDER], that);\n        return that;\n      }\n      function fixSVZ(key, chain) {\n        var method = proto[key];\n        if (framework) proto[key] = function (a, b) {\n          var result = method.call(this, a === 0 ? 0 : a, b);\n          return chain ? this : result;\n        };\n      }\n      if (!isNative(C) || !(isWeak || !BUGGY_ITERATORS && has(proto, FOR_EACH) && has(proto, \"entries\"))) {\n        // create collection constructor\n        C = isWeak ? function (iterable) {\n          assertInstance(this, C, NAME);\n          set(this, UID, uid++);\n          initFromIterable(this, iterable);\n        } : function (iterable) {\n          var that = this;\n          assertInstance(that, C, NAME);\n          set(that, O1, create(null));\n          set(that, SIZE, 0);\n          set(that, LAST, undefined);\n          set(that, FIRST, undefined);\n          initFromIterable(that, iterable);\n        };\n        assignHidden(assignHidden(C[PROTOTYPE], methods), commonMethods);\n        isWeak || !DESC || defineProperty(C[PROTOTYPE], \"size\", { get: function get() {\n            return assertDefined(this[SIZE]);\n          } });\n      } else {\n        var Native = C,\n            inst = new C(),\n            chain = inst[ADDER](isWeak ? {} : -0, 1),\n            buggyZero;\n        // wrap to init collections from iterable\n        if (checkDangerIterClosing(function (O) {\n          new C(O);\n        })) {\n          C = function (iterable) {\n            assertInstance(this, C, NAME);\n            return initFromIterable(new Native(), iterable);\n          };\n          C[PROTOTYPE] = proto;\n          if (framework) proto[CONSTRUCTOR] = C;\n        }\n        isWeak || inst[FOR_EACH](function (val, key) {\n          buggyZero = 1 / key === -Infinity;\n        });\n        // fix converting -0 key to +0\n        if (buggyZero) {\n          fixSVZ(\"delete\");\n          fixSVZ(\"has\");\n          isMap && fixSVZ(\"get\");\n        }\n        // + fix .add & .set for chaining\n        if (buggyZero || chain !== inst) fixSVZ(ADDER, true);\n      }\n      setToStringTag(C, NAME);\n      setSpecies(C);\n\n      O[NAME] = C;\n      $define(GLOBAL + WRAP + FORCED * !isNative(C), O);\n\n      // add .keys, .values, .entries, [@@iterator]\n      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n      isWeak || defineStdIterators(C, NAME, function (iterated, kind) {\n        set(this, ITER, { o: iterated, k: kind });\n      }, function () {\n        var iter = this[ITER],\n            kind = iter.k,\n            entry = iter.l;\n        // revert to the last existing entry\n        while (entry && entry.r) entry = entry.p;\n        // get next entry\n        if (!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])) {\n          // or finish the iteration\n          iter.o = undefined;\n          return iterResult(1);\n        }\n        // return step by kind\n        if (kind == KEY) return iterResult(0, entry.k);\n        if (kind == VALUE) return iterResult(0, entry.v);\n        return iterResult(0, [entry.k, entry.v]);\n      }, isMap ? KEY + VALUE : VALUE, !isMap);\n\n      return C;\n    }\n\n    function fastKey(it, create) {\n      // return primitive with prefix\n      if (!isObject(it)) {\n        return (typeof it == \"string\" ? \"S\" : \"P\") + it;\n      } // can't set id to frozen object\n      if (isFrozen(it)) {\n        return \"F\";\n      }if (!has(it, UID)) {\n        // not necessary to add id\n        if (!create) {\n          return \"E\";\n        } // add missing object id\n        hidden(it, UID, ++uid);\n        // return object id with prefix\n      }return \"O\" + it[UID];\n    }\n    function getEntry(that, key) {\n      // fast case\n      var index = fastKey(key),\n          entry;\n      if (index != \"F\") {\n        return that[O1][index];\n      } // frozen object case\n      for (entry = that[FIRST]; entry; entry = entry.n) {\n        if (entry.k == key) {\n          return entry;\n        }\n      }\n    }\n    function def(that, key, value) {\n      var entry = getEntry(that, key),\n          prev,\n          index;\n      // change existing entry\n      if (entry) entry.v = value;\n      // create new entry\n      else {\n        that[LAST] = entry = {\n          i: index = fastKey(key, true), // <- index\n          k: key, // <- key\n          v: value, // <- value\n          p: prev = that[LAST], // <- previous entry\n          n: undefined, // <- next entry\n          r: false // <- removed\n        };\n        if (!that[FIRST]) that[FIRST] = entry;\n        if (prev) prev.n = entry;\n        that[SIZE]++;\n        // add to index\n        if (index != \"F\") that[O1][index] = entry;\n      }return that;\n    }\n\n    var collectionMethods = {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that[FIRST] = that[LAST] = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      \"delete\": function (key) {\n        var that = this,\n            entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n,\n              prev = entry.p;\n          delete that[O1][entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that[FIRST] == entry) that[FIRST] = next;\n          if (that[LAST] == entry) that[LAST] = prev;\n          that[SIZE]--;\n        }return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */) {\n        var f = ctx(callbackfn, arguments[1], 3),\n            entry;\n        while (entry = entry ? entry.n : this[FIRST]) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(this, key);\n      }\n    };\n\n    // 23.1 Map Objects\n    Map = getCollection(Map, MAP, {\n      // 23.1.3.6 Map.prototype.get(key)\n      get: function get(key) {\n        var entry = getEntry(this, key);\n        return entry && entry.v;\n      },\n      // 23.1.3.9 Map.prototype.set(key, value)\n      set: function set(key, value) {\n        return def(this, key === 0 ? 0 : key, value);\n      }\n    }, collectionMethods, true);\n\n    // 23.2 Set Objects\n    Set = getCollection(Set, SET, {\n      // 23.2.3.1 Set.prototype.add(value)\n      add: function add(value) {\n        return def(this, value = value === 0 ? 0 : value, value);\n      }\n    }, collectionMethods);\n\n    function defWeak(that, key, value) {\n      if (isFrozen(assertObject(key))) leakStore(that).set(key, value);else {\n        has(key, WEAK) || hidden(key, WEAK, {});\n        key[WEAK][that[UID]] = value;\n      }return that;\n    }\n    function leakStore(that) {\n      return that[LEAK] || hidden(that, LEAK, new Map())[LEAK];\n    }\n\n    var weakMethods = {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      \"delete\": function (key) {\n        if (!isObject(key)) return false;\n        if (isFrozen(key)) return leakStore(this)[\"delete\"](key);\n        return has(key, WEAK) && has(key[WEAK], this[UID]) && delete key[WEAK][this[UID]];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: (function (_has) {\n        var _hasWrapper = function has(_x) {\n          return _has.apply(this, arguments);\n        };\n\n        _hasWrapper.toString = function () {\n          return _has.toString();\n        };\n\n        return _hasWrapper;\n      })(function (key) {\n        if (!isObject(key)) return false;\n        if (isFrozen(key)) return leakStore(this).has(key);\n        return has(key, WEAK) && has(key[WEAK], this[UID]);\n      })\n    };\n\n    // 23.3 WeakMap Objects\n    WeakMap = getCollection(WeakMap, WEAKMAP, {\n      // 23.3.3.3 WeakMap.prototype.get(key)\n      get: function get(key) {\n        if (isObject(key)) {\n          if (isFrozen(key)) {\n            return leakStore(this).get(key);\n          }if (has(key, WEAK)) {\n            return key[WEAK][this[UID]];\n          }\n        }\n      },\n      // 23.3.3.5 WeakMap.prototype.set(key, value)\n      set: function set(key, value) {\n        return defWeak(this, key, value);\n      }\n    }, weakMethods, true, true);\n\n    // IE11 WeakMap frozen keys fix\n    if (framework && new WeakMap().set(Object.freeze(tmp), 7).get(tmp) != 7) {\n      forEach.call(array(\"delete,has,get,set\"), function (key) {\n        var method = WeakMap[PROTOTYPE][key];\n        WeakMap[PROTOTYPE][key] = function (a, b) {\n          // store frozen objects on leaky map\n          if (isObject(a) && isFrozen(a)) {\n            var result = leakStore(this)[key](a, b);\n            return key == \"set\" ? this : result;\n            // store all the rest on native weakmap\n          }return method.call(this, a, b);\n        };\n      });\n    }\n\n    // 23.4 WeakSet Objects\n    WeakSet = getCollection(WeakSet, WEAKSET, {\n      // 23.4.3.1 WeakSet.prototype.add(value)\n      add: function add(value) {\n        return defWeak(this, value, true);\n      }\n    }, weakMethods, false, true);\n  })();\n\n  /******************************************************************************\n   * Module : es6.reflect                                                       *\n   ******************************************************************************/\n\n  !(function () {\n    function Enumerate(iterated) {\n      var keys = [],\n          key;\n      for (key in iterated) keys.push(key);\n      set(this, ITER, { o: iterated, a: keys, i: 0 });\n    }\n    createIterator(Enumerate, OBJECT, function () {\n      var iter = this[ITER],\n          keys = iter.a,\n          key;\n      do {\n        if (iter.i >= keys.length) return iterResult(1);\n      } while (!((key = keys[iter.i++]) in iter.o));\n      return iterResult(0, key);\n    });\n\n    function wrap(fn) {\n      return function (it) {\n        assertObject(it);\n        try {\n          return (fn.apply(undefined, arguments), true);\n        } catch (e) {\n          return false;\n        }\n      };\n    }\n\n    function reflectGet(_x, _x2) {\n      var _arguments = arguments;\n      var _again = true;\n\n      _function: while (_again) {\n        _again = false;\n        var target = _x,\n            propertyKey /*, receiver*/ = _x2;\n        receiver = desc = proto = undefined;\n\n        var receiver = _arguments.length < 3 ? target : _arguments[2],\n            desc = getOwnDescriptor(assertObject(target), propertyKey),\n            proto;\n        if (desc) {\n          return has(desc, \"value\") ? desc.value : desc.get === undefined ? undefined : desc.get.call(receiver);\n        }if (isObject(proto = getPrototypeOf(target))) {\n          _arguments = [_x = proto, _x2 = propertyKey, receiver];\n          _again = true;\n          continue _function;\n        } else {\n          return undefined;\n        }\n      }\n    }\n    function reflectSet(_x, _x2, _x3) {\n      var _arguments = arguments;\n      var _again = true;\n\n      _function: while (_again) {\n        _again = false;\n        var target = _x,\n            propertyKey = _x2,\n            V /*, receiver*/ = _x3;\n        receiver = ownDesc = existingDescriptor = proto = undefined;\n\n        var receiver = _arguments.length < 4 ? target : _arguments[3],\n            ownDesc = getOwnDescriptor(assertObject(target), propertyKey),\n            existingDescriptor,\n            proto;\n        if (!ownDesc) {\n          if (isObject(proto = getPrototypeOf(target))) {\n            _arguments = [_x = proto, _x2 = propertyKey, _x3 = V, receiver];\n            _again = true;\n            continue _function;\n          }\n          ownDesc = descriptor(0);\n        }\n        if (has(ownDesc, \"value\")) {\n          if (ownDesc.writable === false || !isObject(receiver)) {\n            return false;\n          }existingDescriptor = getOwnDescriptor(receiver, propertyKey) || descriptor(0);\n          existingDescriptor.value = V;\n          return (defineProperty(receiver, propertyKey, existingDescriptor), true);\n        }\n        return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n      }\n    }\n    var isExtensible = Object.isExtensible || returnIt;\n\n    var reflect = {\n      // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\n      apply: ctx(call, apply, 3),\n      // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\n      construct: function construct(target, argumentsList /*, newTarget*/) {\n        var proto = assertFunction(arguments.length < 3 ? target : arguments[2])[PROTOTYPE],\n            instance = create(isObject(proto) ? proto : ObjectProto),\n            result = apply.call(target, instance, argumentsList);\n        return isObject(result) ? result : instance;\n      },\n      // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\n      defineProperty: wrap(defineProperty),\n      // 26.1.4 Reflect.deleteProperty(target, propertyKey)\n      deleteProperty: function deleteProperty(target, propertyKey) {\n        var desc = getOwnDescriptor(assertObject(target), propertyKey);\n        return desc && !desc.configurable ? false : delete target[propertyKey];\n      },\n      // 26.1.5 Reflect.enumerate(target)\n      enumerate: function enumerate(target) {\n        return new Enumerate(assertObject(target));\n      },\n      // 26.1.6 Reflect.get(target, propertyKey [, receiver])\n      get: reflectGet,\n      // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n        return getOwnDescriptor(assertObject(target), propertyKey);\n      },\n      // 26.1.8 Reflect.getPrototypeOf(target)\n      getPrototypeOf: (function (_getPrototypeOf) {\n        var _getPrototypeOfWrapper = function getPrototypeOf(_x) {\n          return _getPrototypeOf.apply(this, arguments);\n        };\n\n        _getPrototypeOfWrapper.toString = function () {\n          return _getPrototypeOf.toString();\n        };\n\n        return _getPrototypeOfWrapper;\n      })(function (target) {\n        return getPrototypeOf(assertObject(target));\n      }),\n      // 26.1.9 Reflect.has(target, propertyKey)\n      has: function has(target, propertyKey) {\n        return propertyKey in target;\n      },\n      // 26.1.10 Reflect.isExtensible(target)\n      isExtensible: (function (_isExtensible) {\n        var _isExtensibleWrapper = function isExtensible(_x) {\n          return _isExtensible.apply(this, arguments);\n        };\n\n        _isExtensibleWrapper.toString = function () {\n          return _isExtensible.toString();\n        };\n\n        return _isExtensibleWrapper;\n      })(function (target) {\n        return !!isExtensible(assertObject(target));\n      }),\n      // 26.1.11 Reflect.ownKeys(target)\n      ownKeys: ownKeys,\n      // 26.1.12 Reflect.preventExtensions(target)\n      preventExtensions: wrap(Object.preventExtensions || returnIt),\n      // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\n      set: reflectSet\n    };\n    // 26.1.14 Reflect.setPrototypeOf(target, proto)\n    if (setPrototypeOf) reflect.setPrototypeOf = function (target, proto) {\n      return (setPrototypeOf(assertObject(target), proto), true);\n    };\n\n    $define(GLOBAL, { Reflect: {} });\n    $define(STATIC, \"Reflect\", reflect);\n  })();\n\n  /******************************************************************************\n   * Module : es7.proposals                                                     *\n   ******************************************************************************/\n\n  !(function () {\n    $define(PROTO, ARRAY, {\n      // https://github.com/domenic/Array.prototype.includes\n      includes: createArrayContains(true)\n    });\n    $define(PROTO, STRING, {\n      // https://github.com/mathiasbynens/String.prototype.at\n      at: createPointAt(true)\n    });\n\n    function createObjectToArray(isEntries) {\n      return function (object) {\n        var O = toObject(object),\n            keys = getKeys(object),\n            length = keys.length,\n            i = 0,\n            result = Array(length),\n            key;\n        if (isEntries) while (length > i) result[i] = [key = keys[i++], O[key]];else while (length > i) result[i] = O[keys[i++]];\n        return result;\n      };\n    }\n    $define(STATIC, OBJECT, {\n      // https://gist.github.com/WebReflection/9353781\n      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n        var O = toObject(object),\n            result = {};\n        forEach.call(ownKeys(O), function (key) {\n          defineProperty(result, key, descriptor(0, getOwnDescriptor(O, key)));\n        });\n        return result;\n      },\n      // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-9.md#51-objectentries-objectvalues\n      values: createObjectToArray(false),\n      entries: createObjectToArray(true)\n    });\n    $define(STATIC, REGEXP, {\n      // https://gist.github.com/kangax/9698100\n      escape: createReplacer(/([\\\\\\-[\\]{}()*+?.,^$|])/g, \"\\\\$1\", true)\n    });\n  })();\n\n  /******************************************************************************\n   * Module : es7.abstract-refs                                                 *\n   ******************************************************************************/\n\n  // https://github.com/zenparsing/es-abstract-refs\n  !(function (REFERENCE) {\n    REFERENCE_GET = getWellKnownSymbol(REFERENCE + \"Get\", true);\n    var REFERENCE_SET = getWellKnownSymbol(REFERENCE + SET, true),\n        REFERENCE_DELETE = getWellKnownSymbol(REFERENCE + \"Delete\", true);\n\n    $define(STATIC, SYMBOL, {\n      referenceGet: REFERENCE_GET,\n      referenceSet: REFERENCE_SET,\n      referenceDelete: REFERENCE_DELETE\n    });\n\n    hidden(FunctionProto, REFERENCE_GET, returnThis);\n\n    function setMapMethods(Constructor) {\n      if (Constructor) {\n        var MapProto = Constructor[PROTOTYPE];\n        hidden(MapProto, REFERENCE_GET, MapProto.get);\n        hidden(MapProto, REFERENCE_SET, MapProto.set);\n        hidden(MapProto, REFERENCE_DELETE, MapProto[\"delete\"]);\n      }\n    }\n    setMapMethods(Map);\n    setMapMethods(WeakMap);\n  })(\"reference\");\n\n  /******************************************************************************\n   * Module : core.dict                                                         *\n   ******************************************************************************/\n\n  !(function (DICT) {\n    Dict = function (iterable) {\n      var dict = create(null);\n      if (iterable != undefined) {\n        if (isIterable(iterable)) {\n          forOf(iterable, true, function (key, value) {\n            dict[key] = value;\n          });\n        } else assign(dict, iterable);\n      }\n      return dict;\n    };\n    Dict[PROTOTYPE] = null;\n\n    function DictIterator(iterated, kind) {\n      set(this, ITER, { o: toObject(iterated), a: getKeys(iterated), i: 0, k: kind });\n    }\n    createIterator(DictIterator, DICT, function () {\n      var iter = this[ITER],\n          O = iter.o,\n          keys = iter.a,\n          kind = iter.k,\n          key;\n      do {\n        if (iter.i >= keys.length) {\n          iter.o = undefined;\n          return iterResult(1);\n        }\n      } while (!has(O, key = keys[iter.i++]));\n      if (kind == KEY) return iterResult(0, key);\n      if (kind == VALUE) return iterResult(0, O[key]);\n      return iterResult(0, [key, O[key]]);\n    });\n    function createDictIter(kind) {\n      return function (it) {\n        return new DictIterator(it, kind);\n      };\n    }\n\n    /*\r\n     * 0 -> forEach\r\n     * 1 -> map\r\n     * 2 -> filter\r\n     * 3 -> some\r\n     * 4 -> every\r\n     * 5 -> find\r\n     * 6 -> findKey\r\n     * 7 -> mapPairs\r\n     */\n    function createDictMethod(type) {\n      var isMap = type == 1,\n          isEvery = type == 4;\n      return function (object, callbackfn, that /* = undefined */) {\n        var f = ctx(callbackfn, that, 3),\n            O = toObject(object),\n            result = isMap || type == 7 || type == 2 ? new (generic(this, Dict))() : undefined,\n            key,\n            val,\n            res;\n        for (key in O) if (has(O, key)) {\n          val = O[key];\n          res = f(val, key, object);\n          if (type) {\n            if (isMap) result[key] = res; // map\n            else if (res) switch (type) {\n              case 2:\n                result[key] = val;break; // filter\n              case 3:\n                return true; // some\n              case 5:\n                return val; // find\n              case 6:\n                return key; // findKey\n              case 7:\n                result[res[0]] = res[1]; // mapPairs\n            } else if (isEvery) return false; // every\n          }\n        }\n        return type == 3 || isEvery ? isEvery : result;\n      };\n    }\n    function createDictReduce(isTurn) {\n      return function (object, mapfn, init) {\n        assertFunction(mapfn);\n        var O = toObject(object),\n            keys = getKeys(O),\n            length = keys.length,\n            i = 0,\n            memo,\n            key,\n            result;\n        if (isTurn) memo = init == undefined ? new (generic(this, Dict))() : Object(init);else if (arguments.length < 3) {\n          assert(length, REDUCE_ERROR);\n          memo = O[keys[i++]];\n        } else memo = Object(init);\n        while (length > i) if (has(O, key = keys[i++])) {\n          result = mapfn(memo, O[key], key, object);\n          if (isTurn) {\n            if (result === false) break;\n          } else memo = result;\n        }\n        return memo;\n      };\n    }\n    var findKey = createDictMethod(6);\n    function includes(object, el) {\n      return (el == el ? keyOf(object, el) : findKey(object, sameNaN)) !== undefined;\n    }\n\n    var dictMethods = {\n      keys: createDictIter(KEY),\n      values: createDictIter(VALUE),\n      entries: createDictIter(KEY + VALUE),\n      forEach: createDictMethod(0),\n      map: createDictMethod(1),\n      filter: createDictMethod(2),\n      some: createDictMethod(3),\n      every: createDictMethod(4),\n      find: createDictMethod(5),\n      findKey: findKey,\n      mapPairs: createDictMethod(7),\n      reduce: createDictReduce(false),\n      turn: createDictReduce(true),\n      keyOf: keyOf,\n      includes: includes,\n      // Has / get / set own property\n      has: has,\n      get: get,\n      set: createDefiner(0),\n      isDict: function isDict(it) {\n        return isObject(it) && getPrototypeOf(it) === Dict[PROTOTYPE];\n      }\n    };\n\n    if (REFERENCE_GET) for (var key in dictMethods) !(function (fn) {\n      function method() {\n        for (var args = [this], i = 0; i < arguments.length;) args.push(arguments[i++]);\n        return invoke(fn, args);\n      }\n      fn[REFERENCE_GET] = function () {\n        return method;\n      };\n    })(dictMethods[key]);\n\n    $define(GLOBAL + FORCED, { Dict: assignHidden(Dict, dictMethods) });\n  })(\"Dict\");\n\n  /******************************************************************************\n   * Module : core.$for                                                         *\n   ******************************************************************************/\n\n  !(function (ENTRIES, FN) {\n    function $for(iterable, entries) {\n      if (!(this instanceof $for)) {\n        return new $for(iterable, entries);\n      }this[ITER] = getIterator(iterable);\n      this[ENTRIES] = !!entries;\n    }\n\n    createIterator($for, \"Wrapper\", function () {\n      return this[ITER].next();\n    });\n    var $forProto = $for[PROTOTYPE];\n    setIterator($forProto, function () {\n      return this[ITER]; // unwrap\n    });\n\n    function createChainIterator(next) {\n      function Iter(I, fn, that) {\n        this[ITER] = getIterator(I);\n        this[ENTRIES] = I[ENTRIES];\n        this[FN] = ctx(fn, that, I[ENTRIES] ? 2 : 1);\n      }\n      createIterator(Iter, \"Chain\", next, $forProto);\n      setIterator(Iter[PROTOTYPE], returnThis); // override $forProto iterator\n      return Iter;\n    }\n\n    var MapIter = createChainIterator(function () {\n      var step = this[ITER].next();\n      return step.done ? step : iterResult(0, stepCall(this[FN], step.value, this[ENTRIES]));\n    });\n\n    var FilterIter = createChainIterator(function () {\n      for (;;) {\n        var step = this[ITER].next();\n        if (step.done || stepCall(this[FN], step.value, this[ENTRIES])) return step;\n      }\n    });\n\n    assignHidden($forProto, {\n      of: function of(fn, that) {\n        forOf(this, this[ENTRIES], fn, that);\n      },\n      array: function array(fn, that) {\n        var result = [];\n        forOf(fn != undefined ? this.map(fn, that) : this, false, push, result);\n        return result;\n      },\n      filter: function filter(fn, that) {\n        return new FilterIter(this, fn, that);\n      },\n      map: function map(fn, that) {\n        return new MapIter(this, fn, that);\n      }\n    });\n\n    $for.isIterable = isIterable;\n    $for.getIterator = getIterator;\n\n    $define(GLOBAL + FORCED, { $for: $for });\n  })(\"entries\", safeSymbol(\"fn\"));\n\n  /******************************************************************************\n   * Module : core.delay                                                        *\n   ******************************************************************************/\n\n  // https://esdiscuss.org/topic/promise-returning-delay-function\n  $define(GLOBAL + FORCED, {\n    delay: function delay(time) {\n      return new _core.Promise(function (resolve) {\n        setTimeout(resolve, time, true);\n      });\n    }\n  });\n\n  /******************************************************************************\n   * Module : core.binding                                                      *\n   ******************************************************************************/\n\n  !(function (_, toLocaleString) {\n    // Placeholder\n    core._ = path._ = path._ || {};\n\n    $define(PROTO + FORCED, FUNCTION, {\n      part: part,\n      only: function only(numberArguments, that /* = @ */) {\n        var fn = assertFunction(this),\n            n = toLength(numberArguments),\n            isThat = arguments.length > 1;\n        return function () {\n          var length = min(n, arguments.length),\n              args = Array(length),\n              i = 0;\n          while (length > i) args[i] = arguments[i++];\n          return invoke(fn, args, isThat ? that : this);\n        };\n      }\n    });\n\n    function tie(key) {\n      var that = this,\n          bound = {};\n      return hidden(that, _, function (key) {\n        if (key === undefined || !(key in that)) return toLocaleString.call(that);\n        return has(bound, key) ? bound[key] : bound[key] = ctx(that[key], that, -1);\n      })[_](key);\n    }\n\n    hidden(path._, TO_STRING, function () {\n      return _;\n    });\n\n    hidden(ObjectProto, _, tie);\n    DESC || hidden(ArrayProto, _, tie);\n    // IE8- dirty hack - redefined toLocaleString is not enumerable\n  })(DESC ? uid(\"tie\") : TO_LOCALE, ObjectProto[TO_LOCALE]);\n\n  /******************************************************************************\n   * Module : core.object                                                       *\n   ******************************************************************************/\n\n  !(function () {\n    function define(target, mixin) {\n      var keys = ownKeys(toObject(mixin)),\n          length = keys.length,\n          i = 0,\n          key;\n      while (length > i) defineProperty(target, key = keys[i++], getOwnDescriptor(mixin, key));\n      return target;\n    };\n    $define(STATIC + FORCED, OBJECT, {\n      isObject: isObject,\n      classof: classof,\n      define: define,\n      make: function make(proto, mixin) {\n        return define(create(proto), mixin);\n      }\n    });\n  })();\n\n  /******************************************************************************\n   * Module : core.array                                                        *\n   ******************************************************************************/\n\n  $define(PROTO + FORCED, ARRAY, {\n    turn: function turn(fn, target /* = [] */) {\n      assertFunction(fn);\n      var memo = target == undefined ? [] : Object(target),\n          O = ES5Object(this),\n          length = toLength(O.length),\n          index = 0;\n      while (length > index) if (fn(memo, O[index], index++, this) === false) break;\n      return memo;\n    }\n  });\n  if (framework) ArrayUnscopables.turn = true;\n\n  /******************************************************************************\n   * Module : core.number                                                       *\n   ******************************************************************************/\n\n  !(function (numberMethods) {\n    function NumberIterator(iterated) {\n      set(this, ITER, { l: toLength(iterated), i: 0 });\n    }\n    createIterator(NumberIterator, NUMBER, function () {\n      var iter = this[ITER],\n          i = iter.i++;\n      return i < iter.l ? iterResult(0, i) : iterResult(1);\n    });\n    defineIterator(Number, NUMBER, function () {\n      return new NumberIterator(this);\n    });\n\n    numberMethods.random = function (lim /* = 0 */) {\n      var a = +this,\n          b = lim == undefined ? 0 : +lim,\n          m = min(a, b);\n      return random() * (max(a, b) - m) + m;\n    };\n\n    forEach.call(array(\n    // ES3:\n    \"round,floor,ceil,abs,sin,asin,cos,acos,tan,atan,exp,sqrt,max,min,pow,atan2,\" +\n    // ES6:\n    \"acosh,asinh,atanh,cbrt,clz32,cosh,expm1,hypot,imul,log1p,log10,log2,sign,sinh,tanh,trunc\"), function (key) {\n      var fn = Math[key];\n      if (fn) numberMethods[key] = function () {\n        // ie9- dont support strict mode & convert `this` to object -> convert it to number\n        var args = [+this],\n            i = 0;\n        while (arguments.length > i) args.push(arguments[i++]);\n        return invoke(fn, args);\n      };\n    });\n\n    $define(PROTO + FORCED, NUMBER, numberMethods);\n  })({});\n\n  /******************************************************************************\n   * Module : core.string                                                       *\n   ******************************************************************************/\n\n  !(function () {\n    var escapeHTMLDict = {\n      \"&\": \"&amp;\",\n      \"<\": \"&lt;\",\n      \">\": \"&gt;\",\n      \"\\\"\": \"&quot;\",\n      \"'\": \"&apos;\"\n    },\n        unescapeHTMLDict = {},\n        key;\n    for (key in escapeHTMLDict) unescapeHTMLDict[escapeHTMLDict[key]] = key;\n    $define(PROTO + FORCED, STRING, {\n      escapeHTML: createReplacer(/[&<>\"']/g, escapeHTMLDict),\n      unescapeHTML: createReplacer(/&(?:amp|lt|gt|quot|apos);/g, unescapeHTMLDict)\n    });\n  })();\n\n  /******************************************************************************\n   * Module : core.date                                                         *\n   ******************************************************************************/\n\n  !(function (formatRegExp, flexioRegExp, locales, current, SECONDS, MINUTES, HOURS, MONTH, YEAR) {\n    function createFormat(prefix) {\n      return function (template, locale /* = current */) {\n        var that = this,\n            dict = locales[has(locales, locale) ? locale : current];\n        function get(unit) {\n          return that[prefix + unit]();\n        }\n        return String(template).replace(formatRegExp, function (part) {\n          switch (part) {\n            case \"s\":\n              return get(SECONDS); // Seconds : 0-59\n            case \"ss\":\n              return lz(get(SECONDS)); // Seconds : 00-59\n            case \"m\":\n              return get(MINUTES); // Minutes : 0-59\n            case \"mm\":\n              return lz(get(MINUTES)); // Minutes : 00-59\n            case \"h\":\n              return get(HOURS); // Hours   : 0-23\n            case \"hh\":\n              return lz(get(HOURS)); // Hours   : 00-23\n            case \"D\":\n              return get(DATE); // Date    : 1-31\n            case \"DD\":\n              return lz(get(DATE)); // Date    : 01-31\n            case \"W\":\n              return dict[0][get(\"Day\")]; // Day     : Понедельник\n            case \"N\":\n              return get(MONTH) + 1; // Month   : 1-12\n            case \"NN\":\n              return lz(get(MONTH) + 1); // Month   : 01-12\n            case \"M\":\n              return dict[2][get(MONTH)]; // Month   : Январь\n            case \"MM\":\n              return dict[1][get(MONTH)]; // Month   : Января\n            case \"Y\":\n              return get(YEAR); // Year    : 2014\n            case \"YY\":\n              return lz(get(YEAR) % 100); // Year    : 14\n          }return part;\n        });\n      };\n    }\n    function addLocale(lang, locale) {\n      function split(index) {\n        var result = [];\n        forEach.call(array(locale.months), function (it) {\n          result.push(it.replace(flexioRegExp, \"$\" + index));\n        });\n        return result;\n      }\n      locales[lang] = [array(locale.weekdays), split(1), split(2)];\n      return core;\n    }\n    $define(PROTO + FORCED, DATE, {\n      format: createFormat(\"get\"),\n      formatUTC: createFormat(\"getUTC\")\n    });\n    addLocale(current, {\n      weekdays: \"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday\",\n      months: \"January,February,March,April,May,June,July,August,September,October,November,December\"\n    });\n    addLocale(\"ru\", {\n      weekdays: \"Воскресенье,Понедельник,Вторник,Среда,Четверг,Пятница,Суббота\",\n      months: \"Январ:я|ь,Феврал:я|ь,Март:а|,Апрел:я|ь,Ма:я|й,Июн:я|ь,\" + \"Июл:я|ь,Август:а|,Сентябр:я|ь,Октябр:я|ь,Ноябр:я|ь,Декабр:я|ь\"\n    });\n    core.locale = function (locale) {\n      return has(locales, locale) ? current = locale : current;\n    };\n    core.addLocale = addLocale;\n  })(/\\b\\w\\w?\\b/g, /:(.*)\\|(.*)$/, {}, \"en\", \"Seconds\", \"Minutes\", \"Hours\", \"Month\", \"FullYear\");\n\n  /******************************************************************************\n   * Module : core.global                                                       *\n   ******************************************************************************/\n\n  $define(GLOBAL + FORCED, { global: global });\n\n  /******************************************************************************\n   * Module : js.array.statics                                                  *\n   ******************************************************************************/\n\n  // JavaScript 1.6 / Strawman array statics shim\n  !(function (arrayStatics) {\n    function setArrayStatics(keys, length) {\n      forEach.call(array(keys), function (key) {\n        if (key in ArrayProto) arrayStatics[key] = ctx(call, ArrayProto[key], length);\n      });\n    }\n    setArrayStatics(\"pop,reverse,shift,keys,values,entries\", 1);\n    setArrayStatics(\"indexOf,every,some,forEach,map,filter,find,findIndex,includes\", 3);\n    setArrayStatics(\"join,slice,concat,push,splice,unshift,sort,lastIndexOf,\" + \"reduce,reduceRight,copyWithin,fill,turn\");\n    $define(STATIC, ARRAY, arrayStatics);\n  })({});\n\n  /******************************************************************************\n   * Module : web.dom.itarable                                                  *\n   ******************************************************************************/\n\n  !(function (NodeList) {\n    if (framework && NodeList && !(SYMBOL_ITERATOR in NodeList[PROTOTYPE])) {\n      hidden(NodeList[PROTOTYPE], SYMBOL_ITERATOR, Iterators[ARRAY]);\n    }\n    Iterators.NodeList = Iterators[ARRAY];\n  })(global.NodeList);\n\n  /******************************************************************************\n   * Module : core.log                                                          *\n   ******************************************************************************/\n\n  !(function (log, enabled) {\n    // Methods from https://github.com/DeveloperToolsWG/console-object/blob/master/api.md\n    forEach.call(array(\"assert,clear,count,debug,dir,dirxml,error,exception,\" + \"group,groupCollapsed,groupEnd,info,isIndependentlyComposed,log,\" + \"markTimeline,profile,profileEnd,table,time,timeEnd,timeline,\" + \"timelineEnd,timeStamp,trace,warn\"), function (key) {\n      log[key] = function () {\n        if (enabled && key in console) return apply.call(console[key], console, arguments);\n      };\n    });\n    $define(GLOBAL + FORCED, { log: assign(log.log, log, {\n        enable: function enable() {\n          enabled = true;\n        },\n        disable: function disable() {\n          enabled = false;\n        }\n      }) });\n  })({}, true);\n})(typeof self != \"undefined\" && self.Math === Math ? self : Function(\"return this\")(), false);\nmodule.exports = { \"default\": module.exports, __esModule: true };\n/* ...args */ /* ...args */ /* ...args */ /* ...args */\n// default node.js behavior\n/* ...args */ /* ...args */\n//# sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ]);