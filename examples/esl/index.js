// Generated by CoffeeScript 1.6.1
'use strict';
var Color, Component, Container, Engine, Entity, Esl, GameController, Pool, Renderer, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('../../lib/core/math').Vec2;

Engine = require('../../lib/core/engine');

Engine.init(document.getElementById('game-1'));

Renderer = require('../../lib/core/renderer');

Engine.renderer = new Renderer(Engine.element.getElementsByClassName('game-canvas')[0], Vec2(480, 290));

Entity = require('../../lib/core/entity');

Component = require('../../lib/core/component');

Pool = require('../../lib/core/pool');

Color = require('../../lib/core/color');

require('../../lib/core/transform');

require('../../lib/core/border');

Container = require('../../lib/vendor/esl/container');

Esl = require('../../lib/vendor/esl/esl');

GameController = (function(_super) {

  __extends(GameController, _super);

  function GameController() {
    return GameController.__super__.constructor.apply(this, arguments);
  }

  GameController.prototype.tag = 'gameController';

  GameController.prototype.instantiate = function() {
    var i, _i;
    this.root.gravity = Vec2(0, 0);
    for (i = _i = 0; _i <= 1; i = ++_i) {
      this.spawnBox();
    }
    return this;
  };

  GameController.prototype.spawnBox = function() {
    Entity.alloc(this.root, {
      transform: {
        pos: Vec2(Math.rand(25, 450), Math.rand(25, 265))
      },
      eslContainer: {
        child: function() {
          var circle;
          circle = new Esl.Shape();
          circle.graphics.beginFill("red").drawCircle(0, 0, 40);
          return circle;
        }
      }
    });
    return this;
  };

  return GameController;

})(Component);

new Pool(GameController);

Engine.gameScene = Entity.alloc(null, {
  gameController: null
});

Engine.debug.stats = true;

Engine.play(Engine.gameScene);
