// Generated by CoffeeScript 1.4.0
'use strict';

var Border, Collider, Component, Composite, EnemyPrefab, Engine, ExplosionPrefab, GameController, Kinetic, MagicianPrefab, Pool, Renderer, Sprite, Transform, Vec2, defaultSequence, explisionSheetBlue, explisionSheetFire, grinchSheet, magicianSheet,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('../../lib/core/math').Vec2;

Engine = require('../../lib/core/engine');

Engine.init(document.getElementById('game-1'));

Renderer = require('../../lib/core/renderer');

Engine.renderer = new Renderer(Engine.element.getElementsByClassName('game-canvas')[0], Vec2(480, 320));

Composite = require('../../lib/core/composite');

Component = require('../../lib/core/component');

Pool = require('../../lib/core/pool');

Sprite = require('../../lib/core/sprite');

Transform = require('../../lib/core/transform');

Border = require('../../lib/core/border');

Collider = require('../../lib/core/collider');

Kinetic = require('../../lib/core/kinetic');

GameController = (function(_super) {

  __extends(GameController, _super);

  function GameController() {
    return GameController.__super__.constructor.apply(this, arguments);
  }

  GameController.prototype.type = 'gameController';

  GameController.prototype.reset = function() {
    var i, _i;
    for (i = _i = 0; _i <= 1; i = ++_i) {
      this.spawnExplosion();
    }
    MagicianPrefab.alloc(this.root, {
      transform: {
        pos: Vec2(240, 200)
      }
    });
    return this;
  };

  GameController.prototype.spawnExplosion = function() {
    ExplosionPrefab.alloc(this.root, {
      transform: {
        pos: Vec2(Math.rand(25, 450), Math.rand(25, 295))
      },
      spriteTween: {
        offset: Math.rand(0, 1)
      }
    });
    return this;
  };

  return GameController;

})(Component);

new Pool(GameController);

explisionSheetBlue = new Sprite.Sheet({
  sprites: new Sprite.Asset('./assets/explosion-blue.jpg'),
  size: Vec2(120, 120),
  speed: 0.12
});

explisionSheetFire = new Sprite.Sheet({
  sprites: new Sprite.Asset('./assets/explosion-fire.png'),
  size: Vec2(192, 192),
  speed: 0.05
});

ExplosionPrefab = new Composite.Prefab({
  transform: null,
  spriteTween: {
    asset: explisionSheetFire,
    composite: 'lighter'
  }
});

defaultSequence = {
  walkS: {
    frames: [0, 1, 2, 1],
    next: 'walkS'
  },
  walkW: {
    frames: [3, 4, 5, 4],
    next: 'walkW'
  },
  walkN: {
    frames: [9, 10, 11, 10],
    next: 'walkN'
  },
  walkE: {
    frames: [6, 7, 8, 7],
    next: 'walkE'
  }
};

magicianSheet = new Sprite.Sheet({
  sprites: new Sprite.Asset('./assets/magician.png'),
  size: Vec2(32, 32),
  speed: 0.15,
  sequences: defaultSequence
});

grinchSheet = new Sprite.Sheet({
  sprites: new Sprite.Asset('./assets/grinch.png'),
  size: Vec2(32, 32),
  speed: 0.15,
  sequences: defaultSequence
});

MagicianPrefab = new Composite.Prefab({
  transform: null,
  spriteTween: {
    asset: magicianSheet,
    sequence: 'walkS'
  }
});

EnemyPrefab = new Composite.Prefab({
  transform: null,
  spriteTween: {
    asset: grinchSheet,
    sequence: 'walkS'
  }
});

Engine.gameScene = Composite.alloc(null, {
  gameController: null
});

Engine.debug.fps = true;

Engine.play(Engine.gameScene);
