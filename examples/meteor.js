// Generated by CoffeeScript 1.3.3
var Collider, Color, Composite, Kinetic, Meteor, Pool, Transform, Vec2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Composite = require('./lib/composite');

Pool = require('./lib/pool');

Vec2 = require('./lib/math').Vec2;

Kinetic = require('./lib/kinetic');

Color = require('./lib/color');

Transform = require('./lib/transform');

Collider = require('./lib/collider');

Meteor = (function(_super) {

  __extends(Meteor, _super);

  Meteor.prototype.type = 'meteor';

  function Meteor() {
    Meteor.__super__.constructor.call(this);
    this.color = Color(120, 120, 120);
    this.shadow = Color(64, 64, 64);
    this.surface = [];
  }

  Meteor.prototype.alloc = function(parent, pos, radius, mass) {
    var i, point, rad, radiusMax, radiusMin, steps, _i, _ref;
    this.radius = radius != null ? radius : 50;
    if (mass == null) {
      mass = this.radius;
    }
    Meteor.__super__.alloc.call(this, parent);
    Transform.alloc(this, pos);
    Kinetic.alloc(this, mass);
    Collider.alloc(this);
    radiusMin = this.radius * 0.9;
    radiusMax = this.radius * 1.1;
    this.surface.length = 0;
    steps = 32;
    for (i = _i = 0, _ref = steps - 1; _i <= _ref; i = _i += 1) {
      rad = i / steps * Math.TAU;
      point = Vec2.rot(Vec2(0, 1), rad);
      Vec2.scal(point, Math.rand(radiusMin, radiusMax));
      this.surface.push(point);
    }
    return this;
  };

  Meteor.prototype.render = function(ctx) {
    var grad, i, offset, point, pos, start, _i, _len, _ref;
    point = Vec2.cache[0];
    start = Vec2.cache[1];
    pos = this.transform.pos;
    ctx.save();
    ctx.fillStyle = Color.rgba(this.color);
    ctx.strokeStyle = Color.rgba(Color.white);
    grad = ctx.createRadialGradient(pos[0] - this.radius / 4, pos[1] - this.radius / 4, 0, pos[0] - this.radius / 4, pos[1] - this.radius / 4, this.radius);
    grad.addColorStop(0, Color.rgba(this.color));
    grad.addColorStop(1, Color.rgba(this.shadow));
    ctx.fillStyle = grad;
    ctx.beginPath();
    _ref = this.surface;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      offset = _ref[i];
      Vec2.add(pos, offset, point);
      if (!i) {
        ctx.moveTo(point[0], point[1]);
        Vec2.copy(start, point);
      } else {
        ctx.lineTo(point[0], point[1]);
      }
    }
    ctx.lineTo(start[0], start[1]);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
    return this;
  };

  return Meteor;

})(Composite);

new Pool(Meteor);

module.exports = Meteor;
