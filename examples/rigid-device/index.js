// Generated by CoffeeScript 1.6.1
'use strict';
var Body, Boid, Border, Bounds, Collider, Color, Component, Composite, Engine, GameController, Kinetic, Particle, Pool, Renderer, Sprite, Transform, Vec2, apps, request, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('../../lib/core/math').Vec2;

Engine = require('../../lib/core/engine');

Engine.init(document.getElementById('game-1'));

Renderer = require('../../lib/core/renderer');

Engine.renderer = new Renderer(Engine.element.getElementsByClassName('game-canvas')[0], Vec2(480, 320));

if ((apps = navigator.mozApps)) {
  url = 'http://testno.de/sputflik/examples/rigid-device/manifest.webapp';
  request = apps.getSelf();
  request.onsuccess = function() {
    return apps.install(url);
  };
  request.onerror = function() {
    return apps.install(url);
  };
}

Composite = require('../../lib/core/composite');

Component = require('../../lib/core/component');

Pool = require('../../lib/core/pool');

Color = require('../../lib/core/color');

Sprite = require('../../lib/core/sprite');

Transform = require('../../lib/core/transform');

Bounds = require('../../lib/core/bounds');

Border = require('../../lib/core/border');

Boid = require('../../lib/core/boid');

Particle = require('../../lib/core/particle');

Collider = require('../../lib/core/collider');

Kinetic = require('../../lib/core/kinetic');

GameController = (function(_super) {

  __extends(GameController, _super);

  function GameController() {
    return GameController.__super__.constructor.apply(this, arguments);
  }

  GameController.prototype.type = 'gameController';

  GameController.prototype.reset = function() {
    this.colors = [Color(0, 160, 176), Color(106, 74, 60), Color(204, 51, 63), Color(235, 104, 65), Color(237, 201, 81)];
    this.root.gravity = Vec2(0, 500);
    this.spawnBodies(25);
    if (!Engine.input.support.orientation) {
      Engine.debug.warn = 'No devicemotion';
    }
    return this;
  };

  GameController.prototype.spawnBodies = function(count) {
    var color, radius;
    while (count--) {
      color = Math.floor(Math.rand(0, this.colors.length - 1));
      radius = Math.rand(5, 15);
      Body.Prefab.alloc(this.root, {
        transform: {
          pos: Vec2(Math.rand(25, 295), Math.rand(25, 295))
        },
        bounds: {
          radius: radius
        },
        kinetic: {
          mass: radius
        },
        body: {
          color: this.colors[color]
        }
      });
    }
    return this;
  };

  GameController.prototype.update = function(dt) {
    var input;
    input = Engine.input;
    if (input.support.orientation) {
      Vec2.scal(input.orientation, 100, this.root.gravity);
    }
    return this;
  };

  return GameController;

})(Component);

new Pool(GameController);

Body = (function(_super) {

  __extends(Body, _super);

  Body.prototype.type = 'body';

  Body.prototype.layer = 1;

  Body.prototype.presets = {
    color: Color()
  };

  function Body() {
    this.color = Color();
    this.stroke = Color(Color.white);
  }

  Body.prototype.reset = function(presets) {
    this.player = presets.player;
    Color.copy(this.color, presets.color);
    return this;
  };

  Body.prototype.render = function(ctx) {
    var pos;
    ctx.save();
    pos = this.transform.pos;
    ctx.fillStyle = Color.rgba(this.color);
    ctx.strokeStyle = Color.rgba(this.stroke);
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.arc(pos[0] | 0, pos[1] | 0, this.bounds.radius | 0, 0, Math.TAU);
    ctx.stroke();
    ctx.fill();
    ctx.restore();
    return this;
  };

  return Body;

})(Component);

new Pool(Body);

Body.Prefab = new Composite.Prefab({
  transform: null,
  bounds: {
    shape: 'circle',
    radius: 15
  },
  kinetic: {
    mass: 1,
    drag: 0.998,
    friction: 0.1,
    maxVel: 200
  },
  border: {
    bounciness: 0.2
  },
  body: null
});

Engine.gameScene = Composite.alloc(null, {
  gameController: null
});

Engine.play(Engine.gameScene);
