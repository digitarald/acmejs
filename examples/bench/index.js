// Generated by CoffeeScript 1.6.1
'use strict';
var Border, Collider, Color, Component, Engine, Entity, GameController, Kinetic, Particle, Pool, Renderer, SparkPrefab, Transform, Vec2, smokeSprite,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('../../lib/core/math').Vec2;

Engine = require('../../lib/core/engine');

Engine.init(document.getElementById('game-1'));

Renderer = require('../../lib/core/renderer');

Engine.renderer = new Renderer(Engine.element.getElementsByClassName('game-canvas')[0], Vec2(960, 640));

Entity = require('../../lib/core/entity');

Component = require('../../lib/core/component');

Pool = require('../../lib/core/pool');

Color = require('../../lib/core/color');

Transform = require('../../lib/core/transform');

Border = require('../../lib/core/border');

Collider = require('../../lib/core/collider');

Kinetic = require('../../lib/core/kinetic');

Particle = require('../../lib/core/particle');

require('../../lib/core/jitter');

require('../../lib/core/wander');

require('../../lib/core/boid');

GameController = (function(_super) {

  __extends(GameController, _super);

  function GameController() {
    return GameController.__super__.constructor.apply(this, arguments);
  }

  GameController.prototype.tag = 'gameController';

  GameController.prototype.instantiate = function() {
    this.started = 0;
    return this;
  };

  GameController.prototype.update = function(dt) {
    var factor, i, input, spark, speed;
    input = Engine.input;
    if (input.touchState || input.keys.space) {
      factor = (this.started += dt) + 1;
      i = 100 * dt * factor | 0;
      speed = SparkPrefab.attributes;
      while (i--) {
        spark = SparkPrefab.alloc(this.root);
        Vec2.scal(Vec2.set(spark.kinetic.vel, Math.rand(-speed, speed), Math.rand(-speed, speed)), factor);
        Vec2.variant(input.pos, 10, spark.transform.pos);
        spark.particle.radius = Math.rand(5, 25);
      }
    } else if (this.started) {
      this.started = 0;
    }
    return this;
  };

  return GameController;

})(Component);

new Pool(GameController);

smokeSprite = Particle.generateSprite(Color(48, 48, 48), 1);

SparkPrefab = new Entity.Prefab({
  transform: null,
  kinetic: {
    mass: 0.1,
    fast: true,
    maxVel: 200,
    maxAcc: 0
  },
  particle: {
    lifetime: 5,
    fade: Math.quadIn,
    shrink: null,
    sprite: smokeSprite
  },
  jitter: null
});

Engine.gameScene = Entity.alloc(null, {
  gameController: null
});

Engine.play(Engine.gameScene);
