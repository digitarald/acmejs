// Generated by CoffeeScript 1.3.3
var Particle, ParticlePool,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Particle = (function() {

  function Particle() {
    this.pos = Vec2();
    this.vel = Vec2();
    this.acc = Vec2();
    this.colorStart = Color();
    this.color = Color();
    this.friction = 20;
    this.drag = 0;
  }

  Particle.prototype.acquire = function(posX, posY, dirX, dirY, lifetime) {
    this.lifetime = lifetime != null ? lifetime : 1000;
    this.acquired = true;
    Vec2.set(this.pos, posX, posY);
    Vec2.set(this.vel, dirX, dirY);
    Vec2.set(this.acc);
    Color.copy(this.color, this.colorStart);
    this.radius = this.mass = Math.randomFloat(3, 12) | 0;
    this.massInv = 1 / this.mass;
    this.age = 0;
    Pubsub.pool.acquire(this);
    Collider.pool.acquire(this);
    return this;
  };

  Particle.prototype.release = function() {
    this.acquired = false;
    this.pubsub.pub('release', this).release();
    return this;
  };

  return Particle;

})();

ParticlePool = (function(_super) {

  __extends(ParticlePool, _super);

  function ParticlePool() {
    return ParticlePool.__super__.constructor.apply(this, arguments);
  }

  ParticlePool.prototype.update = function(delta) {
    var acc, age, cache, oldVel, particle, vel, _i, _len, _ref;
    oldVel = Vec2.cache[0];
    cache = Vec2.cache[1];
    _ref = this.entities;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      particle = _ref[_i];
      if (!particle.acquired) {
        continue;
      }
      age = (particle.age += delta);
      if (age > particle.lifetime) {
        particle.release();
        continue;
      }
      particle.color[3] = 1 - Math.quadIn(age / particle.lifetime);
      vel = particle.vel;
      acc = Vec2.set(particle.acc, 0, 980);
      oldVel = Vec2.copy(oldVel, vel);
      Vec2.scal(acc, particle.massInv);
      if (particle.friction) {
        Vec2.add(acc, Vec2.scal(Vec2.norm(Vec2.inv(vel, cache)), particle.friction));
      }
      if (particle.drag) {
        Vec2.scal(vel, particle.drag);
      }
      Vec2.add(particle.vel, Vec2.scal(acc, delta / 1000, cache));
      Vec2.add(particle.pos, Vec2.scal(Vec2.add(oldVel, particle.vel), 0.5 * delta / 1000));
      Vec2.set(acc, 0, 0);
    }
    return this;
  };

  ParticlePool.prototype.draw = function(context) {
    var TAU, color, particle, _i, _len, _ref;
    TAU = Math.TAU;
    context.save();
    _ref = this.entities;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      particle = _ref[_i];
      if (!particle.acquired) {
        continue;
      }
      color = particle.color;
      context.fillStyle = Color.rgba(color);
      context.beginPath();
      context.arc(particle.pos[0] | 0, particle.pos[1] | 0, particle.radius, 0, TAU, true);
      context.closePath();
      context.fill();
    }
    context.restore();
    return this;
  };

  return ParticlePool;

})(Pool);

Particle.pool = new ParticlePool(function() {
  return new Particle();
}, 256);
