// Generated by CoffeeScript 1.3.3
var Particle,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Particle = (function() {

  function Particle() {
    this.pos = Vec2();
    this.dir = Vec2();
    this.color = Color();
    this.lifetime = 5000;
    this.awake = false;
  }

  Particle.prototype.sleep = function() {
    this.awake = false;
    return this;
  };

  Particle.prototype.wakeup = function(posX, posY, dirX, dirY) {
    this.awake = true;
    Vec2.set(this.pos, posX || 0, posY || 0);
    Vec2.set(this.dir, dirX || 0, dirY || 0);
    Color.set(this.color, 255, 0, 0, 1);
    this.age = 0;
    return this;
  };

  return Particle;

})();

Particle.Pool = (function(_super) {

  __extends(Pool, _super);

  function Pool() {
    return Pool.__super__.constructor.apply(this, arguments);
  }

  Pool.prototype.update = function(delta) {
    var entity, _i, _len, _ref;
    _ref = this.entities;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      if (!entity.awake) {
        continue;
      }
      entity.age += delta;
      if (entity.age > entity.lifetime) {
        entity.sleep();
        return this;
      }
      Vec2.add(entity.pos, entity.dir);
    }
    return this;
  };

  Pool.prototype.draw = function(context) {
    var TAU, entity, _i, _len, _ref;
    TAU = Math.TAU;
    context.save();
    _ref = this.entities;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      if (!entity.awake) {
        continue;
      }
      context.fillStyle = Color.rgba(entity.color);
      context.beginPath();
      context.arc(entity.pos[0], entity.pos[1], 4, 0, TAU, true);
      context.closePath();
      context.fill();
    }
    context.restore();
    return this;
  };

  return Pool;

})(Pool);

Particle.pool = new Particle.Pool(function() {
  return new Particle();
}, [], 128);
