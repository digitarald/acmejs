// Generated by CoffeeScript 1.3.3
var Composite;

Composite = (function() {

  Composite.prototype.name = 'composite';

  function Composite() {
    this.uid = Math.uid();
    this.children = {};
    this.components = {};
  }

  Composite.prototype.toString = function() {
    return "Composite " + this.name + "#" + this.uid;
  };

  Composite.prototype.alloc = function(parent) {
    this.parent = parent;
    this.scene = parent.scene || parent;
    this.enabled = true;
    return this;
  };

  Composite.prototype.free = function() {
    var key, subs, topic;
    this.enabled = this.allocd = false;
    if (subs = this.subs) {
      for (topic in this.subs) {
        this.subs[topic].length = 0;
      }
    }
    for (key in this.components) {
      this.components[key].free();
    }
    for (key in this.children) {
      this.children[key].free();
    }
    if (this.parent) {
      delete this.parent.children[this.uid];
    }
    this.scene = this.parent = null;
    return this;
  };

  Composite.prototype.enable = function() {
    this.pub('enable', this);
    return this.enabled = true;
  };

  Composite.prototype.disable = function() {
    this.pub('disable', this);
    return this.enabled = false;
  };

  Composite.prototype.sub = function(scope, topic, method) {
    var items, refs, subs;
    subs = this.subs || (this.subs = {});
    items = subs[topic] || (subs[topic] = []);
    items.push(scope, method);
    refs = scope.refPubs || (scope.refPubs = []);
    if (refs.indexOf(this) !== -1) {
      refs.push(this);
    }
    return this;
  };

  Composite.prototype.pub = function(topic, a0, a1, a2, a3, a4, a5, a6, a7) {
    var i, items, scope;
    if (this.subs && (items = this.subs[topic] && (i = items.length))) {
      while (i -= 2) {
        if (scope = items[i]) {
          scope[items[i + 1] || topic](a0, a1, a2, a3, a4, a5, a6, a7);
        }
      }
    }
    return this;
  };

  Composite.prototype.unsub = function(unscope, untopic) {
    var i, items, length, scope, subs, topic;
    if (subs = this.subs) {
      for (topic in subs) {
        items = subs[topic];
        if (!((i = items.length) && (!untopic || untopic === topic))) {
          continue;
        }
        length = i / 2;
        while (i -= 2) {
          if (scope = items[i]) {
            if (unscope && scope !== unscope) {
              continue;
            } else {
              items[i] = null;
            }
            length--;
          }
        }
        if (!length) {
          items.length = 0;
        }
      }
    }
    return this;
  };

  return Composite;

})();
