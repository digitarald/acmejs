// Generated by CoffeeScript 1.3.3
var Composite, Pool;

Pool = require('./pool');

Composite = (function() {

  function Composite() {
    this.children = {};
    this.components = {};
    this.enabled = true;
  }

  Composite.prototype.toString = function() {
    return "Composite " + (this.name || this.type) + "#" + this.uid;
  };

  Composite.prototype.alloc = function(presets) {
    var child, preset, type, _i, _len;
    if (presets) {
      for (type in presets) {
        preset = presets[type];
        switch (type) {
          case 'children':
            for (_i = 0, _len = preset.length; _i < _len; _i++) {
              child = preset[_i];
              Composite.alloc(this, child);
            }
            break;
          case 'name':
            this.name = presets[type];
            break;
          default:
            Pool.types[type].alloc(this, preset);
        }
      }
    }
    if (this.parent) {
      this.parent.children[this.uid] = this;
    }
    return this;
  };

  Composite.prototype.free = function() {
    var key, ref, refSubs, _i, _len;
    if (refSubs = this.refSubs) {
      for (_i = 0, _len = refSubs.length; _i < _len; _i++) {
        ref = refSubs[_i];
        ref.unsub(this);
      }
    }
    this.refSubs = this.subs = null;
    for (key in this.components) {
      this.components[key].free();
    }
    for (key in this.children) {
      this.children[key].free();
    }
    if (this.parent) {
      delete this.parent.children[this.uid];
    }
    this.pool.free(this);
    return this;
  };

  Composite.prototype.enable = function(state, recursive) {
    var key;
    this.enabled = state != null ? state : state = !this.state;
    this.parent.pub('on' + (state ? 'Enable' : 'Disable'), this);
    for (key in this.components) {
      this.components[key].enable(state);
    }
    if (recursive) {
      for (key in this.children) {
        this.children[key].enable(state, true);
      }
    }
    return this;
  };

  Composite.prototype.sub = function(scope, topic, method) {
    var items, refs, subs;
    if (scope == null) {
      scope = this;
    }
    subs = this.subs || (this.subs = {});
    items = subs[topic] || (subs[topic] = []);
    items.push(scope, method);
    if (scope !== this) {
      refs = scope.refSubs || (scope.refSubs = []);
      if (!~refs.indexOf(this)) {
        refs.push(this);
      }
    }
    return this;
  };

  Composite.prototype.pub = function(topic, a0, a1, a2, a3) {
    var i, items, scope;
    if (this.subs && (items = this.subs[topic]) && (i = items.length)) {
      while (scope = items[i -= 2]) {
        scope[items[i + 1] || topic](a0, a1, a2, a3);
      }
    }
    return this;
  };

  Composite.prototype.pubUp = function(topic, a0, a1, a2, a3) {
    var comp;
    comp = this;
    while (comp) {
      if (comp.pub(topic, a0, a1, a2, a3) === false) {
        break;
      }
      comp = comp.parent;
    }
    return this;
  };

  Composite.prototype.pubAll = function(topic, a0, a1, a2, a3) {
    return Pool.call(topic, a0, a1, a2, a3);
  };

  Composite.prototype.unsub = function(unscope, untopic) {
    var i, items, length, scope, subs, topic;
    if (subs = this.subs) {
      for (topic in subs) {
        items = subs[topic];
        if (!((i = items.length) && (!untopic || untopic === topic))) {
          continue;
        }
        length = i / 2;
        while ((i -= 2) >= 0) {
          if (scope = items[i]) {
            if (unscope && scope !== unscope) {
              continue;
            } else {
              items[i] = null;
            }
            length--;
          }
        }
        if (!length) {
          items.length = 0;
        }
      }
    }
    return this;
  };

  return Composite;

})();

new Pool(Composite);

Composite.Prefab = (function() {

  function Prefab(presets) {
    this.presets = presets;
  }

  Prefab.prototype.alloc = function(parent, presets) {
    var defaults, key, subKey, subPresets, value;
    if ((defaults = this.presets) && presets) {
      for (key in defaults) {
        value = defaults[key];
        if (!(key in presets)) {
          presets[key] = value;
        } else {
          subPresets = presets[key];
          if (key === 'children') {
            subPresets.unshift.apply(subPresets, value);
          } else if (typeof value === 'object') {
            for (subKey in value) {
              if (!(subKey in subPresets)) {
                subPresets[subKey] = value[subKey];
              }
            }
          }
          delete presets[key];
          presets[key] = subPresets;
        }
      }
    }
    return Composite.alloc(parent, presets || defaults);
  };

  return Prefab;

})();

module.exports = Composite;
