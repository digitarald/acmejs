// Generated by CoffeeScript 1.3.3
var Component;

require('./math');

Component = (function() {

  function Component() {}

  Component.prototype.type = 'component';

  Component.prototype.toString = function() {
    return "Component " + this.type + "#" + this.uid + " [" + this.parent + "]";
  };

  Component.prototype.alloc = function(presets) {
    var component, components, type;
    this.parent.components[this.type] = this;
    this.parent[this.type] = this;
    components = this.parent.components;
    for (type in components) {
      this[type] = component = components[type];
      component[this.type] = this;
    }
    if (this.reset) {
      this.reset(presets);
    }
    return this;
  };

  Component.prototype.free = function() {
    var components, type;
    delete this.parent.components[this.type];
    this.parent[this.type] = null;
    components = this.parent.components;
    for (type in components) {
      this[components[type].type] = null;
      components[type][this.type] = null;
    }
    this.pool.free(this);
    return this;
  };

  Component.prototype.enable = function(state) {
    this.enabled = state != null ? state : state = !this.state;
    this.parent.pub('onComponent' + (state ? 'Enable' : 'Disable'), this);
    return this;
  };

  Component.prototype.sub = function(scope, topic, method) {
    if (scope == null) {
      scope = this;
    }
    this.parent.sub(scope, topic, method);
    return this;
  };

  return Component;

})();

module.exports = Component;
